<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://aaaa8880788.github.io</id>
    <title>键盘敲烂，月薪过万，冲！</title>
    <subtitle></subtitle>
    <icon>https://aaaa8880788.github.io/images/favicon.ico</icon>
    <link href="https://aaaa8880788.github.io" />
    <author>
      <name>呆头鸭</name>
    </author>
    <updated>2024-03-02T02:58:40.610Z</updated>
    <entry>
        <id>https://aaaa8880788.github.io/bywork-explore/172%E5%8F%B7%E5%8D%A1%E6%B3%A8%E5%86%8C%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/</id>
        <title>172号卡注册及使用流程</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/bywork-explore/172%E5%8F%B7%E5%8D%A1%E6%B3%A8%E5%86%8C%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;172号卡注册及使用流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#172号卡注册及使用流程&#34;&gt;#&lt;/a&gt; 172 号卡注册及使用流程&lt;/h1&gt;
&lt;h2 id=&#34;副业探索姬卖流量卡起步慢但长期来看月入过万似乎不难&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#副业探索姬卖流量卡起步慢但长期来看月入过万似乎不难&#34;&gt;#&lt;/a&gt; 【副业探索姬】卖流量卡，起步慢，但长期来看，月入过万似乎不难&lt;/h2&gt;
&lt;p&gt;很多朋友问在哪里办便宜的流量卡，不如自己做代理商，自己办自己拿佣金。172 分销佣金很高，100 到 200 都有。&lt;/p&gt;
&lt;p&gt;现在的流量卡代理已经不再是之前的物联卡了，且都是正规运营商授权的。你可能会好奇这些正规卡是从哪里来的，这里来简单介绍一下。&lt;/p&gt;
&lt;p&gt;这些卡主要来自于当地省厅运营商，因为当地人口激活数量不足，为了提高当地激活数据，提高当地归属地手机卡的激活量，这些正规运营商会在网上专属渠道推广这些办卡渠道。这些卡都经过运营商的授权和认证，因此是非常安全可靠的。&lt;/p&gt;
&lt;p&gt;现在代理的流量卡都是正规号码卡，它们有 11 位号码，可以打电话和发短信，属于运营商正规的号段手机卡。这些卡都是可以登录中国电信、中国联通、中国移动的 APP。与物联卡不同，这些卡的归属地比较特别，大部分卡的归属地都不是当地，而是在重庆、海南、河南等地。这是因为当地省级部门为了提高当地的 GDP，需要提供当地移动用户的号卡激活率，而运营商号卡的新用户也是属于当地政府的考察指标之一。为了达成这个目标，省级部门和当地运营商联合推出了一些优惠政策卡，例如常见的大王卡，也被称为互联网卡。这些卡早期只能在当地门店办理激活，但随着互联网的发展，宣发渠道逐渐增多，现在可以通过网上办理。流量卡代理就是通过开通后台进行分销，推广流量卡并赚取佣金。&lt;/p&gt;
&lt;p&gt;做流量卡代理是几乎没有门槛的事情，硬件门槛就是你需要一部手机，需要配置的入门级门槛，拥有一个市场营销推广的头脑。&lt;/p&gt;
&lt;h2 id=&#34;第一步注册成为一级代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一步注册成为一级代理&#34;&gt;#&lt;/a&gt; 第一步。注册成为一级代理&lt;/h2&gt;
&lt;p&gt;注册链接: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oYW9rYS5sb3QtbWwuY29tL2xvZ2luLmh0bWw=&#34;&gt;https://haoka.lot-ml.com/login.html&lt;/span&gt; 推荐人手机号：15015911600&lt;/p&gt;
&lt;p&gt;账号自己设置，可以是文字也可以是号码，登录是使用账号登录。一定要记得住的就行。 店铺名称不是账号，店铺名字可在店铺内设置并且可以随意更改，不用担心名字不好听。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台可以自己发展下级代理，注册和登陆都是这个网站，注册以后请保存好方便登录，只要是填你的推荐人号码注册就是你的代理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;免费注册，不需要订单量，没有任何要求，一单也结算（平台结算），只要你不虚假宣传。172 号卡平台注册必须实名，不实名无商品。佣金平台结算，完全自由，非常安全！&lt;/p&gt;
&lt;p&gt;因为提现需要验证手机号，要保证注册当前后台的手机号，自己是在用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不想收到上架通知短信，可以在系统管理，短信通知设置关闭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://yesmore.cc/article/llk/1.JPEG&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;第二步设置店铺&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二步设置店铺&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第二步。设置店铺&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;点击左侧，系统管理→首页为订单数据→个人中心，可设置店铺名称及佣金提现渠道绑定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;店铺二维码&lt;/strong&gt;保存分享别人办卡就行了。&lt;/p&gt;
&lt;p&gt;或者在商品管理上方点击号卡店铺，会自动复制店铺链接。然后百度草料二维码，将网址放进去可根据自己喜好设计二维码。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://yesmore.cc/article/llk/2.PNG&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可单独使用&lt;strong&gt;商品海报&lt;/strong&gt;，也可以复制&lt;strong&gt;商品链接&lt;/strong&gt;发给顾客办卡。&lt;/p&gt;
&lt;h2 id=&#34;第三步拉代理注册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三步拉代理注册&#34;&gt;#&lt;/a&gt; 第三步。拉代理注册&lt;/h2&gt;
&lt;p&gt;注册链接也是登陆链接，把注册链接发给别人注册时，推荐人手机号填你的号码即可成为你的下级。 如果你的代理没有实名，则他看不见商品，若&lt;strong&gt;没有实名的代理忘记密码&lt;/strong&gt;，可以找到该代理后台账户，重置密码。实名以后的可以自己找回密码。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://yesmore.cc/article/llk/3.PNG&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;第四步设置下级佣金&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四步设置下级佣金&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第四步。设置下级佣金&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;首先你得有一个下级，先打开产品自动分佣设置，然后在商品管理→商品列表最右边批量分佣，例如你的佣金 135，你可以设置 125 给下级。每一个商品需要批量分佣设置一次。后续系统根据你设置的，自动为新注册代理设置，有新上架商品就再给新上架的批量分佣一次。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://yesmore.cc/article/llk/4.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://yesmore.cc/article/llk/5.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;自动上架以后就不需要再管了，但是如果你想单独设置某个人的佣金，可以在代理商列表找到他，重新设置一次，设置一个点一次确定。不受批量影响。&lt;/p&gt;
&lt;p&gt;不推荐按百分比自动设置佣金。&lt;/p&gt;
&lt;p&gt;下面是单独设置佣金的地方：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://yesmore.cc/article/llk/6.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;佣金设置有两点值得注意，那就是设置好以后的代理，是不受后续佣金设置影响的，举例，你给代理甲设置了佣金 100，给乙代理设置 90，甲的佣金不受影响继续 100。&lt;strong&gt;假如你有一千个代理，本来想设置 100，结果不小心设置成了 10，那只有一千个代理挨改。而且以后这张卡自动上架也会一直是 10，所以千万别设置错了。担心自己手残的，可以开启百分比佣金自动上架。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有一点就是，已经下架的卡，重新上架以后，以前设置过的代理会自动上，但是下架期间新来的不会上，需要重新设置一遍。&lt;/p&gt;
&lt;h2 id=&#34;第五步佣金提现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第五步佣金提现&#34;&gt;#&lt;/a&gt; &lt;strong&gt;第五步。佣金提现&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;172 采用激活先显示佣金的政策，用冻结表示。但不代表冻结金额就是你实际能提现的金额。只是拟发放。如果顾客在次月 25 号开始结算审核时，已经注销卡，或者更改套餐，单停、三无（不用流量，不发短信、不打电话）等则不会结算。换句话说，只要卡不出问题，冻结金额都会发。点击左侧财务管理，可见收入明细，以及提现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说人话就是，显示的佣金不一定能全拿到，不显示不代表拿不到，佣金结算是按运营商数据为准，后台数据更新有延迟或者不更新都没事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://yesmore.cc/article/llk/7.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点保存以后就不要点什么其他的了，不要去点那什么同意点了没用，直接等着打款，时间一个星期内都正常，超过一个星期也正常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点讲一下单停&lt;/strong&gt;：单停代表系统检测到该卡可能存在违规操作，为了避免电信诈骗，单独停用该卡的语音通话（原本就有通话功能的卡）。这种情况下一般会发短信告知，一定要提醒顾客联系 APP 客服，或者根据短信提示操作复机。由于大部分流量卡都是只用来上网，不注意短信的时候很可能没发现自己的号码已经单停，如果能联系顾客，尽量提醒顾客注意短信，且不要频繁更换手机，一旦单停及时解除，前期卡容易单停，涉及佣金结算，一定要注意。结算佣金以后就不用管了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有的卡不考核单停除外&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最后悄咪咪的小提示，自己实名开的代理店铺，也可以自己下单一张流量卡，也会有佣金哦&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="bywork-explore" scheme="https://aaaa8880788.github.io/categories/bywork-explore/" />
        <category term="bywork-explore" scheme="https://aaaa8880788.github.io/tags/bywork-explore/" />
        <updated>2024-03-02T02:58:40.610Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/</id>
        <title>2022最新前端手撕代码</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
        <content type="html">&lt;h1 id=&#34;前端面试之手撕代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前端面试之手撕代码&#34;&gt;#&lt;/a&gt; 前端面试之手撕代码&lt;/h1&gt;
&lt;h2 id=&#34;1防抖函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1防抖函数&#34;&gt;#&lt;/a&gt; 1. 防抖函数&lt;/h2&gt;
&lt;p&gt;防抖原理：事件触发后，会在规定时间后执行，若在规定时间内再次触发，则刷新时间重新计时，直到事件执行成功&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Debounce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; timer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;funtion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        timer &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;clearTimeOut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;timer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      	timer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setTimeOut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;delay&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Debounce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; timer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    timer &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;clearTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;timer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    timer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;2节流函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2节流函数&#34;&gt;#&lt;/a&gt; 2. 节流函数&lt;/h2&gt;
&lt;p&gt;节流原理：在规定事件内事件只能被触发一次&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;throttle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;delay&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; lastTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;funtion&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; nowTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nowTime&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;lastTime &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; delay&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            lastTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nowTime&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;throttle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; lastTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; nowTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nowTime &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; lastTime &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; delay&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      lastTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nowTime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3数组扁平化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3数组扁平化&#34;&gt;#&lt;/a&gt; 3. 数组扁平化&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 数组扁平化测试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出 [1,2,3,4,5,6,7]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <updated>2024-03-02T02:52:21.689Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
        <title>2022最新前端八股文汇总</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;2022年最新前端面试题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2022年最新前端面试题&#34;&gt;#&lt;/a&gt; 2022 年最新前端面试题&lt;/h1&gt;
&lt;h2 id=&#34;html-css&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html-css&#34;&gt;#&lt;/a&gt; HTML &amp;amp;&amp;amp; CSS&lt;/h2&gt;
&lt;h3 id=&#34;html5-新特性-语义化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html5-新特性-语义化&#34;&gt;#&lt;/a&gt; HTML5 新特性、语义化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;HTML5 的语义化指的是 &lt;code&gt;合理正确的使用语义化的标签来创建页面结构&lt;/code&gt; 。【正确的标签做正确的事】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语义化标签&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;header nav main article section aside footer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语义化的优点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;没CSS样式的情况下，页面整体也会呈现很好的结构效果&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代码结构清晰&lt;/code&gt; ，易于阅读，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;利于开发和维护&lt;/code&gt;  方便其他设备解析（如屏幕阅读器）根据语义渲染网页。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;有利于搜索引擎优化（SEO）&lt;/code&gt; ，搜索引擎爬虫会根据不同的标签来赋予不同的权重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;html5新特性有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html5新特性有哪些&#34;&gt;#&lt;/a&gt; HTML5 新特性有哪些&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;语义化标签&lt;/li&gt;
&lt;li&gt;音视频处理 API (audio,video)&lt;/li&gt;
&lt;li&gt;canvas / webGL&lt;/li&gt;
&lt;li&gt;拖拽释放 (Drag and drop) API&lt;/li&gt;
&lt;li&gt;history API&lt;/li&gt;
&lt;li&gt;requestAnimationFrame&lt;/li&gt;
&lt;li&gt;地理位置 (Geolocation) API&lt;/li&gt;
&lt;li&gt;webSocket&lt;/li&gt;
&lt;li&gt;web 存储 localStorage、SessionStorage&lt;/li&gt;
&lt;li&gt;表单控件，calendar、date、time、email、url、search&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;css-选择器及优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-选择器及优先级&#34;&gt;#&lt;/a&gt; CSS 选择器及优先级&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;选择器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id 选择器 (#myid)&lt;/li&gt;
&lt;li&gt;类选择器 (.myclass)&lt;/li&gt;
&lt;li&gt;属性选择器 (a [rel=&amp;quot;external&amp;quot;])&lt;/li&gt;
&lt;li&gt;伪类选择器 (a:hover, li:nth-child)&lt;/li&gt;
&lt;li&gt;标签选择器 (div, h1,p)&lt;/li&gt;
&lt;li&gt;相邻选择器（h1 + p）&lt;/li&gt;
&lt;li&gt;子选择器 (ul&amp;gt; li)&lt;/li&gt;
&lt;li&gt;后代选择器 (li a)&lt;/li&gt;
&lt;li&gt;通配符选择器 (*)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优先级：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!important&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联样式（1000）&lt;/li&gt;
&lt;li&gt;ID 选择器（0100）&lt;/li&gt;
&lt;li&gt;类选择器 / 属性选择器 / 伪类选择器（0010）&lt;/li&gt;
&lt;li&gt;元素选择器 / 伪元素选择器（0001）&lt;/li&gt;
&lt;li&gt;关系选择器 / 通配符选择器（0000）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;带！important 标记的样式属性优先级最高； 样式表的来源相同时：&lt;br /&gt;
 &lt;code&gt;!important &amp;gt; 行内样式&amp;gt;ID选择器 &amp;gt; 类选择器 &amp;gt; 标签 &amp;gt; 通配符 &amp;gt; 继承 &amp;gt; 浏览器默认属性&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;渐进增强与优雅降级的理解及区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#渐进增强与优雅降级的理解及区别&#34;&gt;#&lt;/a&gt; 渐进增强与优雅降级的理解及区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;渐进增强（Progressive Enhancement）：&lt;/strong&gt;&lt;br /&gt;
一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优雅降级（Graceful Degradation）：&lt;/strong&gt;&lt;br /&gt;
一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。&lt;br /&gt;
&lt;strong&gt;两者区别&lt;/strong&gt;&lt;br /&gt;
 1、广义：&lt;br /&gt;
其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级&lt;br /&gt;
 2、狭义：&lt;br /&gt;
渐进增强一般说的是使用 CSS3 技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现 html 标签的语义，以便在 js/css 的加载失败 / 被禁用时，也不影响用户的相应功能。&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 例子 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.transition&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 渐进增强写法 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token property&#34;&gt;-moz-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token property&#34;&gt;-o-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token property&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.transition&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 优雅降级写法 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token property&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token property&#34;&gt;-o-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token property&#34;&gt;-moz-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;常见的兼容性问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的兼容性问题&#34;&gt;#&lt;/a&gt; 常见的兼容性问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li margin:0;padding:0;=&#34;&#34;&gt;
&lt;p&gt;不同浏览器的标签默认的 margin 和 padding 不一样。*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IE6 双边距 bug：块属性标签 float 后，又有横行的 margin 情况下，在 IE6 显示 margin 比设置的大。hack：display:inline; 将其转化为行内属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置较小高度标签（一般小于 10px），在 IE6，IE7 中高度超出自己设置高度。hack：给超出高度的标签设置 overflow:hidden; 或者设置行高 line-height 小于你设置的高度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示，可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不再具有 hover 和 active 了。解决方法是改变 CSS 属性的排列顺序：L-V-H-A (love hate): a:link {} a:visited {} a:hover {} a:active {}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;css3新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css3新特性&#34;&gt;#&lt;/a&gt; CSS3 新特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;过渡&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 所有属性从原始值到制定值的一个过渡，运动曲线 ease, 运动时间 0.5 秒 */&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;transition：all&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;5s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;动画&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//animation：动画名称，一个周期花费时间，运动曲线（默认 ease），动画延迟（默认 0），播放次数（默认 1），是否反向播放动画（默认 normal），是否暂停动画（默认 running）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 执行一次 logo2-line 动画，运动时间 2 秒，运动曲线为 linear*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;animation&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; logo2&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;line 2s linear&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;形状转换&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//transform: 适用于 2D 或 3D 转换的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//transform-origin：转换元素的位置（围绕那个点进行转换）。默认 (x,y,z)：(50%,50%,0)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30px&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;30px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选择器:nth-of-type ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阴影&lt;br /&gt;
文字阴影: text-shadow: 2px 2px 2px #000;(水平阴影，垂直阴影，模糊距离，阴影颜色) 盒子阴影: box-shadow: 10px 10px 5px #999&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边框 border-image: url (border.png);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;渐变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filter（滤镜）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弹性布局、栅格布局、多列布局&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;媒体查询&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;position-属性的值有哪些及其区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#position-属性的值有哪些及其区别&#34;&gt;#&lt;/a&gt; position 属性的值有哪些及其区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;固定定位 fixed&lt;/strong&gt;： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相对定位 relative&lt;/strong&gt;： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素 “相对于” 它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝对定位 absolute&lt;/strong&gt;： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于 body。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;粘性定位 sticky&lt;/strong&gt;： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认定位 Static&lt;/strong&gt;： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。&lt;/p&gt;
&lt;h3 id=&#34;box-sizing属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#box-sizing属性&#34;&gt;#&lt;/a&gt; box-sizing 属性&lt;/h3&gt;
&lt;p&gt;box-sizing 规定两个并排的带边框的框，语法为 box-sizing：content-box/border-box/inherit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;content-box&lt;/strong&gt;：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。【标准盒子模型】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;border-box&lt;/strong&gt;：为元素设定的宽度和高度决定了元素的边框盒。【IE 盒子模型】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;inherit&lt;/strong&gt;：继承父元素的 box-sizing 值。&lt;/p&gt;
&lt;h3 id=&#34;css-盒子模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-盒子模型&#34;&gt;#&lt;/a&gt; CSS 盒子模型&lt;/h3&gt;
&lt;p&gt;CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。&lt;br /&gt;
在标准的盒子模型中， &lt;code&gt;width 指 content 部分的宽度&lt;/code&gt; 。&lt;br /&gt;
在 IE 盒子模型中， &lt;code&gt;width 表示 content+padding+border 这三个部分的宽度&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;故在计算盒子的宽度时存在差异：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准盒模型：&lt;/strong&gt; 一个块的总宽度 = width+margin (左右)+padding (左右)+border (左右)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;怪异盒模型：&lt;/strong&gt; 一个块的总宽度 = width+margin（左右）（既 width 已经包含了 padding 和 border 值）&lt;/p&gt;
&lt;h3 id=&#34;bfc块级格式上下文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bfc块级格式上下文&#34;&gt;#&lt;/a&gt; BFC（块级格式上下文）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;BFC 的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BFC&lt;/code&gt;  是  &lt;code&gt;Block Formatting Context &lt;/code&gt; 的缩写，即块级格式化上下文。 &lt;code&gt;BFC&lt;/code&gt;  是 CSS 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BFC 的原理布局规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部的 Box 会在 &lt;code&gt;垂直方向&lt;/code&gt; ，一个接一个地放置 *&lt;/li&gt;
&lt;li&gt;Box &lt;code&gt;垂直方向的距离由margin决定&lt;/code&gt; 。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 *&lt;/li&gt;
&lt;li&gt;每个元素的 margin box 的左边， 与包含块 border box 的左边相接触 (对于从左往右的格式化，否则相反&lt;/li&gt;
&lt;li&gt;BFC 的区域 &lt;code&gt;不会与float box重叠&lt;/code&gt;  *&lt;/li&gt;
&lt;li&gt;BFC 是一个独立容器，容器里面的 &lt;code&gt;子元素不会影响到外面的元素&lt;/code&gt;  *&lt;/li&gt;
&lt;li&gt;计算 BFC 的高度时， &lt;code&gt;浮动元素也参与计算高度&lt;/code&gt;  *&lt;/li&gt;
&lt;li&gt;元素的类型和 &lt;code&gt;display属性，决定了这个Box的类型&lt;/code&gt; 。不同类型的 Box 会参与不同的 &lt;code&gt;Formatting Context&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如何创建 BFC？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根元素，即 HTML 元素&lt;/li&gt;
&lt;li&gt;float 的值不为 none&lt;/li&gt;
&lt;li&gt;position 为 absolute 或 fixed*&lt;/li&gt;
&lt;li&gt;display 的值为 inline-block、table-cell、table-caption*&lt;/li&gt;
&lt;li&gt;overflow 的值不为 visible*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;BFC 的使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去除边距重叠现象 *&lt;/li&gt;
&lt;li&gt;清除浮动（让父元素的高度包含子浮动元素）*&lt;/li&gt;
&lt;li&gt;避免某元素被浮动元素覆盖&lt;/li&gt;
&lt;li&gt;避免多列布局由于宽度计算四舍五入而自动换行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;让一个元素水平垂直居中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#让一个元素水平垂直居中&#34;&gt;#&lt;/a&gt; 让一个元素水平垂直居中&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;水平居中&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于 行内元素 :  &lt;code&gt;text-align: center&lt;/code&gt; ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于确定宽度的块级元素：&lt;/p&gt;
&lt;p&gt;（1）width 和 margin 实现。 &lt;code&gt;margin: 0 auto&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;（2）绝对定位和 margin-left: margin-left: (父 width - 子 width）/2, 前提是父元素 position: relative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于宽度未知的块级元素&lt;/p&gt;
&lt;p&gt;（1） &lt;code&gt;table标签配合margin左右auto实现水平居中&lt;/code&gt; 。使用 table 标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右 margin 为 auto。&lt;/p&gt;
&lt;p&gt;（2）inline-block 实现水平居中方法。display：inline-block 和 text-align:center 实现水平居中。&lt;/p&gt;
&lt;p&gt;（3） &lt;code&gt;绝对定位+transform&lt;/code&gt; ，translateX 可以移动本身元素的 50%。&lt;/p&gt;
&lt;p&gt;（4）flex 布局使用 &lt;code&gt;justify-content:center&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;垂直居中&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用  &lt;code&gt;line-height&lt;/code&gt;  实现居中，这种方法适合纯文字类&lt;/li&gt;
&lt;li&gt;通过设置父容器 相对定位 ，子级设置  &lt;code&gt;绝对定位&lt;/code&gt; ，标签通过 margin 实现自适应居中&lt;/li&gt;
&lt;li&gt;弹性布局 flex : 父级设置 display: flex; 子级设置 margin 为 auto 实现自适应居中&lt;/li&gt;
&lt;li&gt;父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table 布局&lt;/code&gt; ，父级通过转换成表格形式， &lt;code&gt;然后子级设置 vertical-align 实现&lt;/code&gt; 。（需要注意的是：vertical-align: middle 使用的前提条件是内联元素以及 display 值为 table-cell 的元素）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA4MzQ4NTI0NTMwMTA2Mzgx&#34;&gt;# 图解 CSS 水平垂直居中常见面试方法&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;隐藏页面中某个元素的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏页面中某个元素的方法&#34;&gt;#&lt;/a&gt; 隐藏页面中某个元素的方法&lt;/h3&gt;
&lt;p&gt;1. &lt;code&gt;opacity：0&lt;/code&gt; ，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如 click 事件，那么点击该区域，也能触发点击事件的&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;visibility：hidden&lt;/code&gt; ，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）&lt;/p&gt;
&lt;p&gt;3. &lt;code&gt;display：none&lt;/code&gt; ，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流 + 重绘）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该问题会引出 回流和重绘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;用css实现三角符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用css实现三角符号&#34;&gt;#&lt;/a&gt; 用 CSS 实现三角符号&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 记忆口诀：盒子宽高均为零，三面边框皆透明。 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;div:after&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; absolute&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-right&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid transparent&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid #ff0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid transparent&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-bottom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid transparent&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;页面布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面布局&#34;&gt;#&lt;/a&gt; 页面布局&lt;/h3&gt;
&lt;h4 id=&#34;1flex-布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1flex-布局&#34;&gt;#&lt;/a&gt; 1.Flex 布局&lt;/h4&gt;
&lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。&lt;/p&gt;
&lt;p&gt;Flex 是 Flexible Box 的缩写，意为 &amp;quot;弹性布局&amp;quot;, 用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。&lt;/p&gt;
&lt;p&gt;容器的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li flex-flow:=&#34;&#34; ||=&#34;&#34; ;=&#34;&#34;&gt;flex-flow： .box&lt;/li&gt;
&lt;li&gt;justify-content：对其方式，水平主轴对齐方式&lt;/li&gt;
&lt;li&gt;align-items：对齐方式，竖直轴线方向&lt;/li&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目的属性（元素的属性）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0&lt;/li&gt;
&lt;li&gt;flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大&lt;/li&gt;
&lt;li&gt;*flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小&lt;/li&gt;
&lt;li&gt;flex-basis 属性：定义了在分配多余的空间，项目占据的空间。&lt;/li&gt;
&lt;li&gt;*flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。&lt;/li&gt;
&lt;li&gt;align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖&lt;/li&gt;
&lt;li&gt;align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2rem-布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2rem-布局&#34;&gt;#&lt;/a&gt; 2.Rem 布局&lt;/h4&gt;
&lt;p&gt;首先 Rem 相对于根 (html) 的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;, 那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：可以快速适用移动端布局，字体，图片高度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;①目前 ie 不支持，对 pc 页面来讲使用次数不多；&lt;br /&gt;
②数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；&lt;br /&gt;
③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。&lt;/p&gt;
&lt;h4 id=&#34;3百分比布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3百分比布局&#34;&gt;#&lt;/a&gt; 3. 百分比布局&lt;/h4&gt;
&lt;p&gt;通过百分比单位 &amp;quot;%&amp;quot; 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（1）计算困难&lt;br /&gt;
（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。&lt;/p&gt;
&lt;h4 id=&#34;4浮动布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4浮动布局&#34;&gt;#&lt;/a&gt; 4. 浮动布局&lt;/h4&gt;
&lt;p&gt;浮动布局：当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与 inline-block 还是有一些区别的，第一个就是关于横向排序的时候，float 可以设置方向而 inline-block 方向是固定的；还有一个就是 inline-block 在使用时有时会有空白间隙的问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素， &lt;code&gt;会造成父级元素高度塌陷&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;如何使用rem或viewport进行移动端适配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用rem或viewport进行移动端适配&#34;&gt;#&lt;/a&gt; 如何使用 rem 或 viewport 进行移动端适配&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;rem 适配原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;改变了一个元素在不同设备上占据的 css 像素的个数&lt;/p&gt;
&lt;p&gt;rem 适配的优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：没有破坏完美视口&lt;/li&gt;
&lt;li&gt;缺点：px 值转换 rem 太过于复杂 (下面我们使用 less 来解决这个问题)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;viewport 适配的原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;viewport 适配方案中，每一个元素在不同设备上占据的 css 像素的个数是一样的。但是 css 像素和物理像素的比例是不一样的，等比的&lt;/p&gt;
&lt;p&gt;viewport 适配的优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在我们设计图上所量取的大小即为我们可以设置的像素大小，即所量即所设&lt;/li&gt;
&lt;li&gt;缺点破坏完美视口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;清除浮动的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清除浮动的方式&#34;&gt;#&lt;/a&gt; 清除浮动的方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加额外标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;parent&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    //添加额外标签并且添加clear属性&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token special-attr&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token value css language-css&#34;&gt;&lt;span class=&#34;token property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;both&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    //也可以加一个br标签&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;父级添加 overflow 属性，或者设置高度&lt;/li&gt;
&lt;li&gt;建立伪类选择器清除浮动&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 在 css 中添加:after 伪元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parent&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;after&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加子元素的内容是空 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加子元素为块级元素 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; block&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加的子元素的高度 0 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加子元素看不见 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;visibility&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置 clear：both */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; both&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;css预处理器sass-less-stylus的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css预处理器sass-less-stylus的区别&#34;&gt;#&lt;/a&gt; CSS 预处理器 Sass、Less、Stylus 的区别&lt;/h3&gt;
&lt;p&gt;什么事 CSS 预处理器？&lt;/p&gt;
&lt;p&gt;CSS 预处理器是一种语言用来为 CSS 增加一些变成的特性，无需考虑浏览器兼容问题，例如你可以在 CSS 中使用变量，简单的程序逻辑、函数等在编程语言中的一些基本技巧，可以让 CSS 更加简洁，适应性更强，代码更直观等诸多好处&lt;br /&gt;
基本语法区别&lt;/p&gt;
&lt;p&gt;Sass 是以.sass 为扩展名，Less 是以.less 为扩展名，Stylus 是以.styl 为扩展名&lt;br /&gt;
变量的区别&lt;/p&gt;
&lt;p&gt;Sass 变量必须是以 &lt;code&gt;$&lt;/code&gt;  开头的，然后变量和值之间使用冒号（：）隔开，和 css 属性是一样的。&lt;br /&gt;
Less 变量是以 &lt;code&gt;@&lt;/code&gt; 开头的，其余 sass 都是一样的。&lt;br /&gt;
Stylus 对变量是没有任何设定的，可以是以 $ 开头或者任意字符，而且变量之间可以冒号，空格隔开，但是在 stylus 中不能用 @开头&lt;br /&gt;
三种预处理器都有：嵌套、运算符、颜色函数、导入、继承、混入。Stylus 还有一些高级特性。例如循环、判断等&lt;/p&gt;
&lt;h2 id=&#34;javascript篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javascript篇&#34;&gt;#&lt;/a&gt; JavaScript 篇&lt;/h2&gt;
&lt;h3 id=&#34;1js的数据类型关于数据类型相关的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1js的数据类型关于数据类型相关的&#34;&gt;#&lt;/a&gt; 1.js 的数据类型（关于数据类型相关的）&lt;/h3&gt;
&lt;h4 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; &lt;strong&gt;基本数据类型&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;ES5 的 5 种：&lt;em&gt;&lt;strong&gt;*Null，undefined，Boolean，Number，String， ES6 新增：Symbol 表示独一无二的值 ES10 新增：BigInt 表示任意大的整数 *&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;一种引用数据类型&lt;/strong&gt;：（本质上是由一组无序的键值对组成）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;引用数据类型&lt;/strong&gt;: &lt;strong&gt;Object&lt;/strong&gt;。包含 Object、Array、 function、Date、RegExp。 JavaScript 不支持创建任何自定义类型的数据，也就是说 JavaScript 中所有值的类型都是上面 8 中之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;null-和-undefined-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#null-和-undefined-的区别&#34;&gt;#&lt;/a&gt; null 和 undefined 的区别？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;相同：&lt;/p&gt;
&lt;p&gt;在 if 语句中 null 和 undefined 都会转为 false 两者用相等运算符比较也是相等&lt;/p&gt;
&lt;p&gt;首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。&lt;/p&gt;
&lt;p&gt;不同：&lt;/p&gt;
&lt;p&gt;undefined 代表的含义是未定义，&lt;/p&gt;
&lt;p&gt;定义了形参，没有传实参，显示 undefined&lt;/p&gt;
&lt;p&gt;一般变量声明了但还没有定义的时候会返回 undefined&lt;/p&gt;
&lt;p&gt;对象属性名不存在时，显示 undefined&lt;/p&gt;
&lt;p&gt;函数没有写返回值，即没有写 return，拿到的是 undefined&lt;/p&gt;
&lt;p&gt;null 代表的含义是空对象。也作为对象原型链的终点&lt;/p&gt;
&lt;p&gt;null 主要用于赋值给一些可能会返回对象的变量，作为初始化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;es10新增bigint-表示任意大的整数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es10新增bigint-表示任意大的整数&#34;&gt;#&lt;/a&gt; ES10 新增：BigInt 表示任意大的整数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;BigInt 数据类型的目的是比 Number 数据类型支持的范围更大的整数值。在对大整数执行数学运算时，以任意精度表示整数的能力尤为重要。使用 BigInt，整数溢出将不再是问题。&lt;/p&gt;
&lt;p&gt;此外，可以安全地使用更加准确时间戳，大整数 ID 等，而无需使用变通方法。 BigInt 目前是第 3 阶段提案， 一旦添加到规范中，它就是 JS 第二个数字数据类型，也将是 JS 第 8 种基本数据类型：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;要创建BigInt，只需在整数的末尾追加n即可。比较&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9007199254740995n&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// → 9007199254740995n&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9007199254740995&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// → 9007199254740996&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;或者，可以调用BigInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;构造函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;BigInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;9007199254740995&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// → 9007199254740995n&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 注意最后一位的数字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;9007199254740992&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9007199254740993&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// → true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9999999999999999&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// → 10000000000000000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;数据类型存储以及堆栈内存是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型存储以及堆栈内存是什么&#34;&gt;#&lt;/a&gt; 数据类型存储以及堆栈内存是什么&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;基本数据类型：直接存储在栈内存中，占据空间小，大小固定，属于被频繁使用的数据。指的是保存在栈内存中的简单数据段；number string 布尔&lt;/p&gt;
&lt;p&gt;引用数据类型：同时存储在栈内存与堆内存中，占据空间大，大小不固定。&lt;/p&gt;
&lt;p&gt;引用数据：类型将指针存在栈中，将值存在堆中。 当我们把对象值赋值给另外一个变量时，复制的是对象的指针，指向同一块内存地址，意思是，变量中保存的实际上只是一个指针，这个指针指向内存堆中实际的值，数组 对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;堆heap和栈stack有什么区别存储机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#堆heap和栈stack有什么区别存储机制&#34;&gt;#&lt;/a&gt; 堆 (&lt;strong&gt;heap&lt;/strong&gt;) 和栈 (&lt;strong&gt;stack&lt;/strong&gt;) 有什么区别存储机制&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;栈： 是一种连续储存的数据结构，具有先进后出后进先出的性质。&lt;/p&gt;
&lt;p&gt;通常的操作有入栈（压栈），出栈和栈顶元素。想要读取栈中的某个元素，就是将其之间的所有元素出栈才能完成。&lt;/p&gt;
&lt;p&gt;堆：  是一种非连续的树形储存数据结构，具有队列优先，先进先出； 每个节点有一个值，整棵树是经过排序的。特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。常用来实现优先队列，存取随意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2js数据类型判断条件分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2js数据类型判断条件分支&#34;&gt;#&lt;/a&gt; 2.js 数据类型判断，条件分支&lt;/h3&gt;
&lt;h4 id=&#34;if语句和逻辑运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if语句和逻辑运算&#34;&gt;#&lt;/a&gt; &lt;strong&gt;if 语句和逻辑运算&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;所有基本类型中&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1Cb29sZWFuJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==&#34;&gt; Boolean&lt;/span&gt; 值是 false 的只有 6 个，分别是 : 0 NaN &#39; &#39; null undefined false 引用类型 Boolean 值全是 true.&lt;/p&gt;
&lt;p&gt;if 条件是单个值时，如果是 truly 值，条件成立， 如果是 falsely 值，条件不成立&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;逻辑运算符以及他们的运算规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算符以及他们的运算规则&#34;&gt;#&lt;/a&gt; 逻辑运算符以及他们的运算规则？&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 逻辑与    两边都是&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;，才返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;，否则返回&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; 逻辑或    两边只要有一个是&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;，就返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;，否则返回&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ！ 逻辑非   用来取一个布尔值相反的值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;js中的数据类型检测方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js中的数据类型检测方案&#34;&gt;#&lt;/a&gt; JS 中的数据类型检测方案&lt;/h4&gt;
&lt;h5 id=&#34;1typeof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1typeof&#34;&gt;#&lt;/a&gt; 1.typeof&lt;/h5&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;               &lt;span class=&#34;token comment&#34;&gt;// number&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; Symbol&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;// function&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// function&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// function&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// object &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// object&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// object&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;优点：能够快速区分基本数据类型&lt;/p&gt;
&lt;p&gt;缺点：不能将 Object、Array 和 Null 区分，都返回 object&lt;/p&gt;
&lt;h5 id=&#34;2instanceof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2instanceof&#34;&gt;#&lt;/a&gt; 2.instanceof&lt;/h5&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                    &lt;span class=&#34;token comment&#34;&gt;// false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;// false &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;str&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;// false  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                    &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;优点：能够区分 Array、Object 和 Function，适合用于判断自定义的类实例对象&lt;/p&gt;
&lt;p&gt;缺点：Number，Boolean，String 基本数据类型不能判断&lt;/p&gt;
&lt;h5 id=&#34;3objectprototypetostringcall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3objectprototypetostringcall&#34;&gt;#&lt;/a&gt; 3.Object.prototype.toString.call()&lt;/h5&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; toString &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;//[object Number]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//[object Boolean]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;mc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//[object String]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;//[object Array]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;//[object Object]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//[object Function]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//[object Undefined]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//[object Null]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;优点：精准判断数据类型&lt;/p&gt;
&lt;p&gt;缺点：写法繁琐不容易记，推荐进行封装后使用&lt;/p&gt;
&lt;h5 id=&#34;instanceof-的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#instanceof-的作用&#34;&gt;#&lt;/a&gt; instanceof 的作用&lt;/h5&gt;
&lt;p&gt;用于判断一个引用类型是否属于某构造函数；&lt;/p&gt;
&lt;p&gt;还可以在继承关系中用来判断一个实例是否属于它的父类型。&lt;/p&gt;
&lt;h5 id=&#34;instanceof-和-typeof-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#instanceof-和-typeof-的区别&#34;&gt;#&lt;/a&gt; instanceof 和 typeof 的区别：&lt;/h5&gt;
&lt;p&gt;typeof 在对值类型 number、string、boolean 、null 、 undefined、 以及引用类型的 function 的反应是精准的；但是，对于对象 {} 、数组 [] 、null 都会返回 object&lt;/p&gt;
&lt;p&gt;为了弥补这一点，instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型。&lt;/p&gt;
&lt;h4 id=&#34;js数据类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js数据类型转换&#34;&gt;#&lt;/a&gt; js 数据类型转换&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在 JavaScript 中类型转换有三种情况：&lt;/p&gt;
&lt;p&gt;转换为数字（调用 Number (),parseInt (),parseFloat () 方法）&lt;/p&gt;
&lt;p&gt;转换为字符串（调用.toString () 或 String () 方法）&lt;/p&gt;
&lt;p&gt;转换为布尔值（调用 Boolean () 方法） 还有隐式转换 注意：null、undefined 没有.toString 方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;转换为数字&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：可以把任意值转换成数字，如果要转换的字符串中有不是数字的值，则会返回&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// NaN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//NaN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;radix&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：解析一个字符串并返回指定基数的十进制整数，radix是&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;36&lt;/span&gt;之间的整数，表示被解析字符串的基数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 2，第二个参数表示这个字符串是 10 进制的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// NaN	第二个参数表示这个字符串是 2 进制的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a123&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// NaN  如果第一个字符不是数字或者符号就返回 NaN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 123&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：解析一个参数并返回一个浮点数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//123&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123a.01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//123&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123.01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//123.01&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123.01.1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//123.01&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;隐式转换&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;123&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//122&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// &#39;1231&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;str&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 124&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;转换为字符串&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  ⚠️注意：&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;不能调用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;123&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;true&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 都能转&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;123&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;true&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;null&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;undefined&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//&#39;[object Object]&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;隐式转换：当&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;两边有一个是字符串，另一个是其它类型时，会先把其它类型转换为字符串再进行字符串拼接，返回字符串&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// &#39;1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;转换为布尔值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;空字符串&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;会转成&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;，其它都是&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;条件语句&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//...   // 这里 a 为 undefined，会转为 false，所以该条件语句内部不会执行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;隐式转换 &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;111&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;和&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;的valueOf和toString的返回结果？&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;valueOf：返回指定对象的原始值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;对象                  返回值 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Array               返回数组对象本身。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Boolean             布尔值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Date                存储的时间是从 &lt;span class=&#34;token number&#34;&gt;1970&lt;/span&gt; 年 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 月 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 日午夜开始计的毫秒数 &lt;span class=&#34;token constant&#34;&gt;UTC&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Function            函数本身。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Number              数字值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object              对象本身。这是默认情况。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;String              字符串值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    Math 和 Error 对象没有 valueOf 方法。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;toString：返回一个表示对象的字符串。默认情况下，toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 返回 &lt;span class=&#34;token string&#34;&gt;&#34;[object type]&#34;&lt;/span&gt;，其中 type 是对象的类型。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;​&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//&amp;#123;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//&#39;[object Object]&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;//[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;数据类型相比较objected-is-和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型相比较objected-is-和&#34;&gt;#&lt;/a&gt; 数据类型相比较 objected .is &lt;mark&gt;和&lt;/mark&gt; =&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;=== 属于严格判断，直接判断两者类型是否相同，如果两边的类型不一致时，不会做强制类型准换，不同则返回 false 如果相同再比较大小，不会进行任何隐式转换对于引用类型来说，比较的都是引用内存地址，所以 === 这种方式的比较，除非两者存储的内存地址相同才相等，反之 false&lt;/p&gt;
&lt;p&gt;== 二等表示值相等。判断操作符两边对象或值是否相等类型可以不同，如果两边的类型不一致，则会进行强制类型转化后再进行比较，使用 Number () 转换成 Number 类型在进行判断。例外规则，null==undefined，null/undefined 进行运算时不进行隐式类型转换。通常把值转为 Boolean 值，进行条件判断。Boolean (null)=&lt;mark&gt;Boolean(undefined)&amp;gt;false&lt;/mark&gt;=false 结果为 true&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL09iamVjdC5pcw==&#34;&gt;Object.is&lt;/span&gt; () 在 === 基础上特别处理了 NaN,-0,+0, 保证 - 0 与 + 0 不相等，但 NaN 与 NaN 相等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;操作符的强制类型转换规则&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; 和 &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt; 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;如果一个操作值为 &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt; ，则相等比较返回 &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;（ &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt; 本身也不等于 &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt; ）。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;，否则，返回 &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;typeof-null-的结果是什么为什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#typeof-null-的结果是什么为什么&#34;&gt;#&lt;/a&gt; typeof null 的结果是什么，为什么？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;typeof null 的结果是 Object。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签 (1-3 bits)&lt;/strong&gt; 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;000&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; object   &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; 当前存储的数据指向一个对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; int      &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; 当前存储的数据是一个 &lt;span class=&#34;token number&#34;&gt;31&lt;/span&gt; 位的有符号整数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;010&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; double   &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; 当前存储的数据指向一个双精度的浮点数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; string   &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; 当前存储的数据指向一个字符串。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;110&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; boolean  &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; 当前存储的数据是布尔值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;有两种特殊数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undefined 的值是 (-2) 30 (一个超出整数范围的数字)；&lt;/li&gt;
&lt;li&gt;null 的值是机器码 NULL 指针 (null 指针的值全是 0)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那也就是说 null 的类型标签也是 000，和 Object 的类型标签一样，所以会被判定为 Object。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3事件的故事&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3事件的故事&#34;&gt;#&lt;/a&gt; 3. 事件的故事&lt;/h3&gt;
&lt;h4 id=&#34;什么是事件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是事件&#34;&gt;#&lt;/a&gt; &lt;strong&gt;什么是事件？&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;事件是文档和浏览器窗口中发生的特定的交互瞬间，事件就发生了。&lt;/p&gt;
&lt;p&gt;一是直接在标签内直接添加执行语句，&lt;/p&gt;
&lt;p&gt;二是定义执行函数。&lt;/p&gt;
&lt;p&gt;addeventlistener 监听事件&lt;/p&gt;
&lt;p&gt;事件类型分两种：事件捕获、事件冒泡。&lt;/p&gt;
&lt;p&gt;事件捕获就是：网景公司提出的事件流叫事件捕获流，由外往内，从事件发生的顶点开始，逐级往下查找，一直到目标元素。&lt;/p&gt;
&lt;p&gt;事件冒泡：IE 提出的事件流叫做事件冒泡就是由内往外，从具体的目标节点元素触发，逐级向上传递，直到根节点。&lt;/p&gt;
&lt;p&gt;什么是事件流？&lt;/p&gt;
&lt;p&gt;事件流就是，页面接受事件的先后顺序就形成了事件流。&lt;/p&gt;
&lt;p&gt;自定义事件&lt;/p&gt;
&lt;p&gt;自定义事件，就是自己定义事件类型，自己定义事件处理函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;事件委托&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件委托&#34;&gt;#&lt;/a&gt; 事件委托&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;事件委托，又名事件代理。事件委托就是利用事件冒泡，就是把子元素的事件都绑定到父元素上。如果子元素阻止了事件冒泡，那么委托也就没法实现了&lt;/p&gt;
&lt;p&gt;阻止事件冒泡&lt;/p&gt;
&lt;p&gt;event.stopPropagation () 修饰符&lt;/p&gt;
&lt;p&gt;addEventListener (‘click&#39;, 函数名，true/false) 默认值为 false（即 使用事件冒泡）true 事件捕获&lt;/p&gt;
&lt;p&gt;好处：提高性能，减少了事件绑定，从而减少内存占用&lt;/p&gt;
&lt;p&gt;应用场景 在 vue 中事件委托：&lt;/p&gt;
&lt;p&gt;我们经常遇到 vue 中 v-for 一个列表，列表的每一项都绑定了 @click 处理事件。我们都知道绑定这么多监听，从性能方面来说是不太好的。那我们我们可以通过把每个 item 的 click 事件委托给父元素的形式来实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;javascript-的作用域和作用域链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javascript-的作用域和作用域链&#34;&gt;#&lt;/a&gt; Javascript 的作用域和作用域链&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;作用域：&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;* 作用域是定义变量的区域，它有一套访问变量的规则 *&lt;/em&gt;，这套规则来管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找。简单说：函数内部局部作用域，函数外面全局作用域。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;作用域就是一个变量可以使用的范围，主要分为全局作用域和函数作用域&lt;/p&gt;
&lt;p&gt;全局作用域就是 Js 中最外层的作用域，在哪里都可以访问&lt;/p&gt;
&lt;p&gt;函数作用域是 js 通过函数创建的一个独立作用域，只能在函数内部访问，函数可以嵌套，所以作用域也可以嵌套&lt;/p&gt;
&lt;p&gt;Es6 中新增了块级作用域（由大括号包裹，比如：if (){},for (){} 等）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;防抖节流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防抖节流&#34;&gt;#&lt;/a&gt; 防抖节流&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;防抖：&lt;strong&gt;所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;节流：&lt;strong&gt;所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。两种方式可以实现，分别是时间戳版和定时器版。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;鼠标事件-mouseenter与mouseover区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#鼠标事件-mouseenter与mouseover区别&#34;&gt;#&lt;/a&gt; 鼠标事件 mouseenter 与 mouseover 区别&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;mouseenter： 鼠标进入被绑定事件监听元素节点时触发一次，再次触发是鼠标移出被绑定元素，再次进入时。而当鼠标进入被绑定元素节点触发一次后没有移出，即使鼠标动了也不再触发。&lt;/p&gt;
&lt;p&gt;mouseover： 鼠标进入被绑定事件监听元素节点时触发一次，如果目标元素包含子元素，鼠标移入子元素或鼠标从子元素移出到目标元素上也会触发。&lt;/p&gt;
&lt;p&gt;mouseenter 不支持事件冒泡 mouseover 会冒泡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4引用数据类型-object&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4引用数据类型-object&#34;&gt;#&lt;/a&gt; 4. 引用数据类型 object&lt;/h3&gt;
&lt;h4 id=&#34;object的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#object的方法&#34;&gt;#&lt;/a&gt; object 的方法&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 是一种判断两个值是否相同的方法。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法：Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：value1：要比较的第一个值。value2：要比较的第二个值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;返回值：一个布尔表达式，指示两个参数是否具有相同的值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法用于将所有可枚举的自身属性从一个或多个源对象复制到目标对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法：Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;sources&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：target：目标对象——应用源属性的对象，修改后返回。sources：源对象——包含你要应用的属性的对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;返回值：修改后的目标对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;ES8&lt;/span&gt;的Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;entries是把对象转成键值对数组， &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 对的数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法：Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：obj：要返回其自己的可枚举字符串键属性 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 对的对象。返回值：给定对象自己的可枚举字符串键属性 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 对的数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fromEntries则相反，是把键值对数组转为对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法返回给定对象自己的可枚举属性值的数组，其顺序与 &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; 循环提供的顺序相同。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法：Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：obj：要返回其可枚举自身属性值的对象。返回值：包含给定对象自己的可枚举属性值的数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法返回一个布尔值，指示对象是否具有指定的属性作为它自己的属性。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;如果指定的属性是对象的直接属性，则该方法返回 &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; — 即使值为 &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; 或未定义。如果该属性是继承的或根本没有声明，则返回 &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;语法：hasOwnProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;prop&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：prop：要测试的属性的字符串名称或符号。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;返回值：如果对象将指定的属性作为自己的属性，则返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;；否则为&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法用于返回给定对象自己的可枚举属性名称的数组，以与普通循环相同的顺序迭代。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法：Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：obj：要返回可枚举自身属性的对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;返回值：表示给定对象的所有可枚举属性的字符串数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法返回一个表示对象的字符串。当对象将被表示为文本值或以期望字符串的方式引用对象时，将自动调用此方法 &lt;span class=&#34;token function&#34;&gt;id。默认情况下，toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法由从 Object 继承的每个对象继承。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;语法：toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;返回值：表示对象的字符串。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;freeze&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;freeze&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 方法冻结一个对象，这意味着它不能再被更改。冻结对象可防止向其添加新属性，防止删除现有属性，防止更改现有属性的可枚举性、可配置性或可写性，并防止更改现有属性的值。它还可以防止其原型被更改。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法：Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;freeze&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：obj：要冻结的对象。返回值：传递给函数的对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 （请打开浏览器控制台以查看运行结果。）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法：&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; me &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;proto：新创建对象的原型对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;propertiesObject&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;可选。需要传入一个对象，该对象的属性类型参照Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineProperties&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;的第二个参数。如果该参数被指定且不为 &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;，该传入对象的自有可枚举属性&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;即其自身定义的属性，而不是其原型链上的枚举属性&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;将为新创建的对象添加指定的属性值和对应的属性描述符。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;返回值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;一个新对象，带着指定的原型对象和属性。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;对象和面向对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象和面向对象&#34;&gt;#&lt;/a&gt; 对象和面向对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;对象：属性和方法的集合叫做对象（万物皆对象）。&lt;/p&gt;
&lt;p&gt;面向对象：首先就是找对象，如果该对象不具备所需要的方法或属性，那就给它添加。 面向对象是一种编程思维的改变。通过原型的方式来实现面向对象编程。&lt;/p&gt;
&lt;p&gt;创建对象的方式 (4 种)：new Object、字面量、构造函数、原型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;什么是深拷贝浅拷贝浅拷贝-赋值的区别如何实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是深拷贝浅拷贝浅拷贝-赋值的区别如何实现&#34;&gt;#&lt;/a&gt; 什么是深拷贝，浅拷贝，浅拷贝 赋值的区别，如何实现&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;深拷贝和浅拷贝是针对复杂数据类型来说的，浅拷贝只拷贝一层，而深拷贝是层层拷贝。&lt;/p&gt;
&lt;p&gt;1. 浅拷贝：&lt;/p&gt;
&lt;p&gt;将原对象或原数组的引用直接赋给新对象，新数组，新对象只是对原对象的一个引用，而不复制对象本身，新旧对象还是共享同一块内存&lt;/p&gt;
&lt;p&gt;如果属性是一个基本数据类型，拷贝就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，&lt;/p&gt;
&lt;p&gt;2. 深拷贝：&lt;/p&gt;
&lt;p&gt;创建一个新的对象和数组，将原对象的各项属性的 “值”（数组的所有元素）拷贝过来，是 “值” 而不是 “引用”&lt;/p&gt;
&lt;p&gt;深拷贝就是把一个对象，从内存中完整的拷贝出来，从堆内存中开辟了新区域，用来存新对象，并且修改新对象不会影响原对象&lt;/p&gt;
&lt;p&gt;3、赋值：&lt;/p&gt;
&lt;p&gt;当我们把一个对象赋值给一个新的变量时，赋的是该对象在栈中的内存地址，而不是堆中的数据。也就是两个对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;浅拷贝的实现方式：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;、object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;assign&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;、lodash 里面的 _&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;clone &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;、&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;扩展运算符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;、 &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concat &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;、 &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;clice&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    深拷贝的实现方式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;、 &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;、递归操作&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;、cloneDeep&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;、Jquery&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;5数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5数组&#34;&gt;#&lt;/a&gt; 5. 数组&lt;/h3&gt;
&lt;h4 id=&#34;数组的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组的方法&#34;&gt;#&lt;/a&gt; 数组的方法&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、sort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：sort 排序 如果下面参数的正反 控制 升序和降序 ，返回的是从新排序的原数组&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、splice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：向数组的指定index处插入 返回的是被删除掉的元素的集合，会改变原有数组；截取类 没有参数，返回空数组，原数组不变；一个参数，从该参数表示的索引位开始截取，直至数组结束，返回截取的 数组，原数组改变；两个参数，第一个参数表示开始截取的索引位，第二个参数表示截取的长度，返回截取的 数组，原数组改变；三个或者更多参数，第三个及以后的参数表示要从截取位插入的值。会改变原数据&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、pop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：从尾部删除一个元素 返回被删除掉的元素，改变原有数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：向数组的末尾追加 返回值是添加数据后数组的新长度，改变原有数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、unshift&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：向数组的开头添加 返回值是添加数据后数组的新长度，改变原有数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、shift&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：从头部删除一个元素 返回被删除掉的元素，改变原有数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、reverse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;： 原数组倒序  它的返回值是倒序之后的原数组&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、concat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：数组合并。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、slice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：数组元素的截取，返回一个新数组，新数组是截取的元素，可以为负值。从数组中截取，如果不传参，会返回原数组。如果只传入一个参数，会从头部开始删除，直到数组结束，原数组不会改变；传入两个参数，第一个是开始截取的索引，第二个是结束截取的索引，不包含结束截取的这一项，原数组不会改变。最多可以接受两个参数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、join&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：讲数组进行分割成为字符串  这能分割一层在套一层就分隔不了了&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：数组转字符串；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、toLocaleString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：将数组转换为本地数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：数组进行遍历；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：没有&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;时，对数组的遍历。有&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;时，返回一个新数组，该新数组的元素是经过过滤&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;逻辑处理&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;过的函数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：对数组中的每一运行给定的函数，会返回满足该函数的项组成的数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、every&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：当数组中每一个元素在callback上被返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;时就返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;。（注：every其实类似filter，只不过它的功能是判断是不是数组中的所有元素都符合条件，并且返回的是布尔值）。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、some&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：当数组中有一个元素在callback上被返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;时就返回&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;。（注：every其实类似filter，只不过它的功能是判断是不是数组中的所有元素都符合条件，并且返回的是布尔值）。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、reduce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：回调函数中有&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;个参数。prev（之前计算过的值），next（之前计算过的下一个的值），index，arr。把数组列表计算成一个&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;19.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 判断是否是数组&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;20.&lt;/span&gt; indexOf  找索如果找到了就会返回当前的一个下标，若果没找到就会反回&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;21.&lt;/span&gt; lastIndexOf 它是从最后一个值向前查找的 找索如果找到了就会返回当前的一个下标，若果没找到就会反回&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;22.&lt;/span&gt; Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 填充单个值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;23.&lt;/span&gt; Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 来源是类数组    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fill填充方法 可以传入&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;各参数 可以填充数组里的值也就是替换 如果一个值全部都替换掉 ，    第一个参数就是值 第二个参数 从起始第几个 第三个参数就是最后一个&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;find  查找这一组数 符合条件的第一个数 给他返回出来&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;findIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 查找这一组数 符合条件的第一数的下标 给他返回出来     没有返回 &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;keys 属性名  values属性值  entries属性和属性值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;forEach 循环便利 有&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;个参数 无法使用 &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt; ， 参数一就是每个元素 参数二就是每个下标 参数三就是每个一项包扩下标和元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;### 改变数组本身的api&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;pop()&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;  尾部弹出一个元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;push()&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt; 尾部插入一个元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;shift()&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;  头部弹出一个元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;unshift()&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;  头部插入一个元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;sort([func])&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt; 对数组进行排序&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;func有&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;各参数，其返回值小于&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;，那么参数&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;被排列到参数&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;之前，反之参数&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;排在参数&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;之前&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;reverse()&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt; 原位反转数组中的元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;splice(pos,deleteCount,...item)&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;  返回修改后的数组，从pos开始删除deleteCount个元素，并在当前位置插入items&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;copyWithin(pos[, start[, end]])&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;复制从start到end&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;不包括end&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;的元素，到pos开始的索引，返回改变后的数组，浅拷贝&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;9.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;arr.fill(value[, start[, end]])&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt; 从start到end默认到数组最后一个位置，不包括end，填充val，返回填充后的数组&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;其他数组api不改变原数组&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;map 映射关系的数组  map 主要就是有返回值可以&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; 数组   判断的会返回boolean &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法返回一个新数组，新数组中的元素为原始数组中的每个元素调用函数处理后得到的值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法按照原始数组元素顺序依次处理元素。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;注意：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;不会对空数组进行检测。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;不会改变原始数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 函数的作用是对数组中的每一个元素进行处理，返回新的元素。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;filter 满足条件的都能返回 是一个数组&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;some返回boolean 循环数组 只要有一个成员通过了就会返回 &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; 反而 &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;every返回boolean 循环数组 只有全部成员通过了就会返回 &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; 反而 &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 累加器 把上一次计算的值，给下一次计算进行相加&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt; 可以删除数组中的一向&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; 用于确定传递的值是否是一个 &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;https&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;developer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mozilla&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;org&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;zh&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;CN&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;docs&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Web&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;JavaScript&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Reference&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Global_Objects&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flat  扁平化 将嵌套的数组 “拉平”，变成一维数组。该方法返回一个新数组，对原数据没有影响。&lt;span class=&#34;token comment&#34;&gt;// 参数写的就是代表要扁平到第几层&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//1、every()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; main &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;every&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 输出:true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//2、some()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; main &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;some&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// 输出:true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//3、reducer()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;prev&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;next&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; prev &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; next&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 输出：100&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 4、filter  返回满足要求的数组项组成的新数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; result3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;item&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; item &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//[6,7,12,20,64,35]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 5、map  返回每次函数调用的结果组成的数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; result4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr4&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;item&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;span&gt;&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;item&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result4&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/*[ &#39;&amp;lt;span&gt;1&amp;lt;/span&gt;&#39;,&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &#39;&amp;lt;span&gt;2&amp;lt;/span&gt;&#39;, ]*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token constant&#34;&gt;ES6&lt;/span&gt;数组的常用方法：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;、Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：将对象或字符串转成数组，注意得有length。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;、Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;： 将一组值转换为数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、copyWithin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;target，start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;可选&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;，end&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;可选&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：数组内数据的复制替换&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	target：从该位置开始替换数据；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	start：从该位置开始读取数据，默认为&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	end：到该位置停止数据的读取，默认为数组的长度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：用于找出第一个符合条件的数组成员。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、findIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value，start，end&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：使用给定值，填充一个数组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	value：填充的值；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	start：开始填充的位置；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	end：填充结束的位置。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：对键名的遍历。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：对键值的遍历。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、entries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：对键值对的遍历。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、includes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：数组原型的方法&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;查找一个数值是否在数组中，只能判断一些简单类型的数据，对于复杂类型的数据无法判断。该方法接受两个参数，分别是查询的数据和初始的查询索引值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、flat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：用于数组扁平，数组去除未定义。可以去除空项。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、flatMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：对原数组的每个成员执行一个函数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：是一组键值对的结构，具有极快的查找速度。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//1、Array.from()  --   Array.of()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt;  arrayLink &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token string-property property&#34;&gt;&#34;0&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token string-property property&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token string-property property&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token literal-property property&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arrayLink&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 输出: [a,b,c]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;abcdefg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 输出:[&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;, &#34;g&#34;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 输出: [1, 2, 3, 4, 5]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;134&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;135&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//2、copyWithin()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;136&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;137&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; main &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;copyWithin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;138&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 输出:[4,5,3,4,5]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;139&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;140&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//3、find()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;141&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;142&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; main &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;  n &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;143&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 输出:-5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;144&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;145&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//4、fill()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;146&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;147&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出:[&#34;a&#34;,7,&#34;c&#34;,&#34;d&#34;]  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;148&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;149&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//5、keys()  values()  entries()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;150&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;151&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; index &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;152&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;153&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;154&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; elem &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;155&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;elem&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;156&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;157&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;elem&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;158&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;elem&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;159&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;160&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;161&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//6、includes()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;162&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;223&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;67&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;163&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 输出:true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;164&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;165&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// -1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;166&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;167&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//7、Map&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;168&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; m &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Michael&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Tracy&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;169&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Michael&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 95&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;170&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 初始化 Map 需要一个二维数组，或者直接初始化一个空 Map。Map 具有以下方法：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;171&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; m &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 空 Map&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;172&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;67&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 添加新的 key-value&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;173&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;174&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;has&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 是否存在 key &#39;Adam&#39;: true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;175&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 67&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;176&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 删除 key &#39;Adam&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;177&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;178&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 由于一个 key 只能对应一个 value，所以，多次对一个 key 放入 value，后面的值会把前面的值冲掉：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;179&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; m &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;180&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;67&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;181&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;182&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	m&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 88&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;183&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;184&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//8、Set&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;185&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 要创建一个 Set，需要提供一个 Array 作为输入，或者直接创建一个空 Set：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;186&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 空 Set&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;187&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 含 1, 2, 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;188&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 重复元素在 Set 中自动被过滤：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;189&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;190&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// Set &amp;#123;1, 2, 3, &#34;3&#34;&amp;#125;  注意：数字 3 和字符串 &#39;3&#39; 是不同的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;191&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 通过 add (key) 方法可以添加元素到 Set 中，可以重复添加，但不会有效果：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;192&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;193&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// Set &amp;#123;1, 2, 3, 4&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;194&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;195&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 仍然是 Set &amp;#123;1, 2, 3, 4&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;196&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 通过 delete (key) 方法可以删除元素：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;197&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;198&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// Set &amp;#123;1, 2, 3&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;199&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;200&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// Set &amp;#123;1, 2&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;6字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6字符串&#34;&gt;#&lt;/a&gt; 6. 字符串&lt;/h3&gt;
&lt;h4 id=&#34;字符串的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串的方法&#34;&gt;#&lt;/a&gt; 字符串的方法&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、chartAt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：返回在指定位置的字符；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、concat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：返回新的字符串&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;，将一个或多个字符串与原字符串连接合并&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、indexOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：检索字符串，返回第一次出现的索引，没有出现则为&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、lastIndexOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;searchValue&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; fromIndex&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 返回从字符串尾部开始第一次出现的索引，没有则&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;，fromIndex的值相对于从尾部开始的索引&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：返回一个以指定分隔符出现位置分隔而成的一个数组，数组元素不包含分隔符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：从起始索引号提取字符串中指定数目的字符；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、substring&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：提取字符串中两个指定的索引号之间的字符；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、toLowerCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：字符串转小写；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、toUpperCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：字符串转大写；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：返回某个字符串对象的原始值； &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：删除字符串两边的空格；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;、trimeState 取出开始的空格&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;、trimeEnd  去除末尾空格&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、includes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;searchString&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; position&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;返回boolean，判断一个字符串是否包含在另一个字符串中，从postition索引开始搜寻，默认&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、slice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：提取字符串片段，并在新的字符串中返回被提取的部分；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、search&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;regexp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;返回首次匹配到的索引，没有则&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;，执行正则表达式和 String 对象之间的一个搜索匹配&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;返回一个表示调用对象的字符串，该方法返回指定对象的字符串形式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;返回去掉两端空白后的新字符串 还有trimend trimstart&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;、replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 把指定的字符串替换成为别的字符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;超长字符串存储到栈内存中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#超长字符串存储到栈内存中&#34;&gt;#&lt;/a&gt; &lt;strong&gt;超长字符串存储到栈内存中&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串属于基础类型，所以会觉得字符串是存在栈内存中的，但是要知道，V8 默认栈内存是 984Kib，那如果一个超长字符串 &amp;gt; 984Kib 能装的进栈内存吗？&lt;/p&gt;
&lt;p&gt;字符串的内容存于堆内存中，指针存于栈内存中，且相同的字符串指向同一个堆内存地址&lt;/p&gt;
&lt;p&gt;新增或者修改字符串后，如果是一个之前不存在的字符串，则新开辟内存空间，如果是已有的，则直接使用已有的内存空间&lt;/p&gt;
&lt;p&gt;当我们新建一个字符串时，V8 会从内存中查找一下是否已经有存在的一样的字符串，找到的话直接复用。如果找不到的话，则开辟一块新的内存空间来存这个字符串，并把地址赋给变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;7javascript函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7javascript函数&#34;&gt;#&lt;/a&gt; 7.javascript 函数&lt;/h3&gt;
&lt;h4 id=&#34;声明函数的几种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#声明函数的几种方式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;声明函数的几种方式&lt;/strong&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;函数声明&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;函数名&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;参数&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;，参数&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;，&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 要执行的语句 &amp;#125; &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;函数表达式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 函数表达式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;func3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 命名式函数表达式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; func5&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;n1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 立即执行的函数表达式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 作为返回值的函数表达式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Function构造器&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; 变量名 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;参数1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;参数2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;参数n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;函数体&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;立即执行函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; func5&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;n1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 立即执行的函数表达式 ()()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;函数声明与函数表达式的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数声明与函数表达式的区别&#34;&gt;#&lt;/a&gt; &lt;strong&gt;函数声明与函数表达式的区别&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数声明会将那个函数提升到最前面（即使你写代码的时候在代码块最后才写这个函数），成为全局函数。&lt;/p&gt;
&lt;p&gt;函数声明要指定函数名，而函数表达式不用，可以用作匿名函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;函数调用的几种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数调用的几种方式&#34;&gt;#&lt;/a&gt; &lt;strong&gt;函数调用的几种方式&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 直接调用 函数名加上括号 （）&lt;/p&gt;
&lt;p&gt;2. 函数表达式 变量名（）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;函数的长度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数的长度&#34;&gt;#&lt;/a&gt; &lt;strong&gt;函数的长度&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数的 &lt;code&gt;length&lt;/code&gt;  属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后， &lt;code&gt;length&lt;/code&gt;  属性将失真。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; c&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; d&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fun1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fun2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fun3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fun4&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fun5&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fun6&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;立即执行函数iife和使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#立即执行函数iife和使用场景&#34;&gt;#&lt;/a&gt; 立即执行函数（iife）和使用场景&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;立即执行函数：(function (){ })( ) 返回值可以为基本数据类型，也能返会任何类型的值。&lt;/p&gt;
&lt;p&gt;写法原因：因为在 javascript 里，括号内部不能包含语句，当解析器对代码进行解释的时候，先碰到了 ()， 然后碰到 function 关键字就会自动将 () 里面的代码识别为函数表达式而不是函数声明。&lt;/p&gt;
&lt;p&gt;作用：立即执行函数会形成一个单独的作用域，我们可以封装一些临时变量或者局部变量，避免污染全局变量。&lt;/p&gt;
&lt;p&gt;使用场景： ①代码在页面加载完成之后，不得不执行一些设置工作，比如时间处理器，创建对象等等。 ②所有的这些工作只需要执行一次，比如只需要显示一个时间。&lt;/p&gt;
&lt;p&gt;③需要一些临时的变量，但是初始化过程结束之后，就再也不会被用到，我们可以用立即执行函数 —— 去将我们所有的代码包裹在它的局部作用域中， 不会让任何变量泄露成全局变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;arguments-的对象是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arguments-的对象是什么&#34;&gt;#&lt;/a&gt; arguments 的对象是什么？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;arguments 当我们不知道有多少个参数传进来的时候就用 arguments 来接收，是一个类似于数组的对象，他有 length 属性，可以 arguments [i] 来访问对象中的元素， 但是它不能用数组的一些方法。 例如 push、pop、slice 等。arguments 虽然不是一个数组，但是它可以转成一个真正的数组。&lt;/p&gt;
&lt;p&gt;取之可以用 展开运算符来 数组和类数组类数组： ①拥有 length 属性，其它属性 (索引) 为非负整数；箭头函数里没有 arguments ②不具有数组所具有的方法； ③类数组是一个普通对象，而真实的数组是 Array 类型。&lt;/p&gt;
&lt;p&gt;常见的类数组：arguments，document.querySelectorAll 得到的列表，jQuery 对象 ($(&amp;quot;div&amp;quot;))；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;this指向的问题高频&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this指向的问题高频&#34;&gt;#&lt;/a&gt; this 指向的问题（高频）&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在全局的环境下 this 是指向 window 的&lt;/p&gt;
&lt;p&gt;普通函数调用直接调用中的 this 会指向 window， 严格模式下 this 会指向 undefined，自执行函数 this 指向 window，定时器中的 this 指向 window&lt;/p&gt;
&lt;p&gt;在对象里调用的 this，指向调用函数的那个对象，&lt;/p&gt;
&lt;p&gt;在构造函数以及类中的 this，构造函数配合 new 使用，而 new 关键字会将构造函数中的 this 指向实例化对象，所以构造函数中的 this 指向 当前实例化的对象&lt;/p&gt;
&lt;p&gt;方法中的 this 谁调用就指向谁。&lt;/p&gt;
&lt;p&gt;箭头函数没有自己的 this，箭头函数的 this 在定义的时候，会继承自外层第一个普通函数的 this&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;闭包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#闭包&#34;&gt;#&lt;/a&gt; 闭包&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;1、闭包的概念就是：只有权利访问另一个函数作用域中的变量，一般就是函数包裹着函数。&lt;/p&gt;
&lt;p&gt;3、闭包可以重用一个变量，且保证这个变量不会被污染的一种机制。这些变量的值始终保持在内存中，不会被垃圾回收机制处理&lt;/p&gt;
&lt;p&gt;4、闭包的缺点：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。&lt;/p&gt;
&lt;p&gt;5、为什么要用闭包：使用场景：防抖、节流、函数套函数避免全局污染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;闭包原理
函数执行分成两个阶段(预编译阶段和执行阶段)。
​
    1.在预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个“闭包”对象并保存对应变量值，
      如果已存在“闭包”，则只需要增加对应属性值即可。
    2.执行完后，函数执行上下文会被销毁，函数对“闭包”对象的引用也会被销毁，但其内部函数还持用该“闭包”的引用，
      所以内部函数可以继续使用“外部函数”中的变量
​
利用了函数作用域链的特性，一个函数内部定义的函数会将包含外部函数的活动对象添加到它的作用域链中，函数执行完毕，其执行作用域链销毁，
但因内部函数的作用域链仍然在引用这个活动对象，所以其活动对象不会被销毁，直到内部函数被烧毁后才被销毁。
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;call-apply-bind封装与区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#call-apply-bind封装与区别&#34;&gt;#&lt;/a&gt; call、apply、bind 封装与区别&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;都是来改变 this 指向和函数的调⽤，实际上 call 与 apply 的功能是相同的，只是两者的传参方式不一样，&lt;/p&gt;
&lt;p&gt;call ⽅法跟的是⼀个参数列表，&lt;/p&gt;
&lt;p&gt;apply 跟⼀个 数组作为参数，call ⽅法和 apply 使⽤后就直接调⽤&lt;/p&gt;
&lt;p&gt;bind 传参后不会立即执行，而是返回一个改变了 this 指向的函数，这个函数可以继续传参，且执行，需要类似于 bind ()() 两个括号才能调⽤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;call 的性能要比 apply 好一点（尤其是当函数传递参数超过 3 个的时候）后期开发 call 多多一点&lt;/li&gt;
&lt;li&gt;call 用扩展运算符就可以吧 apply 来代替了&lt;/li&gt;
&lt;li&gt;**bind 返回的函数可以作为构造函数吗？** 答案：不能&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;函数柯里化卡瑞化-加里化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数柯里化卡瑞化-加里化&#34;&gt;#&lt;/a&gt; 函数柯里化（卡瑞化、加里化）？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;概念：把接受多个参数的函数变换成接受一个单一参数 (最初函数的第一个参数) 的函数，并且返回接受余下的参数而且返回结果的新函数的技术。 容易理解的概念：Currying 概念其实很简单，只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数（主要是利用闭包实现的）。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;①接收单一参数，将更多的参数通过回调函数来搞定；&lt;/p&gt;
&lt;p&gt;②返回一个新函数，用于处理所有的想要传入的参数；&lt;/p&gt;
&lt;p&gt;③需要利用 call/apply 与 arguments 对象收集参数；&lt;/p&gt;
&lt;p&gt;④返回的这个函数正是用来处理收集起来的参数。&lt;/p&gt;
&lt;p&gt;作用：能进行部分传值，而传统函数调用则需要预先确定所有实参。如果你在代码某一处只获取了部分实参，然后在另一处确定另一部分实参，这个时候柯里化和偏应用就能派上用场。&lt;/p&gt;
&lt;p&gt;用途：我认为函数柯里化是对闭包的一种应用形式，延迟计算、参数复用、动态生成函数 (都是闭包的用途)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;柯里化函数例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#柯里化函数例子&#34;&gt;#&lt;/a&gt; 柯里化函数例子&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;柯里化函数：把一个多参数的函数转化为单参数函数的方法。并且返回接受余下的参数而且返回结果的新函数的技术。&lt;/p&gt;
&lt;p&gt;我的理解就是将一个接受多个参数的函数，转化为接收一个参数，并且不改变输出结果的一种办法。我觉得这就是 js 的柯里化函数&lt;/p&gt;
&lt;p&gt;这样做有什么好处，我得理解是在需要的情况下生成一个中间工具，简化代码，并且清晰代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;// 简单的相加函数
var add = function (x,y) &amp;#123;
    return x + y
&amp;#125;
// 调用：
add(1,2)
​
// 柯里化以后
var add = function (x) &amp;#123; //柯里化函数(闭包)
    return function (y) &amp;#123;
        return x + y
    &amp;#125;
&amp;#125;
add(1)(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;什么是高阶函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是高阶函数&#34;&gt;#&lt;/a&gt; 什么是高阶函数？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;高阶函数只是，将函数作为参数 ， 函数的返回值是函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;higherOrderFunction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;param&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;param&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;8构造函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8构造函数&#34;&gt;#&lt;/a&gt; 8. 构造函数&lt;/h3&gt;
&lt;h4 id=&#34;new的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new的原理&#34;&gt;#&lt;/a&gt; new 的原理&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;实际上是在堆内存中开辟一个空间。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ①创建一个空对象，构造函数中的&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;指向这个空对象；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ②这个新对象被执行&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; 原型 &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;连接；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ③执行构造函数方法，属性和方法被添加到&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;引用的对象中；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ④如果构造函数中没有返回其它对象，那么返回&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;，即创建的这个的新对象，否则，返回构造函数中返回的对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;_new&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 创建的新对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;constructor&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;args&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 执行 [[原型]] 连接，target 是 constructor 的实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__proto__ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constructor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 执行构造函数，将属性或方法添加到创建的空对象上&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; constructor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;object&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;function&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           &lt;span class=&#34;token comment&#34;&gt;// 如果构造函数执行的结构返回的是一个对象，那么返回这个对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 如果构造函数返回的不是一个对象，返回创建的对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;自己理解的&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;：         &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt;实际上是在堆内存中开辟一个新的空间。首先创建一个空对象obj，然后呢，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;把这个空对象的原型&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__proto__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;和构造函数的原型对象&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;constructor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;连接&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;说白了就是等于&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    然后执行函数中的代码，就是为这个新对象添加属性和方法。最后进行判断其返回值，如果构造函数返回的是一个对象，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    那就返回这个对象，如果不是，那就返回我们创建的对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;封装一个通用的事件绑定函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装一个通用的事件绑定函数&#34;&gt;#&lt;/a&gt; 封装一个通用的事件绑定函数&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;需要点击每个a，来。弹出他们的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div3&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;a1&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;a2&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;a3&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;a href&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;a4&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;button id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;btn1&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;加载更多&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;button&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 封装通用的事件绑定函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bindEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;elem&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; type&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    elem&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 获取父元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; fu &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;div3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;bindEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fu&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//console.log (event.target) // 获取触发的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; target&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preventDefault&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 阻止默认行为&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 过滤符合条件的子元素，主要是过滤掉 加载更多 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nodeName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toLowerCase&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;9作用域js的机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9作用域js的机制&#34;&gt;#&lt;/a&gt; 9. 作用域，js 的机制&lt;/h3&gt;
&lt;h4 id=&#34;垃圾回收机制和内存机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#垃圾回收机制和内存机制&#34;&gt;#&lt;/a&gt; 垃圾回收机制和内存机制&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;垃圾回收&lt;/p&gt;
&lt;p&gt;浏览器的 js 具有自动垃圾回收机制，垃圾回收机制也就是自动内存管理机制，垃圾收集器会定期的找出那些不在继续使用的变量，然后释放内存。但是这个过程不是实时的，因为 GC 开销比较大并且时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。&lt;/p&gt;
&lt;p&gt;内存泄露&lt;/p&gt;
&lt;p&gt;如果 那些不再使用的变量，它们所占用的内存 不去清除的话就会造成内存泄漏&lt;/p&gt;
&lt;p&gt;内存泄露其实就是我们的程序中已经动态分配的堆内存，由于某些原因没有得到释放，造成系统内存的浪费导致程序运行速度减慢甚至系统崩溃等严重后果。&lt;/p&gt;
&lt;p&gt;比如说：&lt;/p&gt;
&lt;p&gt;1、闭包：在闭包中引入闭包外部的变量时，当闭包结束时此对象无法被垃圾回收（GC）。&lt;/p&gt;
&lt;p&gt;2、DOM：当原有的 DOM 被移除时，子结点引用没有被移除则无法回收&lt;/p&gt;
&lt;p&gt;3、Times 计时器泄露&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域&#34;&gt;#&lt;/a&gt; 作用域&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;1、作用域&lt;/p&gt;
&lt;p&gt;作用域就是一个变量可以使用的范围，主要分为全局作用域和函数作用域&lt;/p&gt;
&lt;p&gt;全局作用域就是 Js 中最外层的作用域&lt;/p&gt;
&lt;p&gt;函数作用域是 js 通过函数创建的一个独立作用域，函数可以嵌套，所以作用域也可以嵌套&lt;/p&gt;
&lt;p&gt;Es6 中新增了块级作用域（由大括号包裹，比如：if (){},for (){} 等）&lt;/p&gt;
&lt;p&gt;2、自由变量&lt;/p&gt;
&lt;p&gt;当前作用域外的变量都是自由变量，一个变量在当前作用域没有定义，但是被使用了，就会向上级作用域，一层一层依次查找，直至找到为止，如果全局作用域都没有找到这个变量就会报错。这个自由变量查找的过程就是作用域链。&lt;/p&gt;
&lt;p&gt;3、变量提升&lt;/p&gt;
&lt;p&gt;每个 var 声明的变量，function 声明的函数存在变量提升。let const 不存在变量提升&lt;/p&gt;
&lt;p&gt;在 js 中声明之前未定义，会在 js 的最上方会形成一个预解析池，用来存储声明了但没有先定义的变量名&lt;/p&gt;
&lt;p&gt;4、作用域链：&lt;/p&gt;
&lt;p&gt;作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和 函数 ， 简单来说：内部函数访问外部函数的变量这种链式查找的机制被称为作用域链&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;谈谈js的运行机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#谈谈js的运行机制&#34;&gt;#&lt;/a&gt; 谈谈 JS 的运行机制&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;js 单线程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JavaScript 语言的一大特点就是单线程，即同一时间只能做一件事情。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;js 事件循环&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;js 代码执行过程中会有很多任务，这些任务总的分成两类：&lt;/p&gt;
&lt;p&gt;同步任务&lt;/p&gt;
&lt;p&gt;异步任务&lt;/p&gt;
&lt;p&gt;需要注意的是除了同步任务和异步任务，任务还可以更加细分为 macrotask (宏任务) 和 microtask (微任务)，js 引擎会优先执行微任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。
​
宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲
染等。
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;首先 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。&lt;/p&gt;
&lt;p&gt;在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务&lt;/p&gt;
&lt;p&gt;当同步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。&lt;/p&gt;
&lt;p&gt;任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。&lt;/p&gt;
&lt;p&gt;当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nextTick&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;第一轮：主线程开始执行，遇到 setTimeout，将 setTimeout 的回调函数丢到宏任务队列中，在往下执行 new Promise 立即执行，输出 2，then 的回调函数丢到微任务队列中，再继续执行，遇到 process.nextTick，同样将回调函数扔到为任务队列，再继续执行，输出 5，当所有同步任务执行完成后看有没有可以执行的微任务，发现有 then 函数和 nextTick 两个微任务，先执行哪个呢？process.nextTick 指定的异步任务总是发生在所有异步任务之前，因此先执行 process.nextTick 输出 4 然后执行 then 函数输出 3，第一轮执行结束。&lt;/p&gt;
&lt;p&gt;第二轮：从宏任务队列开始，发现 setTimeout 回调，输出 1 执行完毕，因此结果是 25431&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;js延迟加载的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js延迟加载的方式&#34;&gt;#&lt;/a&gt; JS 延迟加载的方式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript 是单线程（js 不走完下面不会走是因为同步）会阻塞 DOM 的解析，因此也就会阻塞 DOM 的加载。所以有时候我们希望延迟 JS 的加载来提高页面的加载速度。&lt;/p&gt;
&lt;p&gt;1. 把 JS 放在页面的最底部&lt;/p&gt;
&lt;p&gt;2.script 标签的 defer 属性：脚本会立即下载但延迟到整个页面加载完毕再执行。该属性对于内联脚本无作用 (即没有 「src」 属性的脚本）。&lt;/p&gt;
&lt;p&gt;3. 是在外部 JS 加载完成后，浏览器空闲时，Load 事件触发前执行，标记为 async 的脚本并不保证按照指定他们的先后顺序执行， 该属性对于内联脚本无作用 (即没有 「src」 属性的脚本）。&lt;/p&gt;
&lt;p&gt;4. 动态创建 script 标签，监听 dom 加载完毕再引入 js 文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;script标签的defer属性与async属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#script标签的defer属性与async属性&#34;&gt;#&lt;/a&gt; script 标签的 defer 属性与 async 属性&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;两者都是异步加载 js 文件，不过 async 是加载完立刻执行，而 defer 是在 dom 解析完再执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;宏任务和微任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#宏任务和微任务&#34;&gt;#&lt;/a&gt; 宏任务和微任务&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;js 中的一个机制，就是遇到宏任务，先将宏任务放入 eventqueue，然后在执行微任务。&lt;/p&gt;
&lt;p&gt;宏任务：setTimeout,setInterval,Ajax,DOM 事件&lt;/p&gt;
&lt;p&gt;微任务：Promise async/await&lt;/p&gt;
&lt;p&gt;想明白这个机制 就要理解 js 单线程。因为 JS 是单线程语言，只能同时做一件事儿。js 任务需要排队顺序执行，如果一个任务时间过长，后边的任务也会等着。假如，我们在请求一个网址时，图片加载很慢，网页总不能一直卡不出来，&lt;/p&gt;
&lt;p&gt;这个时候就可以用异步来解决了，异步的特点不会阻塞代码的执行，解决了单线程等待的这个问题&lt;/p&gt;
&lt;p&gt;在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务&lt;/p&gt;
&lt;p&gt;异步和单线程是相辅相成的，js 是一门单线程语言，所以需要异步来辅助&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;js预解析变量提升它导致了什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js预解析变量提升它导致了什么问题&#34;&gt;#&lt;/a&gt; JS 预解析（变量提升），它导致了什么问题？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;JS 代码在执行前，浏览器会对 js 代码进行扫描，默认的把所有带 var 和 function 声明的变量进行提前的声明或者定义，遵循先解析后使用的原则。 变量提升的表现是，在变量或函数声明之前访问变量或调用函数而不会报错。&lt;/p&gt;
&lt;p&gt;原因 JavaScript 引擎在代码执行前有一个解析的过程（预编译），创建执行上下文，初始化一些代码执行时需要用到的对象。 当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性， 它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。&lt;/p&gt;
&lt;p&gt;首先要知道，JS 在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。&lt;/p&gt;
&lt;p&gt;1. 在解析阶段 JS 会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来， 变量先赋值为 undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似， 不过函数执行上下文会多出 this、arguments 和函数的参数。&lt;/p&gt;
&lt;p&gt;全局上下文：变量定义，函数声明 函数上下文：变量定义，函数声明，this，arguments&lt;/p&gt;
&lt;p&gt;2. 在执行阶段，就是按照代码的顺序依次执行。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;那为什么会进行变量提升呢？主要有以下两个原因：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;、提高性能&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;、容错性更好&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;（&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;）提高性能 在&lt;span class=&#34;token constant&#34;&gt;JS&lt;/span&gt;代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;并且因为代码压缩的原因，代码执行也更快了。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;（&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;）容错性更好 变量提升可以在一定程度上提高&lt;span class=&#34;token constant&#34;&gt;JS&lt;/span&gt;的容错性，看下面的代码：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;如果没有变量提升，这段代码就会报错导致的问题&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;hello nanjiu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;相当于覆盖了外层的tmp，所以打印结果为&lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; tmp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;hello nan jiu&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; tmp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tmp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来&lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;总结      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;声明提升还可以提高&lt;span class=&#34;token constant&#34;&gt;JS&lt;/span&gt;代码的容错性，使一些不规范的代码也可以正常执行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;函数是一等公民，当函数声明与变量声明冲突时，变量提升时函数优先级更高，会忽略同名的变量声明&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;服务端渲染&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务端渲染&#34;&gt;#&lt;/a&gt; 服务端渲染&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;解释：服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。使用服务端渲染的网站，可以说是 “所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。有了服务端渲染，当请求用户页面时，返回的 body 里已经有了首屏的 html 结构，之后结合 css 显示出来。&lt;/p&gt;
&lt;p&gt;优点：&lt;br /&gt;
①首屏渲染快 (关键性问题)：相比于加载单页应用，我只需要加载当前页面的内容，而不需要像 React 或者 Vue 一样加载全部的 js 文件；&lt;br /&gt;
②SEO (搜索引擎) 优化：不同爬虫工作原理类似，只会爬取源码，不会执行网站的任何脚本&lt;br /&gt;
③可以生成缓存片段、节能；&lt;/p&gt;
&lt;p&gt;缺点：用户体验较差，不容易维护、通常前端改了部分 html 或者 css，后端也需要改；&lt;/p&gt;
&lt;p&gt;使用场景：vue 全家桶或者 react 全家桶，都是推荐通过服务端渲染来实现路由的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;event-loop-event-queue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#event-loop-event-queue&#34;&gt;#&lt;/a&gt; Event Loop Event Queue&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在 js 中我们经常需要同时执行很多件任务，例如，定时器，事件。异步数据，而 js 是单线程的原因不能同时进行很多件事情，必须等上一件任务执行完了才会执行下一个，需要通过 Event Loop 来处理很多任务的执行&lt;/p&gt;
&lt;p&gt;因为 js 是单线程的，代码执行的时候，将不同的函数执行上下文压入到栈中进行有序的执行，&lt;br /&gt;
在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，就是将它挂起，继续执行栈中其他的任务&lt;br /&gt;
当同步任务执行完了，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。&lt;br /&gt;
任务队列分为的宏任务队列和微任务队列，当前的执行栈中执行完，js 引擎会首先判断微任务队列是否有任务可以执行有的话，放到栈中执行。&lt;br /&gt;
当微任务队列中的任务执行完了再去判断宏任务中的队列。&lt;/p&gt;
&lt;p&gt;为什么会有任务队列呢？&lt;br /&gt;
还是因为 javascript 单线程的原因，单线程，就意味着一个任务一个任务的执行，&lt;br /&gt;
执行完当前任务，执行下一个任务，这样也会遇到一个问题，就比如说，要向服务端通信，加载大量数据，如果是同步执行，&lt;br /&gt;
js 主线程就得等着这个通信完成，然后才能渲染数据，为了高效率的利用 cpu, 就有了同步任务和异步任务之分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;同步和异步的区别各举一个js中同步和异步的案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步和异步的区别各举一个js中同步和异步的案例&#34;&gt;#&lt;/a&gt; 同步和异步的区别？各举一个 Js 中同步和异步的案例？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;同步：上一件事情没有完成，继续处理上一件事情，只有上一件事情完成了，才会做下一件事情&lt;/p&gt;
&lt;p&gt;异步： 规划要做一件事情，如果是异步事情，不是当前立马去执行这件事情，需要等一定的时间，这样的话，我们不会等着他执行，而是继续执行下面的操作&lt;/p&gt;
&lt;p&gt;对于写程序，同步往往会阻塞，没有数据过来，我就等着，异步则不会阻塞，没数据来我干别的事，有数据来去处理这些数据。&lt;/p&gt;
&lt;p&gt;同步案例：for 循环语句，alert (),console.log () 等 js 大部分都是同步编程&lt;/p&gt;
&lt;p&gt;异步案例：所有定时器，ajax 异步请求，所有的事件绑定都是异步；&lt;/p&gt;
&lt;p&gt;举例子&lt;/p&gt;
&lt;p&gt;同步，就是实时处理（如打电话），比如服务器一接收客户端请求，马上响应，这样客户端可以在最短的时间内得到结果，但是如果多个客户端，或者一个客户端发出的请求很频繁，服务器无法同步处理，就会造成涌塞。&lt;/p&gt;
&lt;p&gt;同步如打电话，通信双方不能断（我们是同时进行，同步），你一句我一句，这样的好处是，对方想表达的信息我马上能收到，但是，我在打着电话，我无法做别的事情。&lt;/p&gt;
&lt;p&gt;异步，就是分时处理（如收发短信），服务器接收到客户端请求后并不是立即处理，而是等待服务器比较空闲的时候加以处理，可以避免涌塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;10bom浏览器对象模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10bom浏览器对象模型&#34;&gt;#&lt;/a&gt; 10.BOM 浏览器对象模型&lt;/h3&gt;
&lt;h4 id=&#34;js操作bom&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js操作bom&#34;&gt;#&lt;/a&gt; js 操作 BOM&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器对象模型（BOM ：Browser Object Model）是 JavaScript 的组成之一，它提供了独立于内容与浏览器窗口进行交互的对象，使用浏览器对象模型可以实现与 HTML 的交互。它的作用是将相关的元素组织包装起来，提供给程序设计人员使用，从而降低开发人员的劳动量，提高设计 Web 页面的能力。&lt;/p&gt;
&lt;p&gt;window : alert() , prompt() , confirm() , setInterval() , clearInterval() , setTimeout() , clearTimeout() ;&lt;/p&gt;
&lt;p&gt;history : go (参数) , back () , foward () ;&lt;/p&gt;
&lt;p&gt;location : herf 属性.&lt;/p&gt;
&lt;p&gt;1、window.location.href = &#39; 你所要跳转到的页面 &#39;; 2、window.open (&#39; 你所要跳转到的页面’); 3、window.history.back (-1): 返回上一页 4、window.history.go (-1/1): 返回上一页或下一页五、 5、history.go (&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2JhaWR1LmNvbQ==&#34;&gt;baidu.com&lt;/span&gt;&amp;quot;)；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;说出5个以上math对象中的成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说出5个以上math对象中的成员&#34;&gt;#&lt;/a&gt; 说出 5 个以上 Math 对象中的成员。&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;PI&lt;/span&gt; 圆周率&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 向下取整&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 向上取整&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 四舍五入版 就近取整&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 绝对值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 求最大和最小值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 获取范围在&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;内的随机值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;settimeout与setinterval区别与机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#settimeout与setinterval区别与机制&#34;&gt;#&lt;/a&gt; setTimeout 与 setInterval 区别与机制&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;setTimeout () 和 setInterval () 经常被用来处理延时和定时任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setTimeout&lt;/strong&gt; () 方法用于在指定的毫秒数后调用函数或计算表达式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setInterval&lt;/strong&gt; () 则可以在每隔指定的毫秒数循环调用函数或表达式，直到 clearInterval 把它清除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;机制：
 
因为js是单线程的。浏览器遇到setTimeout 和 setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的
待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;window的onload事件和domcontentloaded&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#window的onload事件和domcontentloaded&#34;&gt;#&lt;/a&gt; window 的 onload 事件和 domcontentloaded&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;window.onload：当一个资源及其依赖资源已完成加载时，将触发 onload 事件。 document.onDOMContentLoaded：当初始的 HTML 文档被完全加载和解析完成之后， DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。 区别： ①onload 事件是 DOM 事件，onDOMContentLoaded 是 HTML5 事件。 ②onload 事件会被样式表、图像和子框架阻塞，而 onDOMContentLoaded 不会。 ③当加载的脚本内容并不包含立即执行 DOM 操作时，使用 onDOMContentLoaded 事件是个更好的选择，会比 onload 事件执行时间更早。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;cookiessessionstorage-和-localstorage-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookiessessionstorage-和-localstorage-的区别&#34;&gt;#&lt;/a&gt; cookies，sessionStorage 和 localStorage 的区别？&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;cookie：一个大小不超过 4K 的小型文本数据，一般由服务器生成，可以设置失效时间；若没有设置时间，关闭浏览器 cookie 失效，若设置了 时间，cookie 就会存放在硬盘里，过期才失效，每次 http 请求，header 都携带 cookie&lt;/p&gt;
&lt;p&gt;localStorage：5M 或者更大，永久有效，窗口或者浏览器关闭也会一直保存，除非手动永久清除或者 js 代码清除，因此用作持久数据，不参与和服务器的通信&lt;/p&gt;
&lt;p&gt;sessionStorage 关闭页面或浏览器后被清除。存 放数据大小为一般为 5MB, 而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;location-navigator和history&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#location-navigator和history&#34;&gt;#&lt;/a&gt; location、navigator 和 history&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;location&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;location 对象存储了当前文档位置（URL）相关的信息，简单地说就是网页地址字符串。使用 window 对象的 location 属性可以访问。&lt;/p&gt;
&lt;p&gt;href 会重新定位到一个 URL，hash 会跳到当前页面中的 anchor 名字的标记 (如果有)，而且页面不会被重新加载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;history&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中） 访问过的 URL。&lt;/p&gt;
&lt;p&gt;history.back 可以后退一个网页&lt;/p&gt;
&lt;p&gt;history.go 可以前进后退 1 前进 -1 后退&lt;/p&gt;
&lt;p&gt;history.forward  前进&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;navigator 对象&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;window.navigator` 对象包含有关浏览器的信息，可以用它来查询一些关于运行当前脚本的应用程序的相关信息&lt;/p&gt;
&lt;p&gt;navigator.appCodeName 只读，任何浏览器中，总是返回 &#39;Gecko&#39;。该属性仅仅是为了保持兼容性。&lt;/p&gt;
&lt;p&gt;navigator.appName 只读，返回浏览器的官方名称。不要指望该属性返回正确的值。&lt;/p&gt;
&lt;p&gt;navigator.appVersion 只读，返回一个字符串，表示浏览器的版本。不要指望该属性返回正确的值。&lt;/p&gt;
&lt;p&gt;navigator.platform 只读，返回一个字符串，表示浏览器的所在系统平台。&lt;/p&gt;
&lt;p&gt;navigator.product 只读，返回当前浏览器的产品名称（如，&amp;quot;Gecko&amp;quot;）。&lt;/p&gt;
&lt;p&gt;navigator.userAgent 只读，返回当前浏览器的用户代理字符串（user agent string）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;11dom文档对象模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11dom文档对象模型&#34;&gt;#&lt;/a&gt; 11.DOM 文档对象模型&lt;/h3&gt;
&lt;h4 id=&#34;介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DOM 是 document 用来表示文档中对象的标准模型，他是由节点和对象组成的结构集合&lt;/strong&gt;。在浏览器解析 HTML 标签时，会构建一个 DOM 树结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;拿到指定节点&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;id&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 返回带有指定 id 的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementByTagName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;li&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 返回带有指定标签的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementByClassName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;class&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 返回带有包含执行类名的所有元素节点列表。`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; 创建&lt;span class=&#34;token constant&#34;&gt;DOM&lt;/span&gt;节点&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; node &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; attr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;class&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; text &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createTextNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;菜呀菜&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; 插入DOM节点&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node.appendChild(text) //插入新的子节点&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node.insertBefore(pre,child) //在node元素内child前加入新元素&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; 删除&lt;span class=&#34;token constant&#34;&gt;DOM&lt;/span&gt;节点&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;removeChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 从父元素删除子元素节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; 修改&lt;span class=&#34;token constant&#34;&gt;DOM&lt;/span&gt;节点&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;class&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 修改设置属性节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replaceChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pre&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;child&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 父节点内新子节点替换旧子节点 `&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; 常用&lt;span class=&#34;token constant&#34;&gt;DOM&lt;/span&gt;属性&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHtml  &lt;span class=&#34;token comment&#34;&gt;// 获取 / 替换元素内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentNode  &lt;span class=&#34;token comment&#34;&gt;// 元素节点的父节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentElement  &lt;span class=&#34;token comment&#34;&gt;// 元素节点的父元素节点（一般与 Node 节点相同）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;firstChild  &lt;span class=&#34;token comment&#34;&gt;// 属性的第一个节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lastChild   &lt;span class=&#34;token comment&#34;&gt;// 属性的最后一个节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nextSibling &lt;span class=&#34;token comment&#34;&gt;// 节点元素后的兄弟元素（包括回车，空格，换行）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nextElementSibling &lt;span class=&#34;token comment&#34;&gt;// 节点元素后的兄弟元素节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;previousSibling &lt;span class=&#34;token comment&#34;&gt;// 获取元素的上一个兄弟节点（元素，文本，注释）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;previousElementSibling &lt;span class=&#34;token comment&#34;&gt;// 获取元素的上一个兄弟节点（只包含元素节点）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;childNodes  &lt;span class=&#34;token comment&#34;&gt;// 元素节点的子节点（空格，换行默认为文本节点）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;children    &lt;span class=&#34;token comment&#34;&gt;// 返回当前元素的所有元素节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nodeValue   &lt;span class=&#34;token comment&#34;&gt;// 获取节点值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nodeName    &lt;span class=&#34;token comment&#34;&gt;// 获取节点名字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;attributes  &lt;span class=&#34;token comment&#34;&gt;// 元素节点的属性节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 元素节点的某个属性节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;width &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;200px&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 设置 css 样式 `&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;常用的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的api&#34;&gt;#&lt;/a&gt; 常用的 api&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;offset、client、scroll 的用法？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;offset 系列 经常用于获得元素位置 offsetLeft offsetTop&lt;/p&gt;
&lt;p&gt;client 经常用于获取元素大小 clientWidth clientHeight&lt;/p&gt;
&lt;p&gt;scroll 经常用于获取滚动距离 scrollTop scrollLeft&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12javascript原型与原型链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12javascript原型与原型链&#34;&gt;#&lt;/a&gt; 12.javascript 原型与原型链&lt;/h3&gt;
&lt;h4 id=&#34;原型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型&#34;&gt;#&lt;/a&gt; 原型&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;每个函数都有一个 prototype 属性，被称为显示原型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个实例对象都会有 &lt;code&gt;_ _proto_ _&lt;/code&gt; 属性，其被称为隐式原型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每一个实例对象的隐式原型 &lt;code&gt;_ _proto_ _&lt;/code&gt; 属性指向自身构造函数的显式原型 prototype&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个 prototype 原型都有一个 constructor 属性，指向它关联的构造函数。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;原型链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型链&#34;&gt;#&lt;/a&gt; &lt;strong&gt;原型链&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;获取对象属性时，如果对象本身没有这个属性，那就会去他的原型 &lt;code&gt;__proto__&lt;/code&gt; 上去找，如果还查不到，就去找原型的原型，一直找到最 顶层 ( &lt;code&gt;Object.prototype&lt;/code&gt; ) 为止。Object.prototype 对象也有 proto 属性值为 null。链式查找机制叫原型链。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;13constructorprotoprototype的三角关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13constructorprotoprototype的三角关系&#34;&gt;#&lt;/a&gt; 13.constructor，proto，prototype 的三角关系。&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;构造函数的 prototype 指向原型对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实例对象的 proto 指向构造函数的 prototype 所指向原型对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原型对象的 constructor 指向构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;14面向过程面向对象面向过程和面向对象的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14面向过程面向对象面向过程和面向对象的优缺点&#34;&gt;#&lt;/a&gt; 14. 面向过程，面向对象，面向过程和面向对象的优缺点&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一、面向过程：面向过程就是分析出实现需求所需要的步骤，通过函数一步一步实现这些步骤，接着依次调用即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、面向对象：将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程面向过程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点：性能上它是优于面向对象的，因为类在调用的时候需要实例化，开销过大。&lt;/p&gt;
&lt;p&gt;缺点：不易维护、复用、扩展&lt;/p&gt;
&lt;p&gt;用途：单片机、嵌入式开发、Linux/Unix 等对性能要求较高的地方&lt;/p&gt;
&lt;p&gt;面向对象:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象有三大特性：封装，继承，多态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护 。&lt;/p&gt;
&lt;p&gt;缺点：性能比面向过程低&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;15settimeout-promise-asyncawait-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15settimeout-promise-asyncawait-的区别&#34;&gt;#&lt;/a&gt; 15.setTimeout、Promise、Async/Await 的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;setTimeout&lt;/p&gt;
&lt;p&gt;settimeout 的回调函数放到宏任务队列里，等到执行栈清空以后执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise&lt;/p&gt;
&lt;p&gt;Promise 本身是&lt;strong&gt;同步的立即执行函数&lt;/strong&gt;， 当在 executor 中执行 resolve 或者 reject 的时候，此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script start&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; promise1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;promise1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;promise1 end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;promise2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;settimeout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;async/await&lt;/p&gt;
&lt;p&gt;async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;async1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;async1 start&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;async2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;async1 end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;async2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;async2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script start&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;async1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;es6篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6篇&#34;&gt;#&lt;/a&gt; ES6 篇&lt;/h2&gt;
&lt;h3 id=&#34;1-es6-新增特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-es6-新增特性&#34;&gt;#&lt;/a&gt; 1、 ES6 新增特性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;新增了块级作用域 (let,const)&lt;/p&gt;
&lt;p&gt;提供了定义类的语法糖 (class)&lt;/p&gt;
&lt;p&gt;新增了一种基本数据类型 (Symbol)&lt;/p&gt;
&lt;p&gt;新增了变量的解构赋值&lt;/p&gt;
&lt;p&gt;函数参数允许设置默认值，引入了 rest 参数，新增了箭头函数&lt;/p&gt;
&lt;p&gt;数组新增了一些 API，如 isArray /from/of 方法；数组实例新增了 entries ()，keys () 和 values () 等方法&lt;/p&gt;
&lt;p&gt;对象和数组新增了扩展运算符&lt;/p&gt;
&lt;p&gt;ES6 新增了模块化 (import/export)&lt;/p&gt;
&lt;p&gt;ES6 新增了 Set 和 Map 数据结构&lt;/p&gt;
&lt;p&gt;ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例&lt;/p&gt;
&lt;p&gt;ES6 新增了生成器 (Generator) 和遍历器 (Iterator)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-require与import的区别和使用commonjs规范和es6规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-require与import的区别和使用commonjs规范和es6规范&#34;&gt;#&lt;/a&gt; 2、require 与 import 的区别和使用 (CommonJS 规范和 es6 规范)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1、import 是 ES6 中的语法标准也是用来加载模块文件的，import 函数可以读取并执行一个 JavaScript 文件，然后返回该模块的 export 命令指定输出的代码。export 与 export default 均可用于导出常量、函数、文件、模块，export 可以有多个，export default 只能有一个。&lt;/p&gt;
&lt;p&gt;2、require 定义模块：module 变量代表当前模块，它的 exports 属性是对外的接口。通过 exports 可以将模块从模块中导出，其他文件加载该模块实际上就是读取 module.exports 变量，他们可以是变量、函数、对象等。在 node 中如果用 exports 进行导出的话系统会系统帮您转成 module.exports 的，只是导出需要定义导出名。&lt;/p&gt;
&lt;p&gt;require 与 import 的区别&lt;/p&gt;
&lt;p&gt;1，require 是 CommonJS 规范的模块化语法，import 是 ECMAScript 6 规范的模块化语法；&lt;/p&gt;
&lt;p&gt;2，require 是运行时加载，import 是编译时加载；&lt;/p&gt;
&lt;p&gt;3，require 可以写在代码的任意位置，import 只能写在文件的最顶端且不可在条件语句或函数作用域中使用；&lt;/p&gt;
&lt;p&gt;4，require 通过 module.exports 导出的值就不能再变化，import 通过 export 导出的值可以改变；&lt;/p&gt;
&lt;p&gt;5；require 通过 module.exports 导出的是 exports 对象，import 通过 export 导出是指定输出的代码；&lt;/p&gt;
&lt;p&gt;6，require 运行时才引入模块的属性所以性能相对较低，import 编译时引入模块的属性所所以性能稍高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-箭头函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-箭头函数&#34;&gt;#&lt;/a&gt; 3、箭头函数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;js 中我们在调⽤函数的时候经常会遇到 this 作⽤域的问题，这个时候 ES6 给我们提箭头函数。&lt;/p&gt;
&lt;p&gt;1、 箭头函数是匿名函数不能作为构造函数，不能使用 new&lt;/p&gt;
&lt;p&gt;2、 箭头函数不绑定 arguments, 取而代之用 rest 参数… 解决，&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arguments&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token comment&#34;&gt;//1,2,3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;rest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rest&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token comment&#34;&gt;//[1,2,3]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3、 this 指向不同，箭头函数的 this 在定义的时候继承自外层第一个普通函数的 this&lt;/p&gt;
&lt;p&gt;4、 箭头函数没有 prototype (原型)，所以箭头函数本身没有 this&lt;/p&gt;
&lt;p&gt;5、 箭头函数不能当做 Generator 函数，不能使用 yield 关键字、&lt;/p&gt;
&lt;p&gt;6、 写法不同，箭头函数把 function 省略掉了 （）=&amp;gt; 也可以吧 return 省略调 写法更简洁&lt;/p&gt;
&lt;p&gt;7、箭头函数不能通过 call（）、apply（）、bind（）方法直接修改它的 this 指向。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4-简述-let-const-var-的区别-以及使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-简述-let-const-var-的区别-以及使用场景&#34;&gt;#&lt;/a&gt; 4、简述 let const var 的区别 以及使用场景&lt;/h3&gt;
&lt;p&gt;var let 是用来声明变量的，而 const 是声明常量的 var&lt;/p&gt;
&lt;p&gt;var&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;1.var声明的变量存在变量提升，即变量可以在声明之前调用，值为undefined    
2、一个变量可多次声明，后面的声明会覆盖前面的声明    
3、在函数中使用var声明变量的时候，该变量是局部的作用域只在函数内部，而如果在函数外部使用 var，该变量是全局的
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;let&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、不存在变量提升，let 声明变量前，该变量不能使用。就是 let 声明存在暂时性死区&lt;br /&gt;
 2、let 命令所在的代码块内有效，在块级作用域内有效，作用域只是在花括号里面&lt;br /&gt;
 3、let 不允许在相同作用域中重复声明，注意是相同作用域，不同作用域有重复声明不会报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;const&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、const 声明一个只读的常量，声明后，值就不能改变&lt;br /&gt;
 2、let 和 const 在同一作用域不允许重复声明变量 const 声明一个只读的常量。一旦声明，常量的值就不能改变，但对于对象和数据这种  引用类型，内存地址不能修改，可以修改里面的值。&lt;br /&gt;
3、let 和 const 不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错&lt;br /&gt;
 4、能用 const 的情况下尽量使用 const，大多数情况使用 let，避免使用 var。 const &amp;gt; let &amp;gt; var const 声明的好处，一让阅读代码的人知道该变量不可修改，二是防止在修改代码的过程中无意中修改了该变量导致报错，减少 bug 的产生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;5-map和foreach的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-map和foreach的区别&#34;&gt;#&lt;/a&gt; 5、map 和 forEach 的区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;相同点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;都是循环遍历数组中的每一项 forEach 和 map 方法里每次执行匿名函数都支持 3 个参数，参数分别是 item（当前每一项）、index（索引值）、arr（原数组），需要用哪个的时候就写哪个 匿名函数中的 this 都是指向 window 只能遍历数组&lt;/p&gt;
&lt;p&gt;注意：forEach 对于空数组是不会调用回调函数的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;不同点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;map 方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。(原数组进行处理之后对应的一个新的数组。) map () 方法不会改变原始数组 map () 方法不会对空数组进行检测 forEach () 方法用于调用数组的每个元素，将元素传给回调函数.(没有 return，返回值是 undefined）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-promise的解释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-promise的解释&#34;&gt;#&lt;/a&gt; 6、promise 的解释&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1、Promise 是异步编程的一种解决方案，主要用于异步计算，支持链式调用，可以解决回调地狱 的问题，自己身上有 all、reject、resolve、race 等方法，原型上有 then、catch 等方法。&lt;/p&gt;
&lt;p&gt;2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果，可以在对象之间传递和操作 promise，帮助我们处理队列&lt;/p&gt;
&lt;p&gt;3、promise 有三个状态：pending [待定] 初始状态，fulfilled [实现] 操作成功，rejected [被否决] 操作失败&lt;/p&gt;
&lt;p&gt;4、Promise 对象状态改变：从 pending 变为 fulfilled 和从 pending 变为 rejected。只要这两种情况发生，状态就凝固了，不会再变了&lt;/p&gt;
&lt;p&gt;5、如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部，但是写了 then 和 catch ，会被 then 的第二个参数 或 catch 所捕获&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;promise 的 then 为什么可以支持链式调用&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;promise 的 then 会返回一个新的 promise 对象，能保证 then 方 可以进行链式调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;async、await 的原理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Async 和 await 是一种同步的写法，但还是异步的操作，两个必须配合一起使用&lt;/p&gt;
&lt;p&gt;函数前面的 async 关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个 Promise 对象。&lt;/p&gt;
&lt;p&gt;await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西，如果是 promise 则会等待 promaise 返回结果，接普通函数直接进行链式调用.&lt;/p&gt;
&lt;p&gt;await 能够获取 promise 执行的结果 await 必须和 async 一起使用才行，async 配合 await 使用是一个阻塞的异步方法&lt;/p&gt;
&lt;p&gt;如果 await 后面不是 Promise 对象，就直接返回对应的值，只能在 async 函数中出现，普通函数直接使用会报错&lt;/p&gt;
&lt;p&gt;await 语句后的 Promise 对象变成 reject 状态时，那么整个 async 函数会中断，后面的程序不会继续执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我在项目中： 需求：执行第一步，将执行第一步的结果返回给第二步使用。在 ajax 中先拿到一个接口的返回数据，然后使用第一步返回的数据执行第 二步操作的接口调用，达到异步操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;7-解构赋值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-解构赋值&#34;&gt;#&lt;/a&gt; 7、解构赋值&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值&lt;/p&gt;
&lt;p&gt;常见的几种方式有&lt;/p&gt;
&lt;p&gt;1. 默认值&lt;/p&gt;
&lt;p&gt;2. 交换变量&lt;/p&gt;
&lt;p&gt;3. 将剩余数组赋给一个变量&lt;/p&gt;
&lt;p&gt;结构数组和对象字符串区别&lt;/p&gt;
&lt;p&gt;对象的解构与数组类似，但有所不同。数组的元素是按次序排列的，变量的取值由它的位置决定；&lt;/p&gt;
&lt;p&gt;而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。字符串也是可以解构赋值的。字符串被转换成了一个类似数组的对象.&lt;/p&gt;
&lt;p&gt;我在项目中：就是从目标对象或数组中提取自己想要的变量。最常用的场景是：element-ui,vant-ui 按需引入，请求接口返回数据，提取想要数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;8-forin-迭代和-forof-有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-forin-迭代和-forof-有什么区别&#34;&gt;#&lt;/a&gt; 8、 for...in 迭代和 for...of 有什么区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1、 推荐在循环对象属性的时候，使用 for...in, 在遍历数组的时候的时候使用 for...of。&lt;/p&gt;
&lt;p&gt;2、 for in 遍历的是数组的索引，而 for of 遍历的是数组元素值&lt;/p&gt;
&lt;p&gt;3、for...of 不能循环普通的对象，需要通过和 Object.keys () 搭配使用&lt;/p&gt;
&lt;p&gt;5、从遍历对象的角度来说，for・・・in 会遍历出来的为对象的 key，但 for・・・of 会直接报错。&lt;/p&gt;
&lt;p&gt;6、for in 应用于数组循环返回的是数组的下标和数组的属性和原型上的方法和属性，而 for in 应用于对象循环返回的是对象的属性名和原型中的方法和属性。&lt;/p&gt;
&lt;p&gt;使用 for in 也可以遍历数组，但是会存在以下问题：&lt;/p&gt;
&lt;p&gt;1.index 索引为字符串型数字，不能直接进行几何运算&lt;/p&gt;
&lt;p&gt;2. 遍历顺序有可能不是按照实际数组的内部顺序&lt;/p&gt;
&lt;p&gt;3. 使用 for in 会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法 method 和 name 属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;9-generator-有了解过吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-generator-有了解过吗&#34;&gt;#&lt;/a&gt; 9、 generator 有了解过吗？&lt;/h3&gt;
&lt;p&gt;不了解！！！！！！！！！！！！！！！！！！！！！！！！！！！！！md&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generator 生成器 也是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同 function *（）{}&lt;/p&gt;
&lt;p&gt;Generator 函数是一个状态机，封装了多个内部状态，除了状态机，还是一个遍历器对象生成函数。&lt;/p&gt;
&lt;p&gt;Generator 是分段执行的，yield （又得）可暂停，next 方法可启动。每次返回的是 yield 后的表达式结果，这使得 Generator 函数非常适合将异步任务同步化&lt;/p&gt;
&lt;p&gt;Generator 并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署 Interator` 接口…）&lt;/p&gt;
&lt;p&gt;Generator 函数返回 Iterator 对象，因此我们还可以通过 for...of 进行遍历，原生对象没有遍历接口，通过 Generator 函数为它加上这个接口，就能使用 for...of 进行遍历了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;promise、Generator、async/await 进行比较：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;promise 和 async/await 是专门用于处理异步操作的&lt;br /&gt;
 Generator 并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署 Interator 接口…）&lt;br /&gt;
promise 编写代码相比 Generator、async 更为复杂化，且可读性也稍差&lt;br /&gt;
 Generator、async 需要与 promise 对象搭配处理异步情况&lt;br /&gt;
 async 实质是 Generator 的语法糖，相当于会自动执行 Generator 函数&lt;br /&gt;
 async 使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;10-js构造函数的静态成员和实例成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-js构造函数的静态成员和实例成员&#34;&gt;#&lt;/a&gt; 10、js 构造函数的静态成员和实例成员&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;js 的构造函数（在别的后台语言上叫做类）上可以添加一些成员，可以在构造函数内部的 this 上添加，可以在构造函数本身上添加，通过这两种方式添加的成员，就分别称为实例成员和静态成员&lt;/p&gt;
&lt;p&gt;实例成员：构造函数中 this 上添加的成员 静态成员：构造函数本身上添加的成员&lt;/p&gt;
&lt;p&gt;实例成员，只能由实例化的对象来访问 静态成员，只能由构造函数本身来访问 实例化对象的 proto 指向构造函数的 prototype 属性指向的对象，实例化的对象可以访问到它后者身上的成员&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;构造函数生成实例的执行过程：使用面向对象编程时，new 关键字做了什么？&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;新建了一个 Object 对象&lt;/li&gt;
&lt;li&gt;修改构造函数 this 的指向，是其指向新建的 Object 对象，并且执行构造函数&lt;/li&gt;
&lt;li&gt;为 Object 对象添加了一个&lt;strong&gt; proto&lt;/strong&gt; 属性，是其指向构造函数的 prototype 属性&lt;/li&gt;
&lt;li&gt;将这个 Object 对象返回出去&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;11-set和map数据结构有哪些常用的属性和方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-set和map数据结构有哪些常用的属性和方法&#34;&gt;#&lt;/a&gt; 11、set 和 map 数据结构有哪些常用的属性和方法？&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;set 数据的特点是数据是唯一的&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; set1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;增加元素 使用 add&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;set2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;是否含有某个元素 使用 has&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;set2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;has&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;查看长度 使用 size&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;set2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;删除元素 使用 &lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;set2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; 返回Set实例的成员总数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：添加某个值，返回 Set 结构本身。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：删除某个值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;：清除所有成员，没有返回值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt; &lt;code&gt;Set&lt;/code&gt;  的不重复性&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;传入的数组中有重复项，会自动去重&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; set2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;123&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;123&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Set&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;的不重复性中，要注意&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;引用数据类型和&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;两个对象都是不一样的指针，所以没法去重&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; set1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;孙志豪&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;孙志豪&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;如果是两个对象是同一指针，则能去重&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;我们一样&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; set2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;，&lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;是自身不等于自身的，但是在Set中他还是会被去重&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; set &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;NaN&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;map 数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Map &lt;code&gt;对比&lt;/code&gt;  object &lt;code&gt;最大的好处就是，key不受&lt;/code&gt; 类型限制&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;定义map&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; map1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;新增键值对 使用 &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;map1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;判断map是否含有某个key 使用 &lt;span class=&#34;token function&#34;&gt;has&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;map1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;has&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;哈哈&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;获取map中某个key对应的value&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;map1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;删除map中某个键值对 使用 &lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;map1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;哈哈&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;定义map，也可传入键值对数组集合&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; map2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;哈哈&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;嘻嘻嘻&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;map2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// Map (3) &amp;#123; true =&gt; 1, 1 =&gt; 2, &#39; 哈哈 &#39; =&gt; &#39; 嘻嘻嘻 &#39; &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;12-proxy-的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-proxy-的理解&#34;&gt;#&lt;/a&gt; 12、proxy 的理解&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。&lt;/p&gt;
&lt;p&gt;Proxy 可以理解成，在目标对象之前架设一层 “拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来 “代理” 某些操作，可以译为 “代理器”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;13-es6中新的数据类型symbol&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-es6中新的数据类型symbol&#34;&gt;#&lt;/a&gt; 13、Es6 中新的数据类型 symbol&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;symbol 是 es6 加入的，是一个基本数据类型，它代表的是一个独一无二的值，SYMBOL 值是由 SYMBOL 函数生成，也就是说现在我们定义对象的属性名字可以是原有的字符串 也可以是 symbol 类型的，symbol 可以保证不与其他属性名冲突，减少了 bug 的产生，&lt;/p&gt;
&lt;p&gt;如果那 symbol 对比的话 就是会返回 false&lt;/p&gt;
&lt;p&gt;symbol 他是一个原始类型的值就，不可以使用 new 关键字，symbol 不是对象 没有迭代器的接口 不能去添加属性值，他是类似于字符串的一种类型&lt;/p&gt;
&lt;p&gt;symbol 不能用来四则运算，否则会报错，只能用显示的方式转为字符串&lt;/p&gt;
&lt;p&gt;symbol 参数里的 a 表示一种修饰符 对当前创建的 symbol 的一种修饰，作为区分 ，否则会混淆&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;14-iterator-iteration-遍历器的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-iterator-iteration-遍历器的概念&#34;&gt;#&lt;/a&gt; 14、iterator == iteration （遍历器的概念）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作&lt;/p&gt;
&lt;p&gt;Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令 for...of 循环，Iterator 接口主要供 for...of 消费。&lt;/p&gt;
&lt;p&gt;其实 iteration == iterator 有三个作用：&lt;/p&gt;
&lt;p&gt;为各种数据结构，提供一个统一的、简便的访问接口；&lt;/p&gt;
&lt;p&gt;使得数据结构的成员能够按某种次序排列；&lt;/p&gt;
&lt;p&gt;主要供 for...of 消费&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;15-objectassign&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-objectassign&#34;&gt;#&lt;/a&gt; 15、Object.assign&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Object.assign 可以实现对象的合并。它的语法是这样的： Object.assign (target, ...sources)&lt;/p&gt;
&lt;p&gt;Object.assign 会将 source 里面的可枚举属性复制到 target。如果和 target 的已有属性重名，则会覆盖。同时后续的 source 会覆盖前面的 source 的同名属性。&lt;/p&gt;
&lt;p&gt;Object.assign 复制的是属性值，如果属性值是一个引用类型，那么复制的其实是引用地址，就会存在引用共享的问题&lt;/p&gt;
&lt;p&gt;Array.from () 方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。&lt;/p&gt;
&lt;p&gt;那么什么是类数组对象呢？所谓类数组对象，最基本的要求就是具有 length 属性的对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;16-谈谈你对模块化开发的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-谈谈你对模块化开发的理解&#34;&gt;#&lt;/a&gt; 16、谈谈你对模块化开发的理解？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，所以并没有模块的概念 ，但随着程序越来越复杂，代码的模块化开发变得越来越重要。&lt;/p&gt;
&lt;p&gt;由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污 染，并且模块间没有联系。&lt;/p&gt;
&lt;p&gt;后面提出了对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所 有的所有的模块成员，外部代码可以修改内部属性的值。&lt;/p&gt;
&lt;p&gt;现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;vue篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue篇&#34;&gt;#&lt;/a&gt; Vue 篇&lt;/h2&gt;
&lt;h3 id=&#34;简单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单&#34;&gt;#&lt;/a&gt; 简单&lt;/h3&gt;
&lt;h4 id=&#34;1-mvc-和-mvvm-区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-mvc-和-mvvm-区别&#34;&gt;#&lt;/a&gt; 1 MVC 和 MVVM 区别&lt;/h4&gt;
&lt;h5 id=&#34;mvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc&#34;&gt;#&lt;/a&gt; MVC&lt;/h5&gt;
&lt;p&gt;MVC 全名是 Model View Controller，是模型 (model)－视图 (view)－控制器 (controller) 的缩写，一种软件设计典范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model（模型）：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据&lt;/li&gt;
&lt;li&gt;View（视图）：是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的&lt;/li&gt;
&lt;li&gt;Controller（控制器）：是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/202205171711136.png&#34; alt=&#34;image-20220517171135997&#34; /&gt;&lt;/p&gt;
&lt;p&gt;MVC 的思想：一句话描述就是 Controller 负责将 Model 的数据用 View 显示出来，换句话说就是在 Controller 里面把 Model 的数据赋值给 View。&lt;/p&gt;
&lt;h5 id=&#34;mvvm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvvm&#34;&gt;#&lt;/a&gt; MVVM&lt;/h5&gt;
&lt;p&gt;MVVM 新增了 VM 类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ViewModel 层：做了两件事达到了数据的双向绑定 一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/202205171709821.png&#34; alt=&#34;image-20220517170928688&#34; /&gt;&lt;/p&gt;
&lt;p&gt;MVVM 与 MVC 最大的区别就是：它实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（对应 Vue 数据驱动的思想）&lt;/p&gt;
&lt;p&gt;整体看来，MVVM 比 MVC 精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作 DOM 元素。因为在 MVVM 中，View 不知道 Model 的存在，Model 和 ViewModel 也观察不到 View，这种低耦合模式提高代码的可重用性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：Vue 并没有完全遵循 MVVM 的思想 这一点官网自己也有说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;严格的 MVVM 要求 View 不能和 Model 直接通信，而 Vue 提供了 $refs 这个属性，让 Model 可以直接操作 View，违反了这一规定，所以说 Vue 没有完全遵循 MVVM。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2-为什么-data-是一个函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-为什么-data-是一个函数&#34;&gt;#&lt;/a&gt; 2 为什么 data 是一个函数&lt;/h4&gt;
&lt;p&gt;组件中的 data 写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的 data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份 data，就会造成一个变了全都会变的结果&lt;/p&gt;
&lt;h4 id=&#34;3-vue-组件通讯有哪几种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-vue-组件通讯有哪几种方式&#34;&gt;#&lt;/a&gt; 3 Vue 组件通讯有哪几种方式&lt;/h4&gt;
&lt;p&gt;1.props 和&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mtext&gt;父组件向子组件传递数据是通过&lt;/mtext&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mtext&gt;传递的，子组件传递数据给父组件是通过&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;emit 父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;父&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;组&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;件&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;向&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;子&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;组&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;件&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;递&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;通&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;过&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;递&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;子&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;组&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;件&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;递&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;给&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;父&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;组&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;件&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;通&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;过&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; emit 触发事件来做到的&lt;/p&gt;
&lt;p&gt;2.&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;parent,&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.80952em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;children 获取当前组件的父组件和当前组件的子组件&lt;/p&gt;
&lt;p&gt;3.&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mtext&gt;和&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;attrs 和&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;和&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; listeners A-&amp;gt;B-&amp;gt;C。Vue 2.4 开始提供了&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mtext&gt;和&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;attrs 和&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;和&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; listeners 来解决这个问题&lt;/p&gt;
&lt;p&gt;4. 父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。(官方不推荐在实际业务中使用，但是写组件库时很常用)&lt;/p&gt;
&lt;p&gt;5.$refs 获取组件实例&lt;/p&gt;
&lt;p&gt;6.eventBus 兄弟组件数据传递 这种情况下可以使用事件总线的方式&lt;/p&gt;
&lt;p&gt;7.vuex 状态管理&lt;/p&gt;
&lt;h4 id=&#34;4-vue-的生命周期方法有哪些-一般在哪一步发请求&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-vue-的生命周期方法有哪些-一般在哪一步发请求&#34;&gt;#&lt;/a&gt; 4 Vue 的生命周期方法有哪些 一般在哪一步发请求&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;beforeCreate&lt;/strong&gt; 在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;created&lt;/strong&gt; 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。这里没有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mtext&gt;如果非要想与&lt;/mtext&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mtext&gt;进行交互，可以通过&lt;/mtext&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;el,如果非要想与 Dom 进行交互，可以通过 vm.&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8888799999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;如&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;果&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;非&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;要&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;想&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;与&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;进&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;行&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;交&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;互&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;可&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;以&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;通&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;过&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;nextTick 来访问 Dom&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;beforeMount&lt;/strong&gt; 在挂载开始之前被调用：相关的 render 函数首次被调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mounted&lt;/strong&gt; 在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;beforeUpdate&lt;/strong&gt; 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁（patch）之前。可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;updated&lt;/strong&gt; 发生在更新完成之后，当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新，该钩子在服务器端渲染期间不被调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;beforeDestroy&lt;/strong&gt; 实例销毁之前调用。在这一步，实例仍然完全可用。我们可以在这时进行善后收尾工作，比如清除计时器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;destroyed&lt;/strong&gt; Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;activated&lt;/strong&gt; keep-alive 专属，组件被激活时调用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;deactivated&lt;/strong&gt; keep-alive 专属，组件被销毁时调用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;异步请求在哪一步发起？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以在钩子函数 created、beforeMount、mounted 中进行异步请求，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。&lt;/p&gt;
&lt;p&gt;如果异步请求不需要依赖 Dom 推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能更快获取到服务端数据，减少页面  loading 时间；&lt;/li&gt;
&lt;li&gt;ssr  不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;在 vue3 里面没有了&lt;strong&gt; beforeCreate&lt;/strong&gt; 和&lt;strong&gt; created&lt;/strong&gt;，用&lt;strong&gt; setup&lt;/strong&gt; 来代替，而且&lt;strong&gt; setup&lt;/strong&gt; 的执行时间比&lt;strong&gt; beforeCreate&lt;/strong&gt; 好早，而且取不到 this， 其他的变成 onMounted 等格式，加了个 on，然后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;5-v-if-和-v-show-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-v-if-和-v-show-的区别&#34;&gt;#&lt;/a&gt; 5 v-if 和 v-show 的区别&lt;/h4&gt;
&lt;p&gt;v-if 在编译过程中会被转化成三元表达式，条件不满足时不渲染此节点。&lt;/p&gt;
&lt;p&gt;v-show 会被编译成指令，条件不满足时控制样式将对应节点隐藏 （display:none）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景&lt;/p&gt;
&lt;p&gt;v-show 适用于需要非常频繁切换条件的场景&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;扩展补充：display:none、visibility:hidden 和 opacity:0 之间的区别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三者共同点都是隐藏。不同点：&lt;/p&gt;
&lt;p&gt;一、是否占据空间&lt;/p&gt;
&lt;p&gt;display:none, 隐藏之后不占位置；visibility:hidden、opacity:0, 隐藏后占据位置&lt;/p&gt;
&lt;p&gt;二、子元素是否继承&lt;/p&gt;
&lt;p&gt;display:none--- 不会被子元素继承，父元素不存在了，子元素也会不存在&lt;/p&gt;
&lt;p&gt;visibility:hidden--- 会被子元素继承，通过设置子元素 visibility:visible 来显示子元素&lt;/p&gt;
&lt;p&gt;opacity:0--- 会被子元素继承，但是不能通过设置子元素 opacity:1 来重新显示&lt;/p&gt;
&lt;p&gt;四、过渡动画&lt;/p&gt;
&lt;p&gt;transition 对于 display 是无效的&lt;/p&gt;
&lt;p&gt;transition 对于 visibility 是无效的&lt;/p&gt;
&lt;p&gt;transition 对于 opacity 是有效的&lt;/p&gt;
&lt;h4 id=&#34;6-说说-vue-内置指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-说说-vue-内置指令&#34;&gt;#&lt;/a&gt; 6 说说 vue 内置指令&lt;/h4&gt;
&lt;h5 id=&#34;vue常用修饰以及常见指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue常用修饰以及常见指令&#34;&gt;#&lt;/a&gt; vue 常用修饰以及常见指令&lt;/h5&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;修饰符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stop  阻止事件冒泡&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cpture 设置事件捕获&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;self  只有当事件作用在元素本身才会触发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prevent 阻止默认事件，比如超链接跳转&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;once 事件只能触发一次&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;native 触发js原生的事件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;number 把文本框的内容转换为数字&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;trim  去除文本框左右空格&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;常见指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见指令&#34;&gt;#&lt;/a&gt; 常见指令&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;⑴v-bind：给元素绑定属性
⑵v-on：给元素绑定事件
⑶v-html：给元素绑定数据，且该指令可以解析 html 标签
⑷v-text：给元素绑定数据，不解析标签
⑸v-model：数据双向绑定
⑹v-for：遍历数组
⑺v-if：条件渲染指令，动态在 DOM 内添加或删除 DOM 元素
⑻v-else：条件渲染指令，必须跟 v-if 成对使用
⑼v-else-if：判断多层条件，必须跟 v-if 成对使用
⑽v-cloak：解决插值闪烁问题
⑾v-once：只渲染元素或组件一次
⑿v-pre：跳过这个元素以及子元素的编译过程，以此来加快整个项目的编译速度
⒀v-show：条件渲染指令，将不符合条件的数据隐藏(display:none)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-怎样理解-vue-的单向数据流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-怎样理解-vue-的单向数据流&#34;&gt;#&lt;/a&gt; 7 怎样理解 Vue 的单向数据流&lt;/h4&gt;
&lt;p&gt;数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在子组件直接用 v-model 绑定父组件传过来的 prop 这样是不规范的写法 开发环境会报警告&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果实在要改变父组件的 prop 值 可以再 data 里面定义一个变量 并用 prop 的值初始化它 之后用 $emit 通知父组件去修改&lt;/p&gt;
&lt;h4 id=&#34;8-computed-和-watch-的区别和运用的场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-computed-和-watch-的区别和运用的场景&#34;&gt;#&lt;/a&gt; 8 computed 和 watch 的区别和运用的场景&lt;/h4&gt;
&lt;p&gt;computed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容，它可以设置 getter 和 setter。&lt;/p&gt;
&lt;p&gt;watch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。&lt;/p&gt;
&lt;p&gt;计算属性一般用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑&lt;/p&gt;
&lt;h3 id=&#34;中等&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中等&#34;&gt;#&lt;/a&gt; 中等&lt;/h3&gt;
&lt;h4 id=&#34;9-v-if-与-v-for-为什么不建议一起使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-v-if-与-v-for-为什么不建议一起使用&#34;&gt;#&lt;/a&gt; 9 v-if 与 v-for 为什么不建议一起使用&lt;/h4&gt;
&lt;p&gt;1. 当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费&lt;br /&gt;
 2. 这种场景建议使用 computed，先对数据进行过滤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：（官方文档有写）&lt;/p&gt;
&lt;p&gt;Vue2.0 是 v-for 的优先级高于 v-if&lt;/p&gt;
&lt;p&gt;Vue3.0 是 v-if 的优先级高于 v-for&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;10-vue20-响应式数据的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-vue20-响应式数据的原理&#34;&gt;#&lt;/a&gt; 10 Vue2.0 响应式数据的原理&lt;/h4&gt;
&lt;p&gt;整体思路是数据劫持 + 观察者模式&lt;/p&gt;
&lt;p&gt;对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已经存在的属性），数组则是通过重写数组方法来实现。当页面使用对应属性时，每个属性都拥有自己的 dep 属性，存放他所依赖的 watcher（依赖收集），当属性变化后会通知自己对应的 watcher 去更新 (派发更新)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 主要通过以下 4 个步骤来实现数据双向绑定的：&lt;/p&gt;
&lt;p&gt;实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty () 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。&lt;/p&gt;
&lt;p&gt;实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。&lt;/p&gt;
&lt;p&gt;实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。&lt;/p&gt;
&lt;p&gt;实现一个订阅器 Dep：订阅器采用 发布 - 订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;每一个数据都会被 Observer 改造成响应式的，这个响应式的数据就是发布者，每一个数据对应有一个自己的 dep&lt;/p&gt;
&lt;p&gt;读数据时，触发 get，调用 dep 的 depend 方法添加所有 watcher（订阅，是调用了 watcher 的 addDep 方法）&lt;/p&gt;
&lt;p&gt;改数据时，触发 set，调用 dep 的 notify 方法通知所有 watcher（订阅者）执行更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Observer&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 观测值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 对象上的所有属性依次进行观测&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; keys &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; keys&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; keys&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;defineReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// Object.defineProperty 数据劫持核心 兼容性在 ie9 以及以上&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;defineReactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 递归关键&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//-- 如果 value 还是一个对象会继续走一遍 defineReactive 层层遍历一直到 value 不是对象才停止&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//   思考？如果 Vue 数据嵌套层级过深 &gt;&gt; 性能会受影响&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;获取值&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 需要做依赖收集过程 这里代码没写出来&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;newValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;newValue &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;设置值&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 需要做派发更新过程 这里代码没写出来&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; newValue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;observe&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 如果传过来的是对象或者数组 进行属性劫持&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;[object Object]&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;11-vue20-如何检测数组变化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-vue20-如何检测数组变化&#34;&gt;#&lt;/a&gt; 11 Vue2.0 如何检测数组变化&lt;/h4&gt;
&lt;p&gt;数组考虑性能原因没有用 defineProperty 对数组的每一项进行拦截，而是选择对 7 种数组（push,shift,pop,splice,unshift,sort,reverse）方法进行重写 (AOP 切片思想)&lt;/p&gt;
&lt;p&gt;所以在 Vue 中修改数组的索引和长度是无法监控到的。需要通过以上 7 种变异方法修改数组才会触发数组对应的 watcher 进行更新&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// src/obserber/array.js&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 先保留数组原型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; arrayProto &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 然后将 arrayMethods 继承自数组原型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这里是面向切片编程思想（AOP）-- 不破坏封装的前提下，动态的扩展功能&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; arrayMethods &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arrayProto&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; methodsToPatch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;push&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;pop&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;shift&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;unshift&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;splice&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;reverse&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token string&#34;&gt;&#34;sort&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;methodsToPatch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  arrayMethods&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;args&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//   这里保留原型方法的执行结果&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arrayProto&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 这句话是关键&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//this 代表的就是数据本身 比如数据是 &amp;#123;a:[1,2,3]&amp;#125; 那么我们使用 a.push (4)  this 就是 a  ob 就是 a.__ob__ 这个属性就是上段代码增加的 代表的是该数据已经被响应式观察过了指向 Observer 实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; ob &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__ob__&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 这里的标志就是代表数组有新增操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; inserted&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;method&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;push&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;unshift&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        inserted &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;splice&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        inserted &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 如果有新增的元素 inserted 是一个数组 调用 Observer 实例的 observeArray 对数组每一项进行观测&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inserted&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; ob&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;observeArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;inserted&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 之后咱们还可以在这里检测到数组改变了之后从而触发视图更新的操作 -- 后续源码会揭晓&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;12-vue30-用过吗-了解多少&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-vue30-用过吗-了解多少&#34;&gt;#&lt;/a&gt; 12 vue3.0 用过吗 了解多少&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;响应式原理的改变 Vue3.x 使用 Proxy 取代 Vue2.x 版本的 Object.defineProperty&lt;/li&gt;
&lt;li&gt;组件选项声明方式 Vue3.x 使用 Composition API setup 是 Vue3.x 新增的一个选项， 他是组件内使用 Composition API 的入口。&lt;/li&gt;
&lt;li&gt;模板语法变化 slot 具名插槽语法 自定义指令 v-model 升级&lt;/li&gt;
&lt;li&gt;其它方面的更改 Suspense 支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。 基于 treeshaking 优化，提供了更多的内置功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;13-vue30-和-20-的响应式原理区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-vue30-和-20-的响应式原理区别&#34;&gt;#&lt;/a&gt; 13 Vue3.0 和 2.0 的响应式原理区别&lt;/h4&gt;
&lt;p&gt;Vue3.x 改用 Proxy 替代 Object.defineProperty。因为 Proxy 可以直接监听对象和数组的变化，并且有多达 13 种拦截方法。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; mutableHandlers &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./baseHandlers&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 代理相关逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; isObject &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;./util&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 工具方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 根据不同参数创建不同响应式对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createReactiveObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mutableHandlers&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createReactiveObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; baseHandler&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; observed &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; baseHandler&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; observed&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; get &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createGetter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; set &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createSetter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createGetter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; receiver&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 对获取的值进行放射&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; receiver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;属性获取&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 如果获取的值是对象类型，则返回当前对象的代理对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reactive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createSetter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; receiver&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; oldValue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; hadKey &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hasOwn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; receiver&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;hadKey&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;属性新增&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasChanged&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; oldValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;属性值被修改&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; mutableHandlers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  get&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 当获取属性时调用此方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  set&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 当修改属性时调用此方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;14-vue-的父子组件生命周期钩子函数执行顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-vue-的父子组件生命周期钩子函数执行顺序&#34;&gt;#&lt;/a&gt; 14 Vue 的父子组件生命周期钩子函数执行顺序&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;父子子父规律&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;加载渲染过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;父 beforeCreate-&amp;gt; 父 created-&amp;gt; 父 beforeMount-&amp;gt; 子 beforeCreate-&amp;gt; 子 created-&amp;gt; 子 beforeMount-&amp;gt; 子 mounted-&amp;gt; 父 mounted&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子组件更新过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;父 beforeUpdate-&amp;gt; 子 beforeUpdate-&amp;gt; 子 updated-&amp;gt; 父 updated&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父组件更新过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;父 beforeUpdate-&amp;gt; 父 updated&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;销毁过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;父 beforeDestroy-&amp;gt; 子 beforeDestroy-&amp;gt; 子 destroyed-&amp;gt; 父 destroyed&lt;/p&gt;
&lt;h4 id=&#34;15-虚拟-dom-是什么-有什么优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-虚拟-dom-是什么-有什么优缺点&#34;&gt;#&lt;/a&gt; 15 虚拟 DOM 是什么 有什么优缺点&lt;/h4&gt;
&lt;p&gt;由于在浏览器中操作 DOM 是很昂贵的。频繁的操作 DOM，会产生一定的性能问题。这就是虚拟 Dom 的产生原因。Vue2 的 Virtual DOM 借鉴了开源库 snabbdom 的实现。Virtual DOM 本质就是用一个原生的 JS 对象去描述一个 DOM 节点，是对真实 DOM 的一层抽象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；&lt;/li&gt;
&lt;li&gt;无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；&lt;/li&gt;
&lt;li&gt;跨平台： 虚拟 DOM 本质上是 JavaScript 对象，而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缺点:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。&lt;/li&gt;
&lt;li&gt;首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;16-v-model-原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-v-model-原理&#34;&gt;#&lt;/a&gt; 16 v-model 原理&lt;/h4&gt;
&lt;p&gt;v-model 只是语法糖而已&lt;/p&gt;
&lt;p&gt;v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text 和 textarea 元素使用 value property 和 input 事件；&lt;/li&gt;
&lt;li&gt;checkbox 和 radio 使用 checked property 和 change 事件；&lt;/li&gt;
&lt;li&gt;select 字段将 value 作为 prop 并将 change 作为事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在普通标签上&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;input v&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;model&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sth&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 这一行等于下一行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;input v&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;bind&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sth&#34;&lt;/span&gt; v&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;on&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;input&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;sth = $event.target.value&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在组件上&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;currency-input v-model=&amp;quot;price&amp;quot;&amp;gt;&amp;lt;/currentcy-input&amp;gt;
&amp;lt;!--上行代码是下行的语法糖
 &amp;lt;currency-input :value=&amp;quot;price&amp;quot; @input=&amp;quot;price = arguments[0]&amp;quot;&amp;gt;&amp;lt;/currency-input&amp;gt;
--&amp;gt;

&amp;lt;!-- 子组件定义 --&amp;gt;
Vue.component(&#39;currency-input&#39;, &amp;#123;
 template: `
  &amp;lt;span&amp;gt;
   &amp;lt;input
    ref=&amp;quot;input&amp;quot;
    :value=&amp;quot;value&amp;quot;
    @input=&amp;quot;$emit(&#39;input&#39;, $event.target.value)&amp;quot;
   &amp;gt;
  &amp;lt;/span&amp;gt;
 `,
 props: [&#39;value&#39;],
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;17-v-for-为什么要加-key&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-v-for-为什么要加-key&#34;&gt;#&lt;/a&gt; 17 v-for 为什么要加 key&lt;/h4&gt;
&lt;p&gt;如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改 / 复用相同类型元素的算法。key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;key 是给每一个 vnode 的唯一 id，也是 diff 的一种优化策略，可以根据 key，更准确， 更快的找到对应的 vnode 节点，更高效的对比虚拟 DOM 中每个节点是否是相同节点，相同就复用，不相同就删除旧的创建新的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;更准确&lt;/strong&gt;：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更快速&lt;/strong&gt;：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 判断两个 vnode 的标签和 key 是否相同 如果相同 就可以认为是同一节点就地复用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isSameVnode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;oldVnode&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; newVnode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; oldVnode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tag &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; newVnode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tag &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; oldVnode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; newVnode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 根据 key 来创建老的儿子的 index 映射表  类似 &amp;#123;&#39;a&#39;:0,&#39;b&#39;:1&amp;#125; 代表 key 为 &#39;a&#39; 的节点在第一个位置 key 为 &#39;b&#39; 的节点在第二个位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;makeIndexByKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  children&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;item&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    map&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; map&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 生成的映射表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;makeIndexByKey&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;oldCh&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;18-vue-事件绑定原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18-vue-事件绑定原理&#34;&gt;#&lt;/a&gt; 18 Vue 事件绑定原理&lt;/h4&gt;
&lt;p&gt;原生事件绑定是通过 addEventListener 绑定给真实元素的，组件事件绑定是通过 Vue 自定义的 $on 实现的。如果要在组件上使用原生事件，需要加.native 修饰符，这样就相当于在父组件中把子组件当做普通 html 标签，然后加上原生事件。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mtext&gt;、&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;on、&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;emit 是基于发布订阅模式的，维护一个事件中心，on 的时候将事件按名称存在事件中心里，称之为订阅者，然后 emit 将对应的事件进行发布，去执行事件中心里的对应的监听器&lt;/p&gt;
&lt;h4 id=&#34;19-vue-router-路由钩子函数是什么-执行顺序是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19-vue-router-路由钩子函数是什么-执行顺序是什么&#34;&gt;#&lt;/a&gt; 19 vue-router 路由钩子函数是什么 执行顺序是什么&lt;/h4&gt;
&lt;p&gt;路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;完整的导航解析流程:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导航被触发。&lt;/li&gt;
&lt;li&gt;在失活的组件里调用 beforeRouteLeave 守卫。&lt;/li&gt;
&lt;li&gt;调用全局的 beforeEach 守卫。&lt;/li&gt;
&lt;li&gt;在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。&lt;/li&gt;
&lt;li&gt;在路由配置里调用 beforeEnter。&lt;/li&gt;
&lt;li&gt;解析异步路由组件。&lt;/li&gt;
&lt;li&gt;在被激活的组件里调用 beforeRouteEnter。&lt;/li&gt;
&lt;li&gt;调用全局的 beforeResolve 守卫 (2.5+)。&lt;/li&gt;
&lt;li&gt;导航被确认。&lt;/li&gt;
&lt;li&gt;调用全局的 afterEach 钩子。&lt;/li&gt;
&lt;li&gt;触发 DOM 更新。&lt;/li&gt;
&lt;li&gt;调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;20-vue-router-动态路由是什么-有什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#20-vue-router-动态路由是什么-有什么问题&#34;&gt;#&lt;/a&gt; 20 vue-router 动态路由是什么 有什么问题&lt;/h4&gt;
&lt;p&gt;我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用 “动态路径参数”(dynamic segment) 来达到这个效果：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; User &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;div&gt;User&amp;lt;/div&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; router &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;VueRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;routes&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 动态路径参数 以冒号开头&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/user/:id&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; User &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;问题:vue-router 组件复用导致路由参数失效怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;1. 通过 watch 监听路由参数再发请求&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 通过 watch 来监听路由变化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token string-property property&#34;&gt;&#34;$route&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;$route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xxx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 用 :key 来阻止 “复用”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;router-view :key=&amp;quot;$route.fullPath&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;21-谈一下对-vuex-的个人理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-谈一下对-vuex-的个人理解&#34;&gt;#&lt;/a&gt; 21 谈一下对 vuex 的个人理解&lt;/h4&gt;
&lt;p&gt;vuex 是专门为 vue 提供的全局状态管理系统，用于多个组件中数据共享、数据缓存等。（无法持久化、内部核心原理是通过创造一个全局实例 new Vue）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/202205172111839.png&#34; alt=&#34;image-20220517211103714&#34; /&gt;&lt;/p&gt;
&lt;p&gt;主要包括以下几个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。&lt;/li&gt;
&lt;li&gt;Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。&lt;/li&gt;
&lt;li&gt;Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。&lt;/li&gt;
&lt;li&gt;Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。&lt;/li&gt;
&lt;li&gt;Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-vuex-页面刷新数据丢失怎么解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-vuex-页面刷新数据丢失怎么解决&#34;&gt;#&lt;/a&gt; 22 Vuex 页面刷新数据丢失怎么解决&lt;/h4&gt;
&lt;p&gt;需要做 vuex 数据持久化 一般使用本地存储的方案来保存数据 可以自己设计存储方案 也可以使用第三方插件&lt;/p&gt;
&lt;p&gt;推荐使用 vuex-persist 插件，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中&lt;/p&gt;
&lt;h4 id=&#34;23-vuex-为什么要分模块并且加命名空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-vuex-为什么要分模块并且加命名空间&#34;&gt;#&lt;/a&gt; 23 Vuex 为什么要分模块并且加命名空间&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;模块&lt;/strong&gt;：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名空间&lt;/strong&gt;：默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的 —— 这样使得多个模块能够对同一 mutation 或 action 作出响应。如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。&lt;/p&gt;
&lt;h4 id=&#34;24-使用过-vue-ssr-吗说说-ssr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-使用过-vue-ssr-吗说说-ssr&#34;&gt;#&lt;/a&gt; 24 使用过 Vue SSR 吗？说说 SSR&lt;/h4&gt;
&lt;p&gt;SSR 也就是服务端渲染，也就是将 Vue 在客户端把标签渲染成 HTML 的工作放在服务端完成，然后再把 html 直接返回给客户端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SSR 有着更好的 SEO、并且首屏加载速度更快&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 开发条件会受到限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。&lt;/p&gt;
&lt;p&gt;服务器会有更大的负载需求&lt;/p&gt;
&lt;h4 id=&#34;25-vue-中使用了哪些设计模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-vue-中使用了哪些设计模式&#34;&gt;#&lt;/a&gt; 25 vue 中使用了哪些设计模式&lt;/h4&gt;
&lt;p&gt;1. 工厂模式 - 传入参数即可创建实例&lt;/p&gt;
&lt;p&gt;虚拟 DOM 根据参数的不同返回基础标签的 Vnode 和组件 Vnode&lt;/p&gt;
&lt;p&gt;2. 单例模式 - 整个程序有且仅有一个实例&lt;/p&gt;
&lt;p&gt;vuex 和 vue-router 的插件注册方法 install 判断如果系统存在实例就直接返回掉&lt;/p&gt;
&lt;p&gt;3. 发布 - 订阅模式 (vue 事件机制)&lt;/p&gt;
&lt;p&gt;4. 观察者模式 (响应式数据原理)&lt;/p&gt;
&lt;p&gt;5. 装饰模式: (@装饰器的用法)&lt;/p&gt;
&lt;p&gt;6. 策略模式 策略模式指对象有某个行为，但是在不同的场景中，该行为有不同的实现方案 - 比如选项的合并策略&lt;/p&gt;
&lt;h4 id=&#34;26-你都做过哪些-vue-的性能优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-你都做过哪些-vue-的性能优化&#34;&gt;#&lt;/a&gt; 26 你都做过哪些 Vue 的性能优化&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;这里只列举针对 Vue 的性能优化 整个项目的性能优化是一个大工程 可以另写一篇性能优化的文章 哈哈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对象层级不要过深，否则性能就会差&lt;/li&gt;
&lt;li&gt;不需要响应式的数据不要放到 data 中（可以用 Object.freeze () 冻结数据）&lt;/li&gt;
&lt;li&gt;v-if 和 v-show 区分使用场景&lt;/li&gt;
&lt;li&gt;computed 和 watch 区分使用场景&lt;/li&gt;
&lt;li&gt;v-for 遍历必须加 key，key 最好是 id 值，且避免同时使用 v-if&lt;/li&gt;
&lt;li&gt;大数据列表和表格性能优化 - 虚拟列表 / 虚拟表格&lt;/li&gt;
&lt;li&gt;防止内部泄漏，组件销毁后把全局变量和事件销毁&lt;/li&gt;
&lt;li&gt;图片懒加载&lt;/li&gt;
&lt;li&gt;路由懒加载&lt;/li&gt;
&lt;li&gt;第三方插件的按需引入&lt;/li&gt;
&lt;li&gt;适当采用 keep-alive 缓存组件&lt;/li&gt;
&lt;li&gt;防抖、节流运用&lt;/li&gt;
&lt;li&gt;服务端渲染 SSR or 预渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;补充&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#补充&#34;&gt;#&lt;/a&gt; 补充&lt;/h3&gt;
&lt;h4 id=&#34;1-说说你对-spa-单页面的理解它的优缺点分别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-说说你对-spa-单页面的理解它的优缺点分别是什么&#34;&gt;#&lt;/a&gt; 1 说说你对 SPA 单页面的理解，它的优缺点分别是什么？&lt;/h4&gt;
&lt;p&gt;SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；&lt;/li&gt;
&lt;li&gt;基于上面一点，SPA 相对对服务器压力小；&lt;/li&gt;
&lt;li&gt;前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；&lt;/li&gt;
&lt;li&gt;前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；&lt;/li&gt;
&lt;li&gt;SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-直接给一个数组项赋值vue-能检测到变化吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-直接给一个数组项赋值vue-能检测到变化吗&#34;&gt;#&lt;/a&gt; 2 直接给一个数组项赋值，Vue 能检测到变化吗？&lt;/h4&gt;
&lt;p&gt;由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你利用索引直接设置一个数组项时，例如： &lt;code&gt;vm.items[indexOfItem] = newValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当你修改数组的长度时，例如： &lt;code&gt;vm.items.length = newLength&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决第一个问题，Vue 提供了以下操作方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;// Vue.set
Vue.set(vm.items, indexOfItem, newValue)
// vm.$set，Vue.set的一个别名
vm.$set(vm.items, indexOfItem, newValue)
// Array.prototype.splice
vm.items.splice(indexOfItem, 1, newValue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了解决第二个问题，Vue 提供了以下操作方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;// Array.prototype.splice
vm.items.splice(newLength)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-父组件可以监听到子组件的生命周期吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-父组件可以监听到子组件的生命周期吗&#34;&gt;#&lt;/a&gt; 3 父组件可以监听到子组件的生命周期吗？&lt;/h4&gt;
&lt;p&gt;比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;// Parent.vue
&amp;lt;Child @mounted=&amp;quot;doSomething&amp;quot;/&amp;gt;
    
// Child.vue
mounted() &amp;#123;
  this.$emit(&amp;quot;mounted&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;//  Parent.vue
&amp;lt;Child @hook:mounted=&amp;quot;doSomething&amp;quot; &amp;gt;&amp;lt;/Child&amp;gt;

doSomething() &amp;#123;
   console.log(&#39;父组件监听到 mounted 钩子函数 ...&#39;);
&amp;#125;,
    
//  Child.vue
mounted()&amp;#123;
   console.log(&#39;子组件触发 mounted 钩子函数 ...&#39;);
&amp;#125;,    
    
// 以上输出顺序为：
// 子组件触发 mounted 钩子函数 ...
// 父组件监听到 mounted 钩子函数 ...     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。&lt;/p&gt;
&lt;h4 id=&#34;4-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗&#34;&gt;#&lt;/a&gt; 4 能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（1）hash 模式的实现原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 &#39;#search&#39;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://www.word.com#search
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;hash  路由模式的实现主要是基于下面几个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；&lt;/li&gt;
&lt;li&gt;hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；&lt;/li&gt;
&lt;li&gt;可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用  JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；&lt;/li&gt;
&lt;li&gt;我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（2）history 模式的实现原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState () 和 history.repalceState ()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.history.pushState(null, null, path);
window.history.replaceState(null, null, path);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;history 路由模式的实现主要基于存在下面几个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；&lt;/li&gt;
&lt;li&gt;我们可以使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）；&lt;/li&gt;
&lt;li&gt;history.pushState () 或 history.replaceState () 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-proxy-与-objectdefineproperty-优劣对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-proxy-与-objectdefineproperty-优劣对比&#34;&gt;#&lt;/a&gt; 5  Proxy 与 Object.defineProperty 优劣对比&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Proxy 的优势如下:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxy 可以直接监听对象而非属性；&lt;/li&gt;
&lt;li&gt;Proxy 可以直接监听数组的变化；&lt;/li&gt;
&lt;li&gt;Proxy 有多达 13 种拦截方法，不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；&lt;/li&gt;
&lt;li&gt;Proxy 返回的是一个新对象，我们可以只操作新的对象达到目的，而 Object.defineProperty 只能遍历对象属性直接修改；&lt;/li&gt;
&lt;li&gt;Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Object.defineProperty 的优势如下:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题，而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本 (3.0) 才能用 Proxy 重写。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-虚拟-dom-实现原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-虚拟-dom-实现原理&#34;&gt;#&lt;/a&gt; 6、虚拟 DOM 实现原理？&lt;/h4&gt;
&lt;p&gt;虚拟 DOM，其实就是用对象的方式取代真实的 DOM 操作，把真实的 DOM 操作放在内存当中，在内存中的对象里做模拟操作。当页面打开时浏览器会解析 HTML 元素，构建一颗 DOM 树，将状态全部保存起来，在内存当中模拟我们真实的 DOM 操作，操作完后又会生成一颗 dom 树，两颗 DOM 树进行比较，根据 diff 算法比较两颗 DOM 树不同的地方，只渲染一次不同的地方。&lt;/p&gt;
&lt;p&gt;（个人理解）&lt;strong&gt;虚拟 dom 他不并不是真实的 dom ，是根据模板生成一个 js 对象（使用 createElement，方法），根据这个 js 对象再去生成真实的 dom，对复杂的文档 DOM 结构，提供一种方便的工具，进行最小化的 DOM 操作 ，是可以快速的渲染和高效的更新元素，提高浏览器的性能，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，一个 ul 标签下很多个 li 标签，其中只有一个 li 有变化，这种情况下如果使用新的 ul 去替代旧的 ul, 因为这些不必要的 DOM 操作而造成了性能上的浪费，但是如果直接使用虚拟节点覆盖旧节点的话，减少了很多的不必要的 DOM 操作。&lt;/p&gt;
&lt;p&gt;我们在渲染页面的时候 会对新的虚拟 dom 和旧的虚拟 dom 进行对比 只渲染不同的地方，而不再是像之前只要发生变化，全部的真实 dom 都要重新渲染，所以提高了渲染的效率。&lt;/p&gt;
&lt;p&gt;** 缺点：**&lt;strong&gt; 首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;7-vue模版编译原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-vue模版编译原理&#34;&gt;#&lt;/a&gt; 7 Vue 模版编译原理。&lt;/h4&gt;
&lt;p&gt;vue 中的模板 template 无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的 HTML 语法，所有需要将 template 转化成一个 JavaScript 函数，这样浏览器就可以执行这一个函数并渲染出对应的 HTML 元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。&lt;/p&gt;
&lt;p&gt;Vue 的编译过程就是将 template 转化为 render 函数的过程 分为以下三步&lt;/p&gt;
&lt;p&gt;第一步是将 模板字符串 转换成 element ASTs（解析器）&lt;/p&gt;
&lt;p&gt;第二步是对 AST 进行静态节点标记，主要用来做虚拟 DOM 的渲染优化（优化器）&lt;/p&gt;
&lt;p&gt;第三步是 使用 element ASTs 生成 render 函数代码字符串（代码生成器）&lt;/p&gt;
&lt;h4 id=&#34;8-diff算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-diff算法&#34;&gt;#&lt;/a&gt; 8 &lt;strong&gt;diff 算法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;diff 算法是一种通过同层的树节点进行比较的高效算法，比较方式：diff 整体策略为：深度优先，同层比较&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;diff 算法&lt;/strong&gt; 当 data 发生改变 会根据新的数据生成一个新的虚拟 dom ，新的虚拟 dom 和旧的虚拟 dom 进行对比，这个对比的过程就是 diff 算法，会找到不同地方，只去渲染不同的地方，总的来说就是减少 DOM，重绘和回流。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTE5Mzc2MDY0ODMzNjY3MDgw&#34;&gt;React、Vue2、Vue3 的三种 Diff 算法 - 掘金 (juejin.cn)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDgxODk5NjU3OTg2NTcyMzAx&#34;&gt;vue3 中的快速 diff 算法 - 掘金 (juejin.cn)&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;9-vue-中的-key-有什么作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-vue-中的-key-有什么作用&#34;&gt;#&lt;/a&gt; 9 Vue 中的 key 有什么作用？&lt;/h4&gt;
&lt;p&gt;key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有 4 种比较方式：newStartIndex 和 oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了 key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &amp;gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较&lt;/p&gt;
&lt;p&gt;所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更准确&lt;/strong&gt;：因为带 key 就不是就地复用了，在 sameNode 函数  &lt;code&gt;a.key === b.key&lt;/code&gt;  对比中可以避免就地复用的情况。所以会更加准确。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更快速&lt;/strong&gt;：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快&lt;/p&gt;
&lt;h4 id=&#34;10-说说你对-map-多页面的理解它的优缺点分别是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-说说你对-map-多页面的理解它的优缺点分别是什么&#34;&gt;#&lt;/a&gt; 10 说说你对 MAP 多页面的理解，它的优缺点分别是什么？&lt;/h4&gt;
&lt;p&gt;MPA 多页面应用程序 指的就是有多个独立的 html 页面，每个页面必须重复加载 html js css 资源，多页面跳转需要整个页面资源刷新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;br /&gt;
 1、首屏加载速度快&lt;br /&gt;
当我们访问页面的时候，服务器只返回了一个 html，页面就展示出来了，只发了一次 http 请求，所以页面显示非常快.&lt;br /&gt;
2、SEO 效果好&lt;br /&gt;
因为搜索引擎在做网站排名的时候，要根据网页的内容给网页排名，搜素引擎只可以识别 html 内容，多页面就是将内容放在 html 中，所以排名要好一点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;br /&gt;
因为每跳转一个页面都要发送一次 http 请求，如果网络情况不好的情况下，页面之间来回跳转就会发生明显的卡顿，有的时候半天还加载不出来，影响用户体验。&lt;/p&gt;
&lt;p&gt;转场动画也不好实现&lt;/p&gt;
&lt;h4 id=&#34;11-请描述一下你对webpack的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-请描述一下你对webpack的理解&#34;&gt;#&lt;/a&gt; 11 请描述一下你对 webpack 的理解？&lt;/h4&gt;
&lt;p&gt;Webpack Webpack 是一个项目打包工具&lt;/p&gt;
&lt;p&gt;可以压缩代码和图片，把浏览器识别不了的代码转化为能识别的，可以启动一个热加载服务器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置跨域、路径别名、打包分析、cdn 映入、去掉 console.log、单独打包第三方模块、ie 兼容、eslint 规范、图片压缩&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;12vue2对比vue3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12vue2对比vue3&#34;&gt;#&lt;/a&gt; 12.vue2 对比 vue3&lt;/h4&gt;
&lt;p&gt;最大的区别就是： Vue2 使用 选项类型 API（Options API） 对比 Vue3 合成型 API（Composition API）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;双向数据绑定原理发生了改变，使用 proxy 替换 Object.defineProerty, 使用 Proxy 的优势：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;可直接监听数组类型的数据变&lt;/li&gt;
&lt;li&gt;监听的目标为对象本身，不需要像 Object.defineProperty 一样遍历每个属性，有一定的性能提升&lt;/li&gt;
&lt;li&gt;可直接实现对象属性的新增 / 删除&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;默认使用懒加载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 2.x 版本里。不管数据多大，都会在一开始就为其创建观察者，在数据很大时，就会造成性能的问题。在 3.x 中，只会对渲染出来的数据创建观察者，而且 3.x 的观察者更高效。&lt;/p&gt;
&lt;p&gt;3.0 新加入了 TypeScript 以及 PWA 支持&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生命周期有了一定的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vue2--------------vue3&lt;/p&gt;
&lt;p&gt;beforeCreate -&amp;gt; setup () 开始创建组件之前，创建的是 data 和 method&lt;/p&gt;
&lt;p&gt;created -&amp;gt; setup()&lt;/p&gt;
&lt;p&gt;beforeMount -&amp;gt; onBeforeMount 组件挂载到节点上之前执行的函数。&lt;/p&gt;
&lt;p&gt;mounted -&amp;gt; onMounted 组件挂载完成后执行的函数&lt;/p&gt;
&lt;p&gt;beforeUpdate -&amp;gt; onBeforeUpdate 组件更新之前执行的函数。&lt;/p&gt;
&lt;p&gt;updated -&amp;gt; onUpdated 组件更新完成之后执行的函数。&lt;/p&gt;
&lt;p&gt;beforeDestroy -&amp;gt; onBeforeUnmount 组件挂载到节点上之前执行的函数。&lt;/p&gt;
&lt;p&gt;destroyed -&amp;gt; onUnmounted 组件卸载之前执行的函数。&lt;/p&gt;
&lt;p&gt;activated -&amp;gt; onActivated 组件卸载完成后执行的函数&lt;/p&gt;
&lt;p&gt;deactivated -&amp;gt; onDeactivated&lt;/p&gt;
&lt;h4 id=&#34;13-git命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-git命令&#34;&gt;#&lt;/a&gt; 13 git 命令&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;\1. git init 初始化 git 仓库 (mac 中 Command+Shift+. 可以&lt;strong&gt;显示隐藏文件&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;\2. git status 查看文件状态&lt;/p&gt;
&lt;p&gt;\3. git add 文件列表 追踪文件&lt;/p&gt;
&lt;p&gt;\4. git commit -m 提交信息 向仓库中提交代码&lt;/p&gt;
&lt;p&gt;\5. git log 查看提交记录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 分支明细&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。&lt;/p&gt;
&lt;p&gt;（2）开发分支（develop）：作为开发的分支，基于 master 分支创建。&lt;/p&gt;
&lt;p&gt;（3）功能分支（feature）：作为开发具体功能的分支，基于开发分支创建&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 分支命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）git branch 查看分支&lt;/p&gt;
&lt;p&gt;（2）git branch 分支名称 创建分支&lt;/p&gt;
&lt;p&gt;（3）git checkout 分支名称 切换分支&lt;/p&gt;
&lt;p&gt;（4）git merge 来源分支 合并分支 (备注：必须在 master 分支上才能合并 develop 分支)&lt;/p&gt;
&lt;p&gt;（5）git branch -d 分支名称 删除分支（分支被合并后才允许删除）（-D 强制删除）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 暂时保存更改&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）存储临时改动：git stash&lt;/p&gt;
&lt;p&gt;（2）恢复改动：git stash pop&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;14-数组扁平化转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-数组扁平化转换&#34;&gt;#&lt;/a&gt; 14 数组扁平化转换&lt;/h4&gt;
&lt;p&gt;在说到模版编译的时候，有可能会提到数组的转换，一般就用递归处理&lt;br /&gt;
将 [1,2,3,[4,5]] 转换成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;
    children:[
        &amp;#123;
            value:1
        &amp;#125;,
        &amp;#123;
            value:2
        &amp;#125;,
        &amp;#123;
            value:3
        &amp;#125;,
        &amp;#123;
            children:[
                &amp;#123;
                    value:4
                &amp;#125;,
                &amp;#123;
                    value:5
                &amp;#125;
            ]
        &amp;#125;,
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 数组扁平化测试&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flatten&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出 [1,2,3,4,5,6,7]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;15-keep-alive的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-keep-alive的实现&#34;&gt;#&lt;/a&gt; 15 keep-alive 的实现&lt;/h4&gt;
&lt;p&gt;keep-alive 是 Vue.js 的一个内置组件。它能够不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实 DOM 中，也不会出现在父组件链中。&lt;/p&gt;
&lt;p&gt;作用：实现组件缓存，保持这些组件的状态，以避免反复渲染导致的性能问题。 需要缓存组件 频繁切换，不需要重复渲染&lt;/p&gt;
&lt;p&gt;场景：tabs 标签页 后台导航，vue 性能优化&lt;/p&gt;
&lt;p&gt;原理： &lt;code&gt;Vue.js&lt;/code&gt;  内部将 &lt;code&gt;DOM&lt;/code&gt;  节点抽象成了一个个的 &lt;code&gt;VNode&lt;/code&gt;  节点， &lt;code&gt;keep-alive&lt;/code&gt;  组件的缓存也是基于 &lt;code&gt;VNode&lt;/code&gt;  节点的而不是直接存储 &lt;code&gt;DOM&lt;/code&gt;  结构。它将满足条件 &lt;code&gt;（pruneCache与pruneCache）&lt;/code&gt; 的组件在 &lt;code&gt;cache&lt;/code&gt;  对象中缓存起来，在需要重新渲染的时候再将 &lt;code&gt;vnode&lt;/code&gt;  节点从 &lt;code&gt;cache&lt;/code&gt;  对象中取出并渲染。&lt;/p&gt;
&lt;h4 id=&#34;16-keep-alive-的属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-keep-alive-的属性&#34;&gt;#&lt;/a&gt; 16 keep-alive 的属性&lt;/h4&gt;
&lt;p&gt;它提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。&lt;/p&gt;
&lt;p&gt;include 定义缓存白名单，keep-alive 会缓存命中的组件；exclude 定义缓存黑名单，被命中的组件将不会被缓存；max 定义缓存组件上限，超出上限使用 LRU 的策略置换缓存数据。&lt;/p&gt;
&lt;p&gt;在动态组件中的应用&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;include&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;whiteList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;exclude&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;blackList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;amount&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;component &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;is&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;currentComponent&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;component&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 vue-router 中的应用&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;include&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;whiteList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;exclude&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;blackList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;amount&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;router&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;view&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;router&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;view&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;vue 中完整示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;keep-alive&amp;gt;
    &amp;lt;coma v-if=&amp;quot;test&amp;quot;&amp;gt;&amp;lt;/coma&amp;gt;
    &amp;lt;comb v-else=&amp;quot;test&amp;quot;&amp;gt;&amp;lt;/comb&amp;gt;
&amp;lt;/keep-alive&amp;gt;
&amp;lt;button @click=&amp;quot;test=handleClick&amp;quot;&amp;gt;请点击&amp;lt;/button&amp;gt;

export default &amp;#123;
    data () &amp;#123;
        return &amp;#123;
            test: true
        &amp;#125;
    &amp;#125;,
    methods: &amp;#123;
        handleClick () &amp;#123;
            this.test = !this.test;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;node网络篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node网络篇&#34;&gt;#&lt;/a&gt; Node，网络篇&lt;/h2&gt;
&lt;h3 id=&#34;1-什么是axios&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-什么是axios&#34;&gt;#&lt;/a&gt; 1、什么是 axios&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基于 promise 的 http 库，可以用在浏览器和 node.js，支持 promiseAPI，客户端支持防御 xsrf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-node是什么别看这么简单有的人一问就懵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-node是什么别看这么简单有的人一问就懵&#34;&gt;#&lt;/a&gt; 2、Node 是什么（别看这么简单，有的人一问就懵）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Node 是一个基于 Chrome V8 引擎的 JavaScript 代码运行环境。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浏览器（软件）能够运行 JavaScript 代码，浏览器就是 JavaScript 代码的运行环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node（软件）能够运行 JavaScript 代码，Node 就是 JavaScript 代码的运行环境&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-模块化的意义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-模块化的意义&#34;&gt;#&lt;/a&gt; 3、模块化的意义&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一句话：降低软件的复杂性。使其可控，可维护，可扩展。&lt;/p&gt;
&lt;p&gt;一个功能就是一个模板，多个模板可以组成完整应用，抽离一个模板不会影响其他功能的运行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4-网站的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-网站的组成&#34;&gt;#&lt;/a&gt; 4、网站的组成&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;网站应用程序主要分为两大部分：客户端和服务器端。客户端：在浏览器中运行的部分，就是用户看到并与之交互的界面程序。使用 HTML、CSS、JavaScript 构建。服务器端：在服务器中运行的部分，负责存储数据和处理应用逻辑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;5-为什么要用node&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-为什么要用node&#34;&gt;#&lt;/a&gt; 5、为什么要用 node&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简单强大，轻量可扩展。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单体现在 node 使用的是 javascript,json 来进行编码&lt;/strong&gt;，强大体现在非阻塞 IO, 可以适应分块传输数据，较慢的网络环境，&lt;strong&gt;尤其擅长高并发访问&lt;/strong&gt;，轻量体现在 node 本身既是代码，又是服务器，前后端使用统一语言；可扩展体现在可以轻松应对多实例，多服务器架构，同时有海量的第三方应用组件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-node中的异步和同步怎么理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-node中的异步和同步怎么理解&#34;&gt;#&lt;/a&gt; 6、node 中的异步和同步怎么理解？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;node 是单线程的，异步是通过一次次的循环事件队列来实现的．同步则是说阻塞式的 IO, 这在高并发环境会是一个很大的性能问题，所以同步一般只在基础框架的启动时使用，用来加载配置文件，初始化程序什么的．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;7-什么是npmnpm的使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-什么是npmnpm的使用场景&#34;&gt;#&lt;/a&gt; 7、什么是 npm？Npm 的使用场景？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;NPM 是随同 NodeJS 一起安装的包管理工具，能解决 NodeJS 代码部署上的很多问题。&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;p&gt;a. 允许用户从 NPM 服务器下载别人编写的第三方包到本地使用。&lt;/p&gt;
&lt;p&gt;b. 允许用户从 NPM 服务器下载并安装别人编写的命令行程序到本地使用。&lt;/p&gt;
&lt;p&gt;c. 允许用户将自己编写的包或命令行程序上传到 NPM 服务器供别人使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;8-get与post请求有什么区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-get与post请求有什么区别&#34;&gt;#&lt;/a&gt; 8、get 与 post 请求有什么区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;get 是从服务器上获取数据，post 是向服务器传送数据。&lt;/li&gt;
&lt;li&gt;POST 比 GET 安全，因为数据在地址栏上不可见。&lt;/li&gt;
&lt;li&gt;get 方式提交的数据最多只能有 1024 字节，而 post 则没有此限制。&lt;/li&gt;
&lt;li&gt;GET 使用 URL 或 Cookie 传参。而 POST 将数据放在 request BODY 中。&lt;/li&gt;
&lt;li&gt;GET 与 POST 都有自己的语义，不能随便混用。&lt;/li&gt;
&lt;li&gt;据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基，本可以无视。而在网 络环境差的情况下，两次包的 TCP 在验证数据包完整 性上，有非常大的优点。post 发送两次，get 只发送一次。&lt;/li&gt;
&lt;li&gt;并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ajax&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ajax&#34;&gt;#&lt;/a&gt; ajax&lt;/h2&gt;
&lt;h3 id=&#34;1-什么是ajaxajax有什么优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-什么是ajaxajax有什么优缺点&#34;&gt;#&lt;/a&gt; 1 什么是 ajax？ajax 有什么优缺点？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ajax 不是语言，ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;1、最大的一点是页面无刷新，用户的体验非常好。&lt;/p&gt;
&lt;p&gt;2、使用异步方式与服务器通信，具有更加迅速的响应能力。&lt;/p&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;p&gt;1、ajax 不支持浏览器 back 按钮。&lt;/p&gt;
&lt;p&gt;2、安全问题 AJAX 暴露了与服务器交互的细节。&lt;/p&gt;
&lt;p&gt;3、对搜索引擎的支持比较弱。&lt;/p&gt;
&lt;p&gt;4、破坏了程序的异常机制。&lt;/p&gt;
&lt;p&gt;5、不容易调试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-原生ajax的创建过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-原生ajax的创建过程&#34;&gt;#&lt;/a&gt; 2 原生 Ajax 的创建过程&lt;/h3&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;创建xhr 核心对象&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; xhr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt;调用open 准备发送&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数一：请求方式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;参数二&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; 请求地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数三：&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;异步，&lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt; 同步&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;post&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;http://www.baidu.com/api/search&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3.&lt;/span&gt;如果是post请求，必须设置请求头。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;application/x-www-form-urlencoded&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4.&lt;/span&gt;调用send 发送请求 （如果不需要参数，就写&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;user=tom&amp;amp;age=10&amp;amp;sex=女&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5.&lt;/span&gt;监听异步回调 onreadystatechange&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;判断readyState 为&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; 表示请求完成&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;判断status 状态码 为 &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt; 表示接口请求成功&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;responeseText 为相应数据。字符串类型。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onreadystatechange&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;readyState&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;status&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;responseText&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; res&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;responseText&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;code&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            modal&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;modal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hide&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;           location&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;reload&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;备注：如果是post请求，想要传json格式数据。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;设置请求头&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;​&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;open发送数据&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;_id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;xxx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;xxxx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;xxxx&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;3-web安全及防护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-web安全及防护&#34;&gt;#&lt;/a&gt; 3 web 安全及防护&lt;/h3&gt;
&lt;h4 id=&#34;1xss攻击原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1xss攻击原理&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.XSS 攻击原理：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;** &lt;code&gt;XSS&lt;/code&gt; ( &lt;code&gt;Cross-Site Scripting&lt;/code&gt; ，跨站脚本攻击)**&lt;strong&gt; 是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取&lt;/strong&gt;  &lt;code&gt;**cookie，**session tokens&lt;/code&gt; ，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XSS 避免方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;  参数使用 &lt;code&gt;encodeURIComponent&lt;/code&gt;  方法转义&lt;/li&gt;
&lt;li&gt;尽量不要有 &lt;code&gt;InnerHtml&lt;/code&gt;  插入 &lt;code&gt;HTML&lt;/code&gt;  内容&lt;/li&gt;
&lt;li&gt;使用特殊符号、标签转义符。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2csrf攻击跨站请求伪造&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2csrf攻击跨站请求伪造&#34;&gt;#&lt;/a&gt; &lt;strong&gt;2.CSRF 攻击（跨站请求伪造）：&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;CSRF&lt;/code&gt; （ &lt;code&gt;Cross-site request forgery&lt;/code&gt; ）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CSRF&lt;/code&gt;  避免方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加验证码&lt;/li&gt;
&lt;li&gt;使用 token
&lt;ul&gt;
&lt;li&gt;服务端给用户生成一个 token，加密后传递给用户&lt;/li&gt;
&lt;li&gt;用户在提交请求时，需要携带这个 token&lt;/li&gt;
&lt;li&gt;服务端验证 token 是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;3sql注入攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3sql注入攻击&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.SQL 注入攻击&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;就是通过吧 SQL 命令插入到 Web 表单递交或输入域名，最终达到欺骗服务器执行恶意的 SQL 命令。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决：表单输入时通过正则表达式将一些特殊字符进行转换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;4-ddos攻击&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-ddos攻击&#34;&gt;#&lt;/a&gt; &lt;strong&gt;4、DDoS 攻击&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;DDoS&lt;/code&gt;  又叫分布式拒绝服务，全称  &lt;code&gt;Distributed Denial of Service&lt;/code&gt; ，其原理就是利用大量的请求造成资源过载，导致服务不可用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;限制单 IP 请求频率。&lt;/li&gt;
&lt;li&gt;防火墙等防护设置禁止 &lt;code&gt;ICMP&lt;/code&gt;  包等&lt;/li&gt;
&lt;li&gt;检查特权端口的开放&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4-使用基于token的登录流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-使用基于token的登录流程&#34;&gt;#&lt;/a&gt; 4 使用基于 token 的登录流程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;\1. 客户端使用用户名跟密码请求登录&lt;/p&gt;
&lt;p&gt;\2. 服务端收到请求，去验证用户名与密码&lt;/p&gt;
&lt;p&gt;\3. 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端&lt;/p&gt;
&lt;p&gt;\4. 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里&lt;/p&gt;
&lt;p&gt;\5. 客户端每次向服务端请求资源的时候需要带着服务端签发的 Token&lt;/p&gt;
&lt;p&gt;\6. 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态码&#34;&gt;#&lt;/a&gt; 状态码&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;常见 http 状态码分类：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    200响应成功
    301永久重定向
    302临时重定向
    304资源缓存
    403服务器禁止访问
    404服务器资源未找到
    500 502服务器内部错误
    504 服务器繁忙
    1xx Informational（信息状态码）      接受请求正在处理
    2xx Success（成功状态码）            请求正常处理完毕
    3xx Redirection（重定向状态码）      需要附加操作已完成请求
    4xx Client Error（客户端错误状态码）  服务器无法处理请求
    5xx Server Error（服务器错误状态码）  服务器处理请求出错
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;浏览器篇&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器篇&#34;&gt;#&lt;/a&gt; 浏览器篇&lt;/h2&gt;
&lt;h3 id=&#34;1-tcp-udp-区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-tcp-udp-区别&#34;&gt;#&lt;/a&gt; 1 TCP UDP 区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;1. &lt;code&gt;TCP&lt;/code&gt;  向上层提供面向连接的可靠服务 ， &lt;code&gt;UDP&lt;/code&gt;  向上层提供无连接不可靠服务。&lt;br /&gt;
2. 虽然  &lt;code&gt;UDP&lt;/code&gt;  并没有  &lt;code&gt;TCP&lt;/code&gt;  传输来的准确，但是也能在很多实时性要求高的地方有所作为&lt;br /&gt;
 3. 对数据准确性要求高，速度可以相对较慢的，可以选用 &lt;code&gt;TCP&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;区别&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;UDP&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TCP&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否连接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;无连接&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否可靠&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不可靠传输，不使用流量控制和拥塞控制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可靠传输，使用流量控制和拥塞控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;连接对象个数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;支持一对一，一对多，多对一和多对多交互通信&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;只能是一对一通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;传输方式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向报文&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;面向字节流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;首部开销&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;首部开销小，仅 8 字节&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;首部最小 20 字节，最大 60 字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;适用场景&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;适用于实时应用（IP 电话、视频会议、直播等）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;适用于要求可靠传输的应用，例如文件传输&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-http和https区别高频&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-http和https区别高频&#34;&gt;#&lt;/a&gt; 2 Http 和 Https 区别（高频）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1.`HTTP` 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头
2.`HTTP` 是不安全的，而 HTTPS 是安全的
3.`HTTP` 标准端口是80 ，而 HTTPS 的标准端口是443
4.`在OSI` 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层
5.`HTTP` 无法加密，而HTTPS 对传输的数据进行加密，证的网络协议，安全性高于HTTP协议。
6.`HTTP`无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书，一般免费证书少，因而需要一定费用。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-get和post区别高频&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-get和post区别高频&#34;&gt;#&lt;/a&gt; 3 GET 和 POST 区别（高频）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1.GET在浏览器回退不会再次请求，POST会再次提交请求
2.GET请求会被浏览器主动缓存，POST不会，要手动设置
3.GET请求参数会被完整保留在浏览器历史记录里，POST中的参数不会
4.GET请求在URL中传送的参数是有长度限制的，而POST没有限制
5.GET参数通过URL传递，POST放在Request body中
6.GET参数暴露在地址栏不安全，POST放在报文内部更安全
7.GET一般用于查询信息，POST一般用于提交某种信息进行某些修改操作
8.GET产生一个TCP数据包；POST产生两个TCP数据包
Ge和post的选择：
1.私密性的信息请求使用post（如注册、登陆）。
2.查询信息使用get。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-三次握手和四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-三次握手和四次挥手&#34;&gt;#&lt;/a&gt; 4 三次握手和四次挥手&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 三次握手：*&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一次：建立连接时，客户端发送 syn 包到服务器，等待服务端确认&lt;/p&gt;
&lt;p&gt;第二次：服务器收到 syn 包，必须确认客户的 syn，同时也发送一个 syn 包，即 syn+ACK 包&lt;/p&gt;
&lt;p&gt;第三次：客户端收到服务器的 syn 和 ack 包，向服务器发送确认包 ack，发送完毕，客户端和服务端连接成功，完成三次握手&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;* 四次挥手：*&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一次：浏览器发送完数据后，发送 fin 请求断开连接&lt;/p&gt;
&lt;p&gt;第二次：服务器发送 ack 到客户端，确认客户端的断开请求&lt;/p&gt;
&lt;p&gt;第三次：服务器请求断开 fin 的请求&lt;/p&gt;
&lt;p&gt;第四次：客户端确认服务器的断开 ack&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;5-http10-http11-http20的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-http10-http11-http20的区别&#34;&gt;#&lt;/a&gt; 5 http1.0、http1.1、http2.0 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;1 和 1.0 相比，1.1 可以一次传输多个文件&lt;/li&gt;
&lt;li&gt;http1.x 解析基于文本，&lt;/li&gt;
&lt;li&gt;http2.0 采用二进制格式，新增特性 多路复用、header 压缩、服务端推送 (静态 html 资源)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-浏览器缓存的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-浏览器缓存的作用&#34;&gt;#&lt;/a&gt; 6 浏览器缓存的作用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器缓存的作用：减少冗余的数据传输，节省网络带宽，更快加载页面，缓存降低了服务器的要求，有更快的响应&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;7-缓存的资源去哪里了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-缓存的资源去哪里了&#34;&gt;#&lt;/a&gt; 7 缓存的资源去哪里了&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;memory cache 将资源文件缓存到内存中，下次请求读取的是内存中的&lt;br /&gt;
 disk cache 将资源存到硬盘中，下次请求从硬盘中读取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;8-http报文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-http报文&#34;&gt;#&lt;/a&gt; 8 http 报文&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP 报文就是浏览器和服务器间通信时发送及响应的数据块。&lt;br /&gt;
浏览器向服务器请求数据，发送请求 (request) 报文；&lt;br /&gt;
服务器向浏览器返回数据，返回响应 (response) 报文。&lt;br /&gt;
报文信息主要分为两部分：header, 数据主体部分 (body)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;9-能不能说一说浏览器的本地存储各自优劣如何&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-能不能说一说浏览器的本地存储各自优劣如何&#34;&gt;#&lt;/a&gt; 9 能不能说一说浏览器的本地存储？各自优劣如何？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;浏览器的本地存储主要分为 &lt;code&gt;Cookie、WebStorage和IndexDB&lt;/code&gt; , 其中 &lt;code&gt;WebStorage&lt;/code&gt;  又可以分为 &lt;code&gt;localStorage和sessionStorage&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共同点：都是保存在浏览器端、且同源的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt;  数据始终在同源的 &lt;code&gt;http&lt;/code&gt;  请求中携带（即使不需要），即 &lt;code&gt;cookie&lt;/code&gt;  在浏览器和服务器间来回传递。 &lt;code&gt;cookie&lt;/code&gt;  数据还有路径（ &lt;code&gt;path&lt;/code&gt; ）的概念，可以限制 &lt;code&gt;cookie&lt;/code&gt;  只属于某个路径下 &lt;code&gt;sessionStorage&lt;/code&gt;  和 &lt;code&gt;localStorage&lt;/code&gt;  不会自动把数据发送给服务器，仅在本地保存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储大小限制也不同，&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt;  数据不能超过 4K， &lt;code&gt;sessionStorage和localStorage&lt;/code&gt;  可以达到 5M&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sessionStorage&lt;/code&gt; ：仅在当前浏览器窗口关闭之前有效；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localStorage&lt;/code&gt; ：始终有效，窗口或浏览器关闭也一直保存，本地存储，因此用作持久数据；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt; ：只在设置的 &lt;code&gt;cookie&lt;/code&gt;  过期时间之前有效，即使窗口关闭或浏览器关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;作用域不同&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sessionStorage&lt;/code&gt; ：不在不同的浏览器窗口中共享，即使是同一个页面；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localstorage&lt;/code&gt; ：在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cookie&lt;/code&gt; : 也是在所有同源窗口中都是共享的。也就是说只要浏览器不关闭，数据仍然存在&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;10-从输入url到页面加载的全过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10-从输入url到页面加载的全过程&#34;&gt;#&lt;/a&gt; 10 从输入 URL 到页面加载的全过程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/e44aa8a92602405db3c12161b71e2094~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;从输入URL到页面加载的主干流程&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先在浏览器中输入 URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找缓存：浏览器先查看浏览器缓存 - 系统缓存 - 路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器缓存：浏览器会记录 DNS 一段时间，因此，只是第一个地方解析 DNS 请求；&lt;/li&gt;
&lt;li&gt;操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录 (保存最近的 DNS 查询缓存)；&lt;/li&gt;
&lt;li&gt;路由器缓存：如果上述两个步骤均不能成功获取 DNS 记录，继续搜索路由器缓存；&lt;/li&gt;
&lt;li&gt;ISP 缓存：若上述均失败，继续向 ISP 搜索。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 域名解析：浏览器向 DNS 服务器发起请求，解析该 URL 中的域名对应的 IP 地址。 &lt;code&gt;DNS服务器是基于UDP的，因此会用到UDP协议&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立 TCP 连接：解析出 IP 地址后，根据 IP 地址和默认 80 端口，和服务器建立 TCP 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发起 HTTP 请求：浏览器发起读取文件的 HTTP 请求，，该请求报文作为 TCP 三次握手的第三次数据发送给服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的 html 文件发送给浏览器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭 TCP 连接：通过四次挥手释放 TCP 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器渲染：客户端（浏览器）解析 HTML 内容并渲染出来，浏览器接收到数据包后的解析流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建 DOM 树：词法分析然后解析成 DOM 树（dom tree），是由 dom 元素及属性节点组成，树的根是 document 对象&lt;/li&gt;
&lt;li&gt;构建 CSS 规则树：生成 CSS 规则树（CSS Rule Tree）&lt;/li&gt;
&lt;li&gt;构建 render 树：Web 浏览器将 DOM 和 CSSOM 结合，并构建出渲染树（render tree）&lt;/li&gt;
&lt;li&gt;布局（Layout）：计算出每个节点在屏幕中的位置&lt;/li&gt;
&lt;li&gt;绘制（Painting）：即遍历 render 树，并使用 UI 后端层绘制每个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a90660027f0d4c559732519bad4c6323~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;浏览器渲染流程图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS 引擎解析过程：调用 JS 引擎执行 JS 代码（JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 window 对象：window 对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于 window 的属性和方法，而 DOM Tree 也会映射在 window 的 doucment 对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。&lt;/li&gt;
&lt;li&gt;加载文件：完成 js 引擎分析它的语法与词法是否合法，如果合法进入预编译&lt;/li&gt;
&lt;li&gt;预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为 window 的属性加入到 window 对象中，并给变量赋值为 &#39;undefined&#39;；寻找全局函数声明，把它作为 window 的方法加入到 window 对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在 ES6 中已经解决了，函数提升还存在。&lt;/li&gt;
&lt;li&gt;解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在 ES5 非严格模式下这个变量会成为 window 的一个属性，也就是成为全局变量。string、int 这样的值就是直接把值放在变量的存储空间里，object 对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS 作用域其实就是这样的执行流机制实现的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY4NDkxMDY3MTYyNjU1&#34;&gt;# DNS 域名解析过程&lt;/span&gt; ☞&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyNTk3NzYwOTM1NDYwOTAx&#34;&gt;# 浏览器的工作原理&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;1. 输入 url&lt;/p&gt;
&lt;p&gt;2. 浏览器查找是否有该页面的缓存（如果没有往下）&lt;/p&gt;
&lt;p&gt;3. 像 dns 服务器发送请求域名解析拿到 ip（dns 服务器基于 udp，用到 udp 协议）&lt;/p&gt;
&lt;p&gt;4. 三次握手简历 TCP 连接&lt;/p&gt;
&lt;p&gt;5. 发 HTTP 请求&lt;/p&gt;
&lt;p&gt;6. 拿到响应结果&lt;/p&gt;
&lt;p&gt;7. 四次挥手断开 TCP 连接&lt;/p&gt;
&lt;p&gt;---- 浏览器渲染开始&lt;/p&gt;
&lt;p&gt;8. 先构建 dom 树&lt;/p&gt;
&lt;p&gt;9. 构建 css 规则书&lt;/p&gt;
&lt;p&gt;10. 两者结合成 render 渲染树&lt;/p&gt;
&lt;p&gt;11. 布局&lt;/p&gt;
&lt;p&gt;12. 绘制&lt;/p&gt;
&lt;p&gt;13. 加载 js 脚本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;11-在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议&#34;&gt;#&lt;/a&gt; 11 在浏览器中输入 URL 到显示页面经历哪些过程，涉及到哪些协议？&lt;/h3&gt;
&lt;p&gt;浏览器要将 URL 解析为 IP 地址，解析域名就要用到 DNS 协议，首先主机会查询 DNS 的缓存，如果没有就给本地 DNS 发送查询请求。DNS 查询分为两种方式，一种是递归查询，一种是迭代查询。如果是迭代查询，本地的 DNS 服务器，向根域名服务器发送查询请求，根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求，然后依次类推直到查询到该域名的 IP 地址。 &lt;code&gt;DNS服务器是基于UDP的，因此会用到UDP协议。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到 IP 地址后，浏览器就要与服务器建立一个 http 连接。因此要用到 http 协议。http 生成一个 get 请求报文，将该报文传给 TCP 层处理，所以还会用到 TCP 协议。如果采用 https 还会使用 https 协议先对 http 数据进行加密。TCP 层如果有需要先将 HTTP 数据包分片，分片依据路径 MTU 和 MSS。TCP 的数据包然后会发送给 IP 层，用到 IP 协议。IP 层通过路由选路，一跳一跳发送到目的地址。当然在一个网段内的寻址是通过以太网协议实现 (也可以是其他物理层协议，比如 PPP，SLIP)，以太网协议需要直到目的 IP 地址的物理地址，有需要 ARP 协议。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;1、 &lt;code&gt;DNS协议，http协议，https协议属于应用层&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用层是体系结构中的最高层。应用层确定进程之间通信的性质以满足用户的需要。这里的进程就是指正在运行的程序。应用层不仅要提供应用进程所需要的信息交换和远地操作，而且还要作为互相作用的应用进程的用户代理，来完成一些为进行语义上有意义的信息交换所必须的功能。应用层直接为用户的应用进程提供服务。&lt;/p&gt;
&lt;p&gt;2、 &lt;code&gt;TCP/UDP属于传输层&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;传输层的任务就是负责主机中两个进程之间的通信。因特网的传输层可使用两种不同协议：即面向连接的传输控制协议 TCP，和无连接的用户数据报协议 UDP。面向连接的服务能够提供可靠的交付，但无连接服务则不保证提供可靠的交付，它只是 “尽最大努力交付”。这两种服务方式都很有用，备有其优缺点。在分组交换网内的各个交换结点机都没有传输层。&lt;/p&gt;
&lt;p&gt;3、 &lt;code&gt;IP协议，ARP协议属于网络层&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网络层负责为分组交换网上的不同主机提供通信。在发送数据时，网络层将运输层产生的报文段或用户数据报封装成分组或包进行传送。在 TCP/IP 体系中，分组也叫作 IP 数据报，或简称为数据报。网络层的另一个任务就是要选择合适的路由，使源主机运输层所传下来的分组能够交付到目的主机。&lt;/p&gt;
&lt;p&gt;4、数据链路层&lt;/p&gt;
&lt;p&gt;当发送数据时，数据链路层的任务是将在网络层交下来的 IP 数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制、以及流量控制信息等）。控制信息使接收端能够知道 — 个帧从哪个比特开始和到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错。&lt;/p&gt;
&lt;p&gt;5、物理层&lt;/p&gt;
&lt;p&gt;物理层的任务就是透明地传送比特流。在物理层上所传数据的单位是比特。传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆等，并不在物理层之内而是在物理层的下面。因此也有人把物理媒体当做第 0 层。&lt;/p&gt;
&lt;h3 id=&#34;12-浏览器的主要功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-浏览器的主要功能&#34;&gt;#&lt;/a&gt; 12 浏览器的主要功能&lt;/h3&gt;
&lt;p&gt;浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。&lt;/p&gt;
&lt;h3 id=&#34;13-浏览器的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-浏览器的工作原理&#34;&gt;#&lt;/a&gt; 13 浏览器的工作原理&lt;/h3&gt;
&lt;p&gt;渲染引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。&lt;/p&gt;
&lt;p&gt;然后进行如下所示的基本流程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/9ef6cb226b374e89914a2315e4ca9ba9~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图：渲染引擎的基本流程。&lt;/p&gt;
&lt;p&gt;渲染引擎将开始 &lt;code&gt;解析 HTML 文档&lt;/code&gt; ，并将各标记逐个转化成 “内容树” 上的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM0RPTQ==&#34;&gt;DOM&lt;/span&gt; 节点。同时也会 &lt;code&gt;解析外部 CSS 文件以及样式元素中的样式数据&lt;/code&gt; 。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：&lt;a href=&#34;https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23Render_tree_construction&#34; title=&#34;https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Render_tree_construction&#34;&gt; &lt;code&gt;渲染树&lt;/code&gt; &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;渲染树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。&lt;/p&gt;
&lt;p&gt;渲染树构建完毕之后，进入 “&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM2xheW91dA==&#34;&gt;布局&lt;/span&gt;” 处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM1BhaW50aW5n&#34;&gt;绘制&lt;/span&gt; - 渲染引擎会遍历渲染树，由用户界面后端层将每个节点绘制出来。&lt;/p&gt;
&lt;p&gt;需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，渲染引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，渲染引擎会将部分内容解析并显示出来。&lt;/p&gt;
&lt;h3 id=&#34;14-浏览器的主要组成部分是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-浏览器的主要组成部分是什么&#34;&gt;#&lt;/a&gt; 14 浏览器的主要组成部分是什么？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户界面&lt;/strong&gt; - 包括地址栏、前进 / 后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器引擎&lt;/strong&gt; - 在用户界面和呈现引擎之间传送指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;呈现引擎&lt;/strong&gt; - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络&lt;/strong&gt; - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户界面后端&lt;/strong&gt; - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 解释器&lt;/strong&gt;。用于解析 2 和执行 JavaScript 代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt;。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了 “网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。&lt;br /&gt;
&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f83cb61cb9de4a65abeb95e50608af48~tplv-k3u1fbpfcp-watermark.awebp&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图：浏览器的主要组件。&lt;/p&gt;
&lt;p&gt;值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。&lt;/p&gt;
&lt;h3 id=&#34;15-浏览器是如何渲染ui的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-浏览器是如何渲染ui的&#34;&gt;#&lt;/a&gt; 15 浏览器是如何渲染 UI 的？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;浏览器获取 HTML 文件，然后对文件进行解析，形成 DOM Tree&lt;/li&gt;
&lt;li&gt;与此同时，进行 CSS 解析，生成 Style Rules&lt;/li&gt;
&lt;li&gt;接着将 DOM Tree 与 Style Rules 合成为 Render Tree&lt;/li&gt;
&lt;li&gt;接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标&lt;/li&gt;
&lt;li&gt;随后调用 GPU 进行绘制（Paint），遍历 Render Tree 的节点，并将元素呈现出来&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/67b1336692f540c9a81756f93e82c2f5~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;16-dom-tree是如何构建的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-dom-tree是如何构建的&#34;&gt;#&lt;/a&gt; 16 DOM Tree 是如何构建的？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;转码：浏览器将接收到的二进制数据按照指定编码格式转化为 HTML 字符串&lt;/li&gt;
&lt;li&gt;生成 Tokens: 之后开始 parser，浏览器会将 HTML 字符串解析成 Tokens&lt;/li&gt;
&lt;li&gt;构建 Nodes: 对 Node 添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope&lt;/li&gt;
&lt;li&gt;生成 DOM Tree: 通过 node 包含的指针确定的关系构建出 DOM&lt;br /&gt;
Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/1dc0f577836c4705bb582b2ac15bc5d1~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;2019-06-22-11-48-00&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;17-浏览器重绘与重排的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-浏览器重绘与重排的区别&#34;&gt;#&lt;/a&gt; 17 浏览器重绘与重排的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;重排/回流（Reflow）&lt;/code&gt; ：当 &lt;code&gt;DOM&lt;/code&gt;  的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;重绘(Repaint)&lt;/code&gt; : 当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分&lt;/p&gt;
&lt;p&gt;重排和重绘代价是高昂的，它们会破坏用户体验，并且让 UI 展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。&lt;/p&gt;
&lt;p&gt;『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。&lt;/p&gt;
&lt;h3 id=&#34;18-如何触发重排和重绘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18-如何触发重排和重绘&#34;&gt;#&lt;/a&gt; 18 如何触发重排和重绘？&lt;/h3&gt;
&lt;p&gt;任何改变用来构建渲染树的信息都会导致一次重排或重绘：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加、删除、更新 DOM 节点&lt;/li&gt;
&lt;li&gt;通过 display: none 隐藏一个 DOM 节点 - 触发重排和重绘&lt;/li&gt;
&lt;li&gt;通过 visibility: hidden 隐藏一个 DOM 节点 - 只触发重绘，因为没有几何变化&lt;/li&gt;
&lt;li&gt;移动或者给页面中的 DOM 节点添加动画&lt;/li&gt;
&lt;li&gt;添加一个样式表，调整样式属性&lt;/li&gt;
&lt;li&gt;用户行为，例如调整窗口大小，改变字号，或者滚动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;19-如何避免重绘或者重排&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19-如何避免重绘或者重排&#34;&gt;#&lt;/a&gt; 19 如何避免重绘或者重排？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;集中改变样式&lt;/code&gt; ，不要一条一条地修改 DOM 的样式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要把 DOM 结点的属性值放在循环里当成循环里的变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为动画的 HTML 元件使用  &lt;code&gt;fixed&lt;/code&gt;  或  &lt;code&gt;absoult&lt;/code&gt;  的  &lt;code&gt;position&lt;/code&gt; ，那么修改他们的 CSS 是不会 reflow 的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量只修改 &lt;code&gt;position：absolute&lt;/code&gt;  或 &lt;code&gt;fixed&lt;/code&gt;  元素，对其他元素影响不大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动画开始 &lt;code&gt;GPU&lt;/code&gt;  加速， &lt;code&gt;translate&lt;/code&gt;  使用 &lt;code&gt;3D&lt;/code&gt;  变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提升为合成层&lt;/p&gt;
&lt;p&gt;将元素提升为合成层有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合成层的位图，会交由 GPU 合成，比 CPU 处理要快&lt;/li&gt;
&lt;li&gt;当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层&lt;/li&gt;
&lt;li&gt;对于 transform 和 opacity 效果，不会触发 layout 和 paint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提升合成层的最好方式是使用 CSS 的 will-change 属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#target &amp;#123;
  will-change: transform;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;关于合成层的详解请移步&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cCUzQSUyRiUyRnRhb2Jhb2ZlZC5vcmclMkZibG9nJTJGMjAxNiUyRjA0JTJGMjUlMkZwZXJmb3JtYW5jZS1jb21wb3NpdGUlMkY=&#34;&gt;无线性能优化：Composite&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;20-介绍下304过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#20-介绍下304过程&#34;&gt;#&lt;/a&gt; 20 介绍下 304 过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。&lt;/li&gt;
&lt;li&gt;b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。&lt;/li&gt;
&lt;li&gt;c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;#&lt;/a&gt; 21 浏览器的缓存机制 强制缓存 &amp;amp;&amp;amp; 协商缓存&lt;/h3&gt;
&lt;p&gt;浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/487144abaada4b9a8b34bc9375191ec7~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;图片&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上图我们可以知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器每次发起请求，都会 &lt;code&gt;先在浏览器缓存中查找该请求的结果以及缓存标识&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浏览器每次拿到返回的请求结果都会 &lt;code&gt;将该结果和缓存标识存入浏览器缓存中&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 &lt;code&gt;强制缓存&lt;/code&gt; 和 &lt;code&gt;协商缓存&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。&lt;/code&gt; 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  &lt;code&gt;Expires&lt;/code&gt;  和  &lt;code&gt;Cache-Control&lt;/code&gt; ，其中 Cache-Control 优先级比 Expires 高。&lt;/p&gt;
&lt;p&gt;强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协商缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程&lt;/code&gt; ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： &lt;code&gt;Last-Modified / If-Modified-Since&lt;/code&gt;  和  &lt;code&gt;Etag / If-None-Match&lt;/code&gt; ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协商缓存生效，返回 304&lt;/li&gt;
&lt;li&gt;协商缓存失效，返回 200 和请求结果结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx&#34;&gt;# 彻底理解浏览器的缓存机制&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-说下进程-线程和协程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-说下进程-线程和协程&#34;&gt;#&lt;/a&gt; 22 说下进程、线程和协程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程， &lt;code&gt;是操作系统进行资源分配和调度的一个独立单位&lt;/code&gt; ，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;是程序执行中一个单一的顺序控制流程，是 &lt;code&gt;程序执行流的最小单元&lt;/code&gt; ，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间 (也就是所在进程的内存空间)。一个标准的线程由线程 ID、当前指令指针 (PC)、寄存器和堆栈组成。而进程由内存空间 (代码、数据、进程空间、打开的文件) 和一个或多个线程组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;协程&lt;/strong&gt;，英文 Coroutines，是一种 &lt;code&gt;基于线程之上，但又比线程更加轻量级的存在&lt;/code&gt; ，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程和线程的区别与联系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【区别】：&lt;/p&gt;
&lt;p&gt;调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；&lt;/p&gt;
&lt;p&gt;并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；&lt;/p&gt;
&lt;p&gt;拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。&lt;/p&gt;
&lt;p&gt;系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。&lt;/p&gt;
&lt;p&gt;【联系】：&lt;/p&gt;
&lt;p&gt;一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；&lt;/p&gt;
&lt;p&gt;资源分配给进程，同一进程的所有线程共享该进程的所有资源；&lt;/p&gt;
&lt;p&gt;处理机分给线程，即真正在处理机上运行的是线程；&lt;/p&gt;
&lt;p&gt;线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。&lt;/p&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY1MzgxNzkxODc1MTA5&#34;&gt;# 一文搞懂进程、线程、协程及 JS 协程的发展&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy4zNjBkb2MuY29tL2NvbnRlbnQvMjAvMDQxNy8xNC8zMjE5NjUwN185MDY2Mjg4NTcuc2h0bWw=&#34;&gt;☞了解更多&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于浏览器传送门 ☞&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkzMDk1MzQ1NTc2MDgzNDg2&#34;&gt;# 深入了解现代 Web 浏览器&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-进程间的通信方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-进程间的通信方式&#34;&gt;#&lt;/a&gt; 23 进程间的通信方式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;进程通信&lt;/code&gt; ：&lt;br /&gt;
每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程 A 把数据从用户空间拷到内核缓冲区，进程 B 再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信。&lt;/p&gt;
&lt;p&gt;进程间的通信方式：管道、有名管道、信号、消息队列、共享内存、信号量、socket&lt;/p&gt;
&lt;p&gt;&lt;code&gt;匿名管道( pipe )&lt;/code&gt; ： 管道是一种半双工的通信方式，数据只能&lt;strong&gt;单向流动&lt;/strong&gt;，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指&lt;strong&gt;父子进程关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;高级管道(popen)&lt;/code&gt; ：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;有名管道 (named pipe) &lt;/code&gt; ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;消息队列( message queue )&lt;/code&gt;  ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;信号量( semophore )&lt;/code&gt;  ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;信号 ( sinal )&lt;/code&gt;  ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;共享内存( shared memory )&lt;/code&gt;  ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;套接字( socket ) 通信&lt;/code&gt; ： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信&lt;/p&gt;
&lt;h3 id=&#34;24-浏览器样式兼容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-浏览器样式兼容&#34;&gt;#&lt;/a&gt; 24 浏览器样式兼容&lt;/h3&gt;
&lt;h4 id=&#34;一-css初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-css初始化&#34;&gt;#&lt;/a&gt; 一、CSS 初始化&lt;/h4&gt;
&lt;p&gt;每个浏览器的 css 默认样式不尽相同，所以最简单有效的方式就是对其进行初始化（覆盖默认样式）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p margin:=&#34;&#34; 0;=&#34;&#34; padding:=&#34;&#34; 0;=&#34;&#34;&gt;常见 :  *&lt;/p&gt;
&lt;p&gt;库：normalize.css&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;二-浏览器私有属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-浏览器私有属性&#34;&gt;#&lt;/a&gt; 二、&lt;strong&gt;浏览器私有属性&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;常用的前缀有：&lt;/p&gt;
&lt;p&gt;firefox 浏览器 ：-moz-&lt;/p&gt;
&lt;p&gt;chrome、safari ：-webkit-&lt;/p&gt;
&lt;p&gt;opera ：-o- / -xv-&lt;/p&gt;
&lt;p&gt;IE 浏览器 ：-ms-（目前只有 IE 8 + 支持）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;三-css-hack条件hack-属性级hack-选择符级hack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-css-hack条件hack-属性级hack-选择符级hack&#34;&gt;#&lt;/a&gt; &lt;strong&gt;三、CSS hack（条件 hack、属性级 hack、选择符级 hack）&lt;/strong&gt;&lt;/h4&gt;
&lt;h3 id=&#34;25-js垃圾回收机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-js垃圾回收机制&#34;&gt;#&lt;/a&gt; 25 JS 垃圾回收机制&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;项目中，如果存在大量不被释放的内存（堆 / 栈 / 上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器垃圾回收机制 / 内存回收机制:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器的 &lt;code&gt;Javascript&lt;/code&gt;  具有自动垃圾回收机制 ( &lt;code&gt;GC:Garbage Collecation&lt;/code&gt; )，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;标记清除&lt;/strong&gt;：在 &lt;code&gt;js&lt;/code&gt;  中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为 “进入环境”，当变量离开执行环境时，会被标记为 “离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。&lt;br /&gt;
&lt;strong&gt;谷歌浏览器&lt;/strong&gt;：“查找引用”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收。&lt;br /&gt;
&lt;strong&gt;IE 浏览器&lt;/strong&gt;：“引用计数法”，当前内存被占用一次，计数累加 1 次，移除占用就减 1，减到 0 时，浏览器就回收它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化手段：内存优化；手动释放：取消内存的占用即可。&lt;/p&gt;
&lt;p&gt;（1）堆内存：fn = null 【null：空指针对象】&lt;/p&gt;
&lt;p&gt;（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存泄漏&lt;/p&gt;
&lt;p&gt;在 JS 中，常见的内存泄露主要有 4 种，全局变量、闭包、DOM 元素的引用、定时器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;计算机网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机网络&#34;&gt;#&lt;/a&gt; 计算机网络&lt;/h2&gt;
&lt;h3 id=&#34;http-的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-的基本概念&#34;&gt;#&lt;/a&gt; HTTP 的基本概念&lt;/h3&gt;
&lt;p&gt;http: 是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端 &lt;code&gt;请求和应答的标准（TCP）&lt;/code&gt; ，用于从 WWW 服务器传输超文本到本地浏览器的 &lt;code&gt;超文本传输协议&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;http工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http工作原理&#34;&gt;#&lt;/a&gt; HTTP 工作原理&lt;/h3&gt;
&lt;p&gt;HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。&lt;/p&gt;
&lt;h3 id=&#34;http请求响应的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http请求响应的步骤&#34;&gt;#&lt;/a&gt; HTTP 请求 / 响应的步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1. 客户端连接到 Web 服务器&lt;/li&gt;
&lt;li&gt;2. 发送 HTTP 请求&lt;/li&gt;
&lt;li&gt;3. 服务器接受请求并返回 HTTP 响应&lt;/li&gt;
&lt;li&gt;4. 释放 TCP 连接&lt;/li&gt;
&lt;li&gt;5. 客户端（浏览器）解析 HTML 内容&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：连接发送加响应，释放解析整过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;http-的-5-种方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-的-5-种方法&#34;&gt;#&lt;/a&gt; HTTP 的 5 种方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GET--- 获取资源&lt;/li&gt;
&lt;li&gt;POST--- 传输资源&lt;/li&gt;
&lt;li&gt;PUT--- 更新资源&lt;/li&gt;
&lt;li&gt;DELETE--- 删除资源&lt;/li&gt;
&lt;li&gt;HEAD--- 获取报文首部&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get与post的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get与post的区别&#34;&gt;#&lt;/a&gt; GET 与 POST 的区别&lt;/h3&gt;
&lt;p&gt;区别&lt;br /&gt;
面试时经常会被问到：请说说 GET 与 POST 的区别是什么？&lt;/p&gt;
&lt;p&gt;我们来看看 w3cshool 对于 GET 与 POST 的区别定义：&lt;/p&gt;
&lt;p&gt;GET 在浏览器回退时是无害的，而 POST 会再次提交请求。&lt;br /&gt;
GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。&lt;br /&gt;
GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。&lt;br /&gt;
GET 请求只能进行 url 编码，而 POST 支持多种编码方式。&lt;br /&gt;
GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。&lt;br /&gt;
GET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有。&lt;br /&gt;
对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。&lt;br /&gt;
GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。&lt;br /&gt;
GET 参数通过 URL 传递，POST 放在 Request body 中。&lt;br /&gt;
这或许是标准答案，但不一定是面试官想听到的答案。我们应该学会透过表象看本质，那么他们的本质有区别吗？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    答案是没有区别。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为什么这样说？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    其实GET和POST本质上时没有区别的，但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同，我们要知道，GET与POST是什么东西。

    在HTTP中定义了与服务器交互的不同方法，GET与POST便是其中两种。

    我们知道，HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。他的底层，是TCP/IP。所以GET与POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样的。你要给GET加上requestbody，给POST带上url参数，技术上是完全行的通的。但这就好像拿洗脸盆洗脚，拿洗脚盆洗脸一样，不是不可以，而是没有发挥其本来的作用，HTTP的每个方法都有着自己的作用。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，存在即合理，为什么要定义这么多种不同的方法呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    在HTTP中定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。所以说，这些方法本质上并没有区别，但是我们为其规定了区别，因为合理的分工，让每个方法都扮演着不同的角色，可以使其更加高效。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为什么要对 GET 和 POST 请求添加限制呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    大多数浏览器通常都会限制url长度在2K个字节，而大多数服务器最多处理64K大小的url。因为过大的数据量，会对服务器和浏览器产生不小的压力，消耗较多的资源，若有人心怀恶意，故意增加URL的长度来为服务器增加负担，所以为了性能和安全考虑，会给URL增加长度限制。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GET 和 POST 还有一个重大区别：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    GET产生一个TCP数据包；POST产生两个TCP数据包。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）。&lt;/p&gt;
&lt;p&gt;而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。&lt;/p&gt;
&lt;p&gt;误区：&lt;br /&gt;
误区一：get 安全性非常低，post 安全性较高&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    因为get的数据是直接体现在url里，而post是在requestbody中，所以直观看来get不安全。然而从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上抓包，就能完整地获取数据报文，要想安全传输，就只有加密，也就是 HTTPS。所以在没有使用HTTPS时，GET与POST都相当于裸奔，可以轻易获取。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;误区二：get 传送的数据量较小，不能大于 2KB。post 传送的数据量较大，一般被默认为不受限制。但理论上，IIS4 中最大量为 80KB，IIS5 中为 100KB。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    在上面提到过，GET与POST本质上是没有区别的。因为他们的底层都是TCP/IP协议，他们都是TCP连接，可以做的事情是一样的。其实http并没有body和url的长度限制，对url限制大多是浏览器和服务器的原因。数据量太大对浏览器和服务器都是很大负担，对服务器来说处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;http报文的组成成分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http报文的组成成分&#34;&gt;#&lt;/a&gt; HTTP 报文的组成成分&lt;/h3&gt;
&lt;p 状态行、响应头、空行、响应体=&#34;&#34;&gt;请求报文 {请求行、请求头、空行、请求体} 请求行：{http 方法、页面地址、http 协议、http 版本} 响应报文&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Request Header:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;GET /sample.Jsp HTTP/1.1&lt;/strong&gt;  // 请求行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host:&lt;/strong&gt;  www.uuid.online/// 请求的目标域名和端口号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Origin:&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgxLw==&#34;&gt;http://localhost:8081/&lt;/span&gt;  // 请求的来源域名和端口号 （跨域请求时，浏览器会自动带上这个头信息）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Referer:&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MS9saW5rP3F1ZXJ5PXh4eHh4&#34;&gt;https://localhost:8081/link?query=xxxxx&lt;/span&gt; // 请求资源的完整 URI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User-Agent:&lt;/strong&gt; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 // 浏览器信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cookie:&lt;/strong&gt;  BAIDUID=FA89F036:FG=1; BD_HOME=1; sugstore=0  // 当前域名下的 Cookie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accept:&lt;/strong&gt; text/html,image/apng  // 代表客户端希望接受的数据类型是 html 或者是 png 图片类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accept-Encoding:&lt;/strong&gt; gzip, deflate  // 代表客户端能支持 gzip 和 deflate 格式的压缩&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accept-Language:&lt;/strong&gt; zh-CN,zh;q=0.9  // 代表客户端可以支持语言 zh-CN 或者 zh (值得一提的是 q (0~1) 是优先级权重的意思，不写默认为 1，这里 zh-CN 是 1，zh 是 0.9)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connection:&lt;/strong&gt; keep-alive  // 告诉服务器，客户端需要的 tcp 连接是一个长连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Response Header:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HTTP/1.1 200 OK&lt;/strong&gt;  // 响应状态行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date:&lt;/strong&gt;  Mon, 30 Jul 2018 02:50:55 GMT  // 服务端发送资源时的服务器时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expires:&lt;/strong&gt;  Wed, 31 Dec 1969 23:59:59 GMT // 比较过时的一种验证缓存的方式，与浏览器（客户端）的时间比较，超过这个时间就不用缓存（不和服务器进行验证），适合版本比较稳定的网页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache-Control:&lt;/strong&gt;  no-cache  // 现在最多使用的控制缓存的方式，会和服务器进行缓存验证，具体见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYW1pZXpoYW5nL3AvOTM4OTUzNy5odG1s&#34;&gt;博文”Cache-Control“&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;etag:&lt;/strong&gt;  &amp;quot;fb8ba2f80b1d324bb997cbe188f28187-ssl-df&amp;quot;  // 一般是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy50MDg2LmNvbS9hcnRpY2xlLzUyMDc=&#34;&gt; Nginx 静态服务器&lt;/span&gt;发来的静态文件签名，浏览在没有 “Disabled cache” 情况下，接收到 etag 后，同一个 url 第二次请求就会自动带上 “If-None-Match”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Last-Modified:&lt;/strong&gt;  Fri, 27 Jul 2018 11:04:55 GMT // 是服务器发来的当前资源最后一次修改的时间，下次请求时，如果服务器上当前资源的修改时间大于这个时间，就返回新的资源内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content-Type:&lt;/strong&gt;  text/html; charset=utf-8  // 如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是 utf8 编码，否则可能出现乱码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content-Encoding:&lt;/strong&gt;  gzip  // 告诉客户端，应该采用 gzip 对资源进行解码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connection:&lt;/strong&gt;  keep-alive  // 告诉客户端服务器的 tcp 连接也是一个长连接&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;https-的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https-的基本概念&#34;&gt;#&lt;/a&gt; https 的基本概念&lt;/h3&gt;
&lt;p&gt;https: 是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。&lt;/p&gt;
&lt;p&gt;https 协议的作用：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。&lt;/p&gt;
&lt;h3 id=&#34;http-和-https-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-和-https-的区别&#34;&gt;#&lt;/a&gt; http 和 https 的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。&lt;/li&gt;
&lt;li&gt;Https 协议需要 ca 证书，费用较高。&lt;/li&gt;
&lt;li&gt;使用不同的链接方式，端口也不同，一般，http 协议的端口为 80，https 的端口为 443。&lt;/li&gt;
&lt;li&gt;http 的连接很简单，是无状态的。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：明文传输超文本，安全等级各不同。CA 证书费用高，无状连接端难同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;https-协议的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https-协议的工作原理&#34;&gt;#&lt;/a&gt; https 协议的工作原理&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/c42bc6f45451457fa6d614fb27534516~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端使用 https url 访问服务器，则要求 web 服务器 &lt;code&gt;建立 ssl 链接&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;web 服务器接收到客户端的请求之后，会 &lt;code&gt;将网站的证书（证书中包含了公钥），传输给客户端&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;客户端和 web 服务器端开始 &lt;code&gt;协商 SSL 链接的安全等级&lt;/code&gt; ，也就是加密等级。&lt;/li&gt;
&lt;li&gt;客户端浏览器通过双方协商一致的安全等级， &lt;code&gt;建立会话密钥&lt;/code&gt; ，然后通过网站的公钥来加密会话密钥，并传送给网站。&lt;/li&gt;
&lt;li&gt;web 服务器 &lt;code&gt;通过自己的私钥解密出会话密钥&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;web 服务器 &lt;code&gt;通过会话密钥加密与客户端之间的通信&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：一连二传三协商，四建五得六使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;https-协议的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https-协议的优缺点&#34;&gt;#&lt;/a&gt; https 协议的优缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HTTPS 协议要比 http 协议 &lt;code&gt;安全&lt;/code&gt; ，可防止数据在传输过程中被窃取、改变，确保数据的完整性。&lt;/li&gt;
&lt;li&gt;https 握手阶段比较 &lt;code&gt;费时&lt;/code&gt; ，会使页面加载时间延长 50%，增加 10%~20% 的耗电。&lt;/li&gt;
&lt;li&gt;https  &lt;code&gt;缓存&lt;/code&gt; 不如 http 高效，会增加数据开销。&lt;/li&gt;
&lt;li&gt;SSL 证书也需要钱，功能越强大的 &lt;code&gt;证书费&lt;/code&gt; 用越高。&lt;/li&gt;
&lt;li&gt;SSL 证书需要绑定  &lt;code&gt;IP&lt;/code&gt; ，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcpip网络模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpip网络模型&#34;&gt;#&lt;/a&gt; TCP/IP 网络模型&lt;/h3&gt;
&lt;p&gt;TCP/IP 模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链路层：负责封装和解封装 IP 报文，发送和接受 ARP/RARP 报文等。&lt;/li&gt;
&lt;li&gt;网络层：负责路由以及把分组报文发送给目标网络或主机。&lt;/li&gt;
&lt;li&gt;传输层：负责对报文进行分组和重组，并以 TCP 或 UDP 协议格式封装报文。&lt;/li&gt;
&lt;li&gt;应用层：负责向用户提供应用程序，比如 HTTP、FTP、Telnet、DNS、SMTP 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa80b3b48a84bd18d8e708c56a1dc22~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;tcp三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp三次握手&#34;&gt;#&lt;/a&gt; TCP 三次握手&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baf3d5df95a74f47a1d779ee50c3411f~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次握手： &lt;code&gt;建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认&lt;/code&gt; ；SYN：同步序列编号（Synchronize Sequence Numbers）。&lt;/li&gt;
&lt;li&gt;第二次握手： &lt;code&gt;服务器收到syn包并确认客户的SYN&lt;/code&gt; （ack=j+1）， &lt;code&gt;同时也发送一个自己的SYN包&lt;/code&gt; （syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；&lt;/li&gt;
&lt;li&gt;第三次握手： &lt;code&gt;客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）&lt;/code&gt; ，此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP 连接成功）状态，完成三次握手。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tcp-四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-四次挥手&#34;&gt;#&lt;/a&gt; TCP 四次挥手&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;客户端进程发出连接释放报文&lt;/code&gt; ，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为 seq=u（等于前面已经传送过来的数据的最后一个字节的序号加 1），此时，客户端进入 FIN-WAIT-1（终止等待 1）状态。 TCP 规定，FIN 报文段即使不携带数据，也要消耗一个序号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2） &lt;code&gt;服务器收到连接释放报文，发出确认报文&lt;/code&gt; ，ACK=1，ack=u+1，并且带上自己的序列号 seq=v，此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。TCP 服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。&lt;/p&gt;
&lt;p&gt;3）客户端收到服务器的确认请求后，此时，客户端就进入 FIN-WAIT-2（终止等待 2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。&lt;/p&gt;
&lt;p&gt;4） &lt;code&gt;服务器将最后的数据发送完毕后，就向客户端发送连接释放报文&lt;/code&gt; ，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq=w，此时，服务器就进入了 LAST-ACK（最后确认）状态，等待客户端的确认。&lt;/p&gt;
&lt;p&gt;5） &lt;code&gt;客户端收到服务器的连接释放报文后，必须发出确认&lt;/code&gt; ，ACK=1，ack=w+1，而自己的序列号是 seq=u+1，此时，客户端就进入了 TIME-WAIT（时间等待）状态。注意此时 TCP 连接还没有释放，必须经过 2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态。&lt;/p&gt;
&lt;p&gt;6）服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。可以看到，服务器结束 TCP 连接的时间要比客户端早一些。&lt;/p&gt;
&lt;h3 id=&#34;tcp和udp的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp和udp的区别&#34;&gt;#&lt;/a&gt; TCP 和 UDP 的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;TCP 是面向 &lt;code&gt;连接&lt;/code&gt; 的，而 UDP 是面向无连接的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 仅支持 &lt;code&gt;单播传输&lt;/code&gt; ，UDP 提供了单播，多播，广播的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 的三次握手保证了连接的 &lt;code&gt;可靠性&lt;/code&gt; ；UDP 是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP 的 &lt;code&gt;头部开销&lt;/code&gt; 比 TCP 的更小，数据 &lt;code&gt;传输速率更高&lt;/code&gt; ， &lt;code&gt;实时性更好&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;http-请求跨域问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-请求跨域问题&#34;&gt;#&lt;/a&gt; HTTP 请求跨域问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;跨域的原理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域&lt;/strong&gt;，是指浏览器不能执行其他网站的脚本。它是由浏览器的 &lt;code&gt;同源策略&lt;/code&gt; 造成的。&lt;br /&gt;
&lt;strong&gt;同源策略&lt;/strong&gt;，是浏览器对 JavaScript 实施的安全限制，只要 &lt;code&gt;协议、域名、端口&lt;/code&gt; 有任何一个不同，都被当作是不同的域。&lt;br /&gt;
&lt;strong&gt;跨域原理&lt;/strong&gt;，即是通过各种方式， &lt;code&gt;避开浏览器的安全限制&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;p&gt;最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JSONP&lt;/strong&gt;：&lt;br /&gt;
ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去创建一个 script 标签&lt;/li&gt;
&lt;li&gt;script 的 src 属性设置接口地址&lt;/li&gt;
&lt;li&gt;接口参数，必须要带一个自定义函数名，要不然后台无法返回数据&lt;/li&gt;
&lt;li&gt;通过定义函数名去接受返回的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 动态创建 script&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; script &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置回调函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置 script 的 src 属性，并设置请求地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;script&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://localhost:3000/?callback=getData&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 让 script 生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;script&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;JSONP 的缺点&lt;/strong&gt;:&lt;br /&gt;
JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;document.domain&lt;/strong&gt;  基础域名相同 子域名不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dpbmRvdy5uYW1l&#34;&gt;window.name&lt;/span&gt;&lt;/strong&gt; 利用在一个浏览器窗口内，载入所有的域名都是共享一个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dpbmRvdy5uYW1l&#34;&gt;window.name&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CORS&lt;/strong&gt; CORS (Cross-origin resource sharing) 跨域资源共享 服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;proxy 代理&lt;/strong&gt; 目前常用方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;window.postMessage()&lt;/strong&gt;  利用 h5 新特性 window.postMessage ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Websocket&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cookie-sessionstorage-localstorage-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie-sessionstorage-localstorage-的区别&#34;&gt;#&lt;/a&gt; Cookie、sessionStorage、localStorage 的区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;相同点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储在客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不同点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie 数据大小不能超过 4k；sessionStorage 和 localStorage 的存储比 cookie 大得多，可以达到 5M+&lt;/li&gt;
&lt;li&gt;cookie 设置的过期时间之前一直有效；localStorage 永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage 数据在当前浏览器窗口关闭后自动删除&lt;/li&gt;
&lt;li&gt;cookie 的数据会自动的传递到服务器；sessionStorage 和 localStorage 数据保存在本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http状态码及常见状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态码及常见状态码&#34;&gt;#&lt;/a&gt; HTTP 状态码及常见状态码&lt;/h3&gt;
&lt;h4 id=&#34;http状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态码&#34;&gt;#&lt;/a&gt; HTTP 状态码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1xx：指示信息类，表示请求已接受，继续处理&lt;/li&gt;
&lt;li&gt;2xx：指示成功类，表示请求已成功接受&lt;/li&gt;
&lt;li&gt;3xx：指示重定向，表示要完成请求必须进行更近一步的操作&lt;/li&gt;
&lt;li&gt;4xx：指示客户端错误，请求有语法错误或请求无法实现&lt;/li&gt;
&lt;li&gt;5xx：指示服务器错误，服务器未能实现合法的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见状态码&#34;&gt;#&lt;/a&gt; 常见状态码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;200 OK：客户端请求成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;301 Moved Permanently：所请求的页面已经永久重定向至新的 URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;302 Found：所请求的页面已经临时重定向至新的 URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;304 Not Modified 未修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;403 Forbidden：对请求页面的访问被禁止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;404 Not Found：请求资源不存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100 - 继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分&lt;/li&gt;
&lt;li&gt;101 - 切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2xx（成功）表示成功处理了请求的状态码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;200&lt;/code&gt;  - 成功 服务器已经成功处理了请求。通常，这表示服务器提供了请求的网页&lt;/li&gt;
&lt;li&gt;201 - 已创建 请求成功并且服务器创建了新的资源&lt;/li&gt;
&lt;li&gt;202 - 已接受 服务器已接受请求，但尚未处理&lt;/li&gt;
&lt;li&gt;203 - 非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源&lt;/li&gt;
&lt;li&gt;204 - 无内容 服务器成功处理了请求，但没有返回任何内容&lt;/li&gt;
&lt;li&gt;205 - 重置内容 服务器成功处理了请求，但没有返回任何内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3xx（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;300 - 多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;301&lt;/code&gt;  - 永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;302&lt;/code&gt;  - 临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求&lt;/li&gt;
&lt;li&gt;303 - 查看其它位置 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;304&lt;/code&gt;  - 未修改 自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容&lt;/li&gt;
&lt;li&gt;305 - 使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;307&lt;/code&gt;  - 临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;400&lt;/code&gt;  - 错误请求 服务器不理解请求的语法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;401&lt;/code&gt;  - 未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;403&lt;/code&gt;  - 禁止 服务器拒绝请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;404&lt;/code&gt;  - 未找到 服务器找不到请求的网页&lt;/li&gt;
&lt;li&gt;405 - 方法禁用 禁用请求中指定的方法&lt;/li&gt;
&lt;li&gt;406 - 不接受 无法使用请求的内容特性响应请求的网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;407&lt;/code&gt;  - 需要代理授权 此状态码与 401（未授权）类似，但指定请求者应当授权使用代理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;408&lt;/code&gt;  - 请求超时 服务器等候请求时发生超时&lt;/li&gt;
&lt;li&gt;410 - 已删除 如果请求的资源已永久删除，服务器就会返回此响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;413&lt;/code&gt;  - 请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力&lt;/li&gt;
&lt;li&gt;&lt;code&gt;414&lt;/code&gt;  - 请求的 URI 过长 请求的 URI（通常为网址）过长，服务器无法处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5xx（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;500&lt;/code&gt;  - 服务器内部错误 服务器遇到错误，无法完成请求&lt;/li&gt;
&lt;li&gt;501 - 尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;502&lt;/code&gt;  - 错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;503&lt;/code&gt;  - 服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;504&lt;/code&gt;  - 网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求&lt;/li&gt;
&lt;li&gt;505 - HTTP 版本不受支持 服务器不支持请求中所用的 HTTP 协议版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介绍下304过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍下304过程&#34;&gt;#&lt;/a&gt; 介绍下 304 过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;#&lt;/a&gt; 浏览器的缓存机制 强制缓存 &amp;amp;&amp;amp; 协商缓存&lt;/h3&gt;
&lt;p&gt;浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/05b3fe9c411f4881a8b22fe37eae170b~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;图片&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上图我们可以知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器每次发起请求，都会 &lt;code&gt;先在浏览器缓存中查找该请求的结果以及缓存标识&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浏览器每次拿到返回的请求结果都会 &lt;code&gt;将该结果和缓存标识存入浏览器缓存中&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 &lt;code&gt;强制缓存&lt;/code&gt; 和 &lt;code&gt;协商缓存&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。&lt;/code&gt; 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  &lt;code&gt;Expires&lt;/code&gt;  和  &lt;code&gt;Cache-Control&lt;/code&gt; ，其中 Cache-Control 优先级比 Expires 高。&lt;/p&gt;
&lt;p&gt;强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协商缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程&lt;/code&gt; ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： &lt;code&gt;Last-Modified / If-Modified-Since&lt;/code&gt;  和  &lt;code&gt;Etag / If-None-Match&lt;/code&gt; ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协商缓存生效，返回 304&lt;/li&gt;
&lt;li&gt;协商缓存失效，返回 200 和请求结果结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/5e0ce991db4847b98d9f049f9ffa5c93~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx&#34;&gt;# 彻底理解浏览器的缓存机制&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;http-请求跨域问题-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-请求跨域问题-2&#34;&gt;#&lt;/a&gt; HTTP 请求跨域问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;跨域的原理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域&lt;/strong&gt;，是指浏览器不能执行其他网站的脚本。它是由浏览器的 &lt;code&gt;同源策略&lt;/code&gt; 造成的。跨域访问是被各大浏览器所默认禁止的。&lt;br /&gt;
&lt;strong&gt;同源策略&lt;/strong&gt;，是浏览器对 JavaScript 实施的安全限制，只要 &lt;code&gt;协议、域名、端口&lt;/code&gt; 有任何一个不同，都被当作是不同的域。&lt;br /&gt;
&lt;strong&gt;跨域原理&lt;/strong&gt;，即是通过各种方式， &lt;code&gt;避开浏览器的安全限制&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;p&gt;最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JSONP&lt;/strong&gt;：&lt;br /&gt;
ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去创建一个 script 标签&lt;/li&gt;
&lt;li&gt;script 的 src 属性设置接口地址&lt;/li&gt;
&lt;li&gt;接口参数，必须要带一个自定义函数名，要不然后台无法返回数据&lt;/li&gt;
&lt;li&gt;通过定义函数名去接受返回的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 动态创建 script&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; script &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置回调函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置 script 的 src 属性，并设置请求地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;script&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://localhost:3000/?callback=getData&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 让 script 生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;script&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;JSONP 的缺点&lt;/strong&gt;:&lt;br /&gt;
JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;document.domain&lt;/strong&gt; 基础域名相同 子域名不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dpbmRvdy5uYW1l&#34;&gt;window.name&lt;/span&gt;&lt;/strong&gt; 利用在一个浏览器窗口内，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS13aW5kb3ctOW03aWdsMjNibzhwMWQ4MTZhaW1uMW05YXdsbXVqZDV5OWd6NjdldzdmLm5hbWU=&#34;&gt;载入所有的域名都是共享一个 window.name&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;br /&gt;
CORS (Cross-origin resource sharing) 跨域资源共享 是一种机制，是目前主流的跨域解决方案，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求&lt;/p&gt;
&lt;p&gt;1. 浏览器端会自动向请求头添加 origin 字段，表明当前请求来源。&lt;br /&gt;
2. 服务器设置 Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers 等 HTTP 响应头字段之后，浏览器将会允许跨域请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预检&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是还有复杂一点的请求，我们需要先发 OPTIONS 请求，a.com 想请求 b.com 它需要发一个自定义的 Headers：X-ABC 和 content-type，这个时候就不是简单请求了， &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2EueG4tLWNvbWItMjk1azQxNGMuY29t&#34;&gt;a.com 要给 b.com&lt;/span&gt; 发一个 options 请求，它其实在问 b.com 我用 post 行不行，还想在 Headers 中带 X-ABC 和 content-type；并不是所有的 headers 都发这个 OPTIONS 请求，因为 X-ABC 是自定义的，所以需要发；b.com 看到 OPTIONS 请求，先不会返回数据，先检查自己的策略，看看能不能支持这次请求，如果支持就返回 200。&lt;/p&gt;
&lt;p&gt;OPTIONS 请求返回以下报文&lt;/p&gt;
&lt;p&gt;HTTP/2.0 20 OK&lt;br /&gt;
Access-Control-Allow-Origin:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hLmNvbQ==&#34;&gt;https://a.com&lt;/span&gt;&lt;br /&gt;
Access-Control-Allow-Methods:POST,GET,OPTIONS&lt;br /&gt;
Access-Control-Allow-Headers:X-ABC,Content-Type&lt;br /&gt;
Access-Control-Max-Age:86400 // 告诉浏览器这个策略生效时间为一个小时，在一个小时之内发送类似的请求，不用在问服务端了，相当于缓存了&lt;br /&gt;
浏览器收到了 OPTIONS 的返回，会在发一次，这一次才是真正的请求数据，这次 headers 会带上 X-ABC、contentType。&lt;/p&gt;
&lt;p&gt;整体的过程 cors 将请求分为 2 种，简单请求和复杂请求，需不需要发送 OPTIONS 浏览器说的算，浏览器判断是简单请求还是复杂请求，cors 是非常广泛的跨域手段 这里的缺点是 OPTIONS 请求也是一次请求，消耗带宽，真正的请求也会延迟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最方便的跨域方案 &lt;strong&gt;proxy 代理 + Nginx&lt;/strong&gt;&lt;br /&gt;
nginx 是一款极其强大的 web 服务器，其优点就是轻量级、启动快、高并发。&lt;/p&gt;
&lt;p&gt;跨域问题的产生是因为浏览器的同源政策造成的，但是服务器与服务器之间的数据交换是没有这个限制。&lt;/p&gt;
&lt;p&gt;反向代理就是采用这种方式，建立一个虚拟的代理服务器来接收 internet 上的链接请求，然后转发给内部网络上的服务器，并将从服务器上得到的结果，返回给 internet 上请求链接的客户端。现在的新项目中 nginx 几乎是首选，我们用 node 或者 java 开发的服务通常都需要经过 nginx 的反向代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;window.postMessage()&lt;/strong&gt; 利用 h5 新特性 window.postMessage ()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;跨域传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAzMjMyNzY5MTgyNTQ3OTk4&#34;&gt;# 跨域，不可不知的基础概念&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;观看记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#观看记录&#34;&gt;#&lt;/a&gt; ！！！！！！观看记录！！！！！！！！&lt;/h3&gt;
&lt;h3 id=&#34;粘包问题分析与对策&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#粘包问题分析与对策&#34;&gt;#&lt;/a&gt; 粘包问题分析与对策&lt;/h3&gt;
&lt;p&gt;TCP 粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;粘包出现原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单得说，在流传输中出现，UDP 不会出现粘包，因为它有&lt;strong&gt;消息边界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;粘包情况有两种，一种是 &lt;code&gt;粘在一起的包都是完整的数据包&lt;/code&gt; ，另一种情况是 &lt;code&gt;粘在一起的包有不完整的包&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;为了&lt;strong&gt;避免粘包&lt;/strong&gt;现象，可采取以下几种措施：&lt;/p&gt;
&lt;p&gt;（1）对于发送方引起的粘包现象，用户可通过编程设置来避免， &lt;code&gt;TCP提供了强制数据立即传送的操作指令push&lt;/code&gt; ，TCP 软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；&lt;/p&gt;
&lt;p&gt;（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、 &lt;code&gt;提高接收进程优先级等措施&lt;/code&gt; ，使其及时接收数据，从而尽量避免出现粘包现象；&lt;/p&gt;
&lt;p&gt;（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。 &lt;code&gt;分包多发&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以上提到的三种措施，都有其不足之处。&lt;/p&gt;
&lt;p&gt;（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。&lt;/p&gt;
&lt;p&gt;（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。&lt;/p&gt;
&lt;p&gt;（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;客户端与服务端长连接的几种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端与服务端长连接的几种方式&#34;&gt;#&lt;/a&gt; 客户端与服务端长连接的几种方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ajax 轮询&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;实现原理&lt;/strong&gt;：ajax 轮询指客户端每间隔一段时间向服务端发起请求，保持数据的同步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：可实现基础（指间隔时间较短）的数据更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：这种方法也只是尽量的模拟即时传输，但并非真正意义上的即时通讯，很有可能出现客户端请求时，服务端数据并未更新。或者服务端数据已更新，但客户端未发起请求。导致多次请求资源浪费，效率低下。【 &lt;code&gt;数据更新不及时，效率低下&lt;/code&gt; 】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;long poll 长轮询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;/strong&gt;：&lt;br /&gt;
long poll 指的是客户端发送请求之后，如果没有数据返回，服务端会将请求挂起放入队列（不断开连接）处理其他请求，直到有数据返回给客户端。然后客户端再次发起请求，以此轮询。在 HTTP1.0 中客户端可以设置请求头 Connection:keep-alive，服务端收到该请求头之后知道这是一个长连接，在响应报文头中也添加 Connection:keep-alive。客户端收到之后表示长连接建立完成，可以继续发送其他的请求。在 HTTP1.1 中默认使用了 Connection:keep-alive 长连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：减少客户端的请求，降低无效的网络传输，保证每次请求都有数据返回，不会一直占用线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：无法处理高并发，当客户端请求量大，请求频繁时对服务器的处理能力要求较高。服务器一直保持连接会消耗资源，需要同时维护多个线程，服务器所能承载的 TCP 连接数是有上限的，这种轮询很容易把连接数顶满。每次通讯都需要客户端发起，服务端不能主动推送。【 &lt;code&gt;无法处理高并发，消耗服务器资源严重，服务端不能主动推送&lt;/code&gt; 】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;iframe 长连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理：&lt;/strong&gt;&lt;br /&gt;
在网页上嵌入一个 iframe 标签，该标签的 src 属性指向一个长连接请求。这样服务端就可以源源不断地给客户端传输信息。保障信息实时更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：消息及时传输。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;： &lt;code&gt;消耗服务器资源&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;/strong&gt;：&lt;br /&gt;
Websocket 实现了客户端与服务端的双向通信，只需要连接一次，就可以相互传输数据，很适合实时通讯、数据实时更新等场景。&lt;/p&gt;
&lt;p&gt;Websocket 协议与 HTTP 协议没有关系，它是一个建立在 TCP 协议上的全新协议，为了兼容 HTTP 握手规范，在握手阶段依然使用 HTTP 协议，握手完成之后，数据通过 TCP 通道进行传输。&lt;/p&gt;
&lt;p&gt;Websoket 数据传输是通过 frame 形式，一个消息可以分成几个片段传输。这样大数据可以分成一些小片段进行传输，不用考虑由于数据量大导致标志位不够的情况。也可以边生成数据边传递消息，提高传输效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;br /&gt;
双向通信。客户端和服务端双方都可以主动发起通讯。&lt;br /&gt;
没有同源限制。客户端可以与任意服务端通信，不存在跨域问题。&lt;br /&gt;
数据量轻。第一次连接时需要携带请求头，后面数据通信都不需要带请求头，减少了请求头的负荷。&lt;br /&gt;
传输效率高。因为只需要一次连接，所以数据传输效率高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;br /&gt;
长连接需要后端处理业务的代码更稳定，推送消息相对复杂；&lt;br /&gt;
长连接受网络限制比较大，需要处理好重连。&lt;br /&gt;
兼容性，WebSocket 只支持 IE10 及其以上版本。&lt;br /&gt;
服务器长期维护长连接需要一定的成本，各个浏览器支持程度不一；&lt;br /&gt;
成熟的 HTTP 生态下有大量的组件可以复用，WebSocket 则没有，遇到异常问题难以快速定位快速解决。【需要后端代码稳定，受网络限制大，兼容性差，维护成本高，生态圈小】&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;利用socket建立网络连接的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用socket建立网络连接的步骤&#34;&gt;#&lt;/a&gt; 利用 Socket 建立网络连接的步骤&lt;/h3&gt;
&lt;p&gt;建立 Socket 连接至少需要一对套接字，其中一个运行于客户端，称为 ClientSocket ，另一个运行于服务器端，称为 ServerSocket 。&lt;/p&gt;
&lt;p&gt;套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。&lt;/p&gt;
&lt;p&gt;1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。&lt;/p&gt;
&lt;p&gt;2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。&lt;/p&gt;
&lt;p&gt;为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。&lt;/p&gt;
&lt;p&gt;3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。&lt;/p&gt;
&lt;p&gt;而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。&lt;/p&gt;
&lt;h3 id=&#34;非对称加密rsa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非对称加密rsa&#34;&gt;#&lt;/a&gt; 非对称加密 RSA&lt;/h3&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对称加密算法又称现代加密算法。&lt;/li&gt;
&lt;li&gt;非对称加密是计算机通信安全的基石，保证了加密数据不会被破解。&lt;/li&gt;
&lt;li&gt;非对称加密算法需要两个密钥：公开密钥 (publickey) 和私有密 (privatekey)&lt;/li&gt;
&lt;li&gt;公开密钥和私有密钥是一对&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。 &lt;br /&gt;
如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。&lt;/p&gt;
&lt;p&gt;特点： &lt;br /&gt;
算法强度复杂，安全性依赖于算法与密钥。 &lt;br /&gt;
加密解密速度慢。&lt;/p&gt;
&lt;p&gt;与对称加密算法的对比： &lt;br /&gt;
对称加密只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。 &lt;br /&gt;
非对称加密有两种密钥，其中一个是公开的。&lt;/p&gt;
&lt;p&gt;RSA 应用场景： &lt;br /&gt;
由于 RSA 算法的加密解密速度要比对称算法速度慢很多，在实际应用中，通常采取 &lt;br /&gt;
数据本身的加密和解密使用对称加密算法 (AES)。 用 RSA 算法加密并传输对称算法所需的密钥。&lt;/p&gt;
&lt;h3 id=&#34;http1-http2-http3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http1-http2-http3&#34;&gt;#&lt;/a&gt; HTTP1、HTTP2、HTTP3&lt;/h3&gt;
&lt;p&gt;HTTP/2 相比于 HTTP/1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，虽如此但 HTTP/2 并非完美的，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。&lt;/p&gt;
&lt;h3 id=&#34;http11-的缺陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http11-的缺陷&#34;&gt;#&lt;/a&gt; &lt;strong&gt;HTTP1.1 的缺陷&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;高延迟 — 队头阻塞 (Head-Of-Line Blocking)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;队头阻塞&lt;/code&gt; 是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。&lt;/p&gt;
&lt;p&gt;针对队头阻塞的解决办法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;将同一页面的资源分散到不同域名下，提升连接上限&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;合并小文件减少资源数&lt;/code&gt; ，使用精灵图。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;内联(Inlining)资源&lt;/code&gt; 是另外一种防止发送很多小图请求的技巧，将图片的原始数据嵌入在 CSS 文件里面的 URL 里，减少网络请求次数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;减少请求数量&lt;/code&gt; ，合并文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无状态特性 — 阻碍交互&lt;/p&gt;
&lt;p&gt;&lt;code&gt;无状态是指协议对于连接状态没有记忆能力&lt;/code&gt; 。纯净的 HTTP 是没有 cookie 等机制的，每一个连接都是一个新的连接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Header里携带的内容过大，在一定程度上增加了传输的成本&lt;/code&gt; 。且请求响应报文里有大量字段值都是重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;明文传输 — 不安全性&lt;/p&gt;
&lt;p&gt;HTTP/1.1 在传输数据时，所有 &lt;code&gt;传输的内容都是明文&lt;/code&gt; ，客户端和服务器端都无法验证对方的身份，无法保证数据的安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不支持服务端推送&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：队头阻塞高延迟，无状态阻交互，明文传输不安全，服务推送不支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTTP 1.1 排队问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP 1.1 多个文件共用一个 TCP，这样可以减少 tcp 握手，这样 3 个文件就不用握手 9 次了，不过这样请求文件需要排队，请求和返回都需要排队， 如果第一个文件响应慢，会阻塞后面的文件，这样就产生了对头的等待问题。&lt;/p&gt;
&lt;p&gt;有的网站可能会有很多文件，浏览器处于对机器性能的考虑，它不可能让你无限制的发请求建连接，因为建立连接需要占用资源，浏览器不想把用户的网络资源都占用了，所以浏览器最多会建立 6 个 tcp 连接；如果有上百个文件可能都需要排队，http2.0 正在解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ecdc60670194df7957ee59e1f56701f~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;spdy-协议与-http2-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spdy-协议与-http2-简介&#34;&gt;#&lt;/a&gt; SPDY 协议与 HTTP/2 简介&lt;/h3&gt;
&lt;h4 id=&#34;1-http2-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-http2-简介&#34;&gt;#&lt;/a&gt; 1、HTTP/2 简介&lt;/h4&gt;
&lt;p&gt;HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写。&lt;strong&gt;HTTP/2 基于 SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）&lt;/strong&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;2-http2-新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-http2-新特性&#34;&gt;#&lt;/a&gt; 2、HTTP/2 新特性&lt;/h4&gt;
&lt;h4 id=&#34;1-二进制传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-二进制传输&#34;&gt;#&lt;/a&gt; 1、二进制传输&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;HTTP/2传输数据量的大幅减少,主要有两个原因:以二进制方式传输和Header 压缩&lt;/code&gt; 。我们先来介绍二进制传输，HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。 &lt;code&gt;HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;2-header-压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-header-压缩&#34;&gt;#&lt;/a&gt; 2、Header 压缩&lt;/h4&gt;
&lt;p&gt;HTTP/2 并没有使用传统的压缩算法，而是开发了专门的 &amp;quot;HPACK” 算法，在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。&lt;/p&gt;
&lt;h4 id=&#34;3-多路复用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-多路复用&#34;&gt;#&lt;/a&gt; 3、多路复用&lt;/h4&gt;
&lt;p&gt;在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/f756ad3403bc4fe18e970c56677c796e~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-server-push&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-server-push&#34;&gt;#&lt;/a&gt; 4、Server Push&lt;/h4&gt;
&lt;p&gt;HTTP2 还在一定程度上改变了传统的 “请求 - 应答” 工作模式，服务器不再是完全被动地响应请求，也可以新建 “流” 主动向客户端发送消息。减少等待的延迟，这被称为 &amp;quot; &lt;code&gt;服务器推送&lt;/code&gt;  &amp;quot;（ Server Push，也叫 Cache push）&lt;/p&gt;
&lt;h4 id=&#34;5-提高安全性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-提高安全性&#34;&gt;#&lt;/a&gt; 5、提高安全性&lt;/h4&gt;
&lt;p&gt;出于兼容的考虑，HTTP/2 延续了 HTTP/1 的 “明文” 特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密。&lt;/p&gt;
&lt;p&gt;但由于 HTTPS 已经是大势所趋，而且主流的浏览器 Chrome、Firefox 等都公开宣布只支持加密的 HTTP/2，&lt;strong&gt;所以 “事实上” 的 HTTP/2 是加密的&lt;/strong&gt;。也就是说，互联网上通常所能见到的 HTTP/2 都是使用 &amp;quot;https” 协议名，跑在 TLS 上面。HTTP/2 协议定义了两个字符串标识符：“h2&amp;quot; 表示加密的 HTTP/2，“h2c” 表示明文的 HTTP/2。&lt;/p&gt;
&lt;h4 id=&#34;6-防止对头阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-防止对头阻塞&#34;&gt;#&lt;/a&gt; 6、防止对头阻塞&lt;/h4&gt;
&lt;p&gt;http1.1 如果第一个文件阻塞，第二个文件也就阻塞了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/b67bd1f793a3425d9e8a415cae9b7863~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;http2.0 的解决，把 3 个请求打包成一个小块发送过去，即使第一个阻塞了，后面 2 个也可以回来；相当于 3 个文件同时请求，就看谁先回来谁后回来，阻塞的可能就后回来，对带宽的利用是最高的；但没有解决 TCP 的对头阻塞，如果 TCP 发过去的一个分包发丢了，他会重新发一次；http2.0 的解决了大文件的阻塞。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77d8ae8e0de44f3aa693f0626a346d4c~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一个分包请求 3 个文件，即使第一个阻塞了，第二个也能返回&lt;/p&gt;
&lt;h3 id=&#34;http2-的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http2-的缺点&#34;&gt;#&lt;/a&gt; HTTP/2 的缺点&lt;/h3&gt;
&lt;p&gt;虽然 HTTP/2 解决了很多之前旧版本的问题，但它还是存在一个巨大的问题，&lt;strong&gt;主要是底层支撑的 TCP 协议造成的&lt;/strong&gt;。HTTP/2 的缺点主要有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TCP 以及 TCP+TLS 建立连接时延时&lt;/li&gt;
&lt;li&gt;TCP 的队头阻塞并没有彻底解决&lt;/li&gt;
&lt;li&gt;多路复用导致服务器压力上升也容易 Timeout&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;http3-新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http3-新特性&#34;&gt;#&lt;/a&gt; HTTP/3 新特性&lt;/h3&gt;
&lt;h4 id=&#34;1-http3简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-http3简介&#34;&gt;#&lt;/a&gt; 1、HTTP/3 简介&lt;/h4&gt;
&lt;p&gt;Google 在推 SPDY 的时候就搞了个基于 UDP 协议的 “QUIC” 协议，让 HTTP 跑在 QUIC 上而不是 TCP 上。而 “HTTP over QUIC” 就是 HTTP/3，真正 “完美” 地解决了 “队头阻塞” 问题。&lt;/p&gt;
&lt;p&gt;QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。&lt;/p&gt;
&lt;h4 id=&#34;2-quic新功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-quic新功能&#34;&gt;#&lt;/a&gt; 2、QUIC 新功能&lt;/h4&gt;
&lt;p&gt;QUIC 基于 UDP，而 UDP 是 “无连接” 的，根本就不需要 “握手” 和 “挥手”，所以就比 TCP 来得快。此外 QUIC 也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似 HTTP/2 的 “流” 和 “多路复用”，单个 “流 &amp;quot; 是有序的，可能会因为丢包而阻塞，但其他 “流” 不会受到影响。具体来说 QUIC 协议有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现了类似 TCP 的流量控制、传输可靠性的功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现了快速握手功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。&lt;strong&gt;0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集成了 TLS 加密功能&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多路复用，彻底解决 TCP 中队头阻塞的问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和 TCP 不同，QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流。实现了数据流的单独传输，就解决了 TCP 中队头阻塞的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接迁移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP 是按照 4 要素（客户端 IP、端口，服务器 IP、端口）确定一个连接的。而 QUIC 则是让客户端生成一个 Connection ID （64 位）来区别不同连接。只要 Connection ID 不变，连接就不需要重新建立，即便是客户端的网络发生变化。由于迁移客户端继续使用相同的会话密钥来加密和解密数据包，QUIC 还提供了迁移客户端的自动加密验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/1.1 有两个主要的缺点：安全不足和性能不高。&lt;/li&gt;
&lt;li&gt;HTTP/2 完全兼容 HTTP/1，是 “更安全的 HTTP、更快的 HTTPS&amp;quot;，二进制传输、头部压缩、多路复用、服务器推送等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；&lt;/li&gt;
&lt;li&gt;QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;理解xsscsrfddos攻击原理以及避免方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理解xsscsrfddos攻击原理以及避免方式&#34;&gt;#&lt;/a&gt; 理解 xss，csrf，ddos 攻击原理以及避免方式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;XSS&lt;/code&gt; ( &lt;code&gt;Cross-Site Scripting&lt;/code&gt; ，&lt;strong&gt;跨站脚本攻击&lt;/strong&gt;) 是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取  &lt;code&gt;cookie，session tokens&lt;/code&gt; ，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CSRF&lt;/code&gt; （ &lt;code&gt;Cross-site request forgery&lt;/code&gt; ）&lt;strong&gt;跨站请求伪造&lt;/strong&gt;：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XSS 避免方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;  参数使用 &lt;code&gt;encodeURIComponent&lt;/code&gt;  方法转义&lt;/li&gt;
&lt;li&gt;尽量不是有 &lt;code&gt;InnerHtml&lt;/code&gt;  插入 &lt;code&gt;HTML&lt;/code&gt;  内容&lt;/li&gt;
&lt;li&gt;使用特殊符号、标签转义符。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;CSRF&lt;/code&gt;  避免方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加验证码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 token&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端给用户生成一个 token，加密后传递给用户&lt;/li&gt;
&lt;li&gt;用户在提交请求时，需要携带这个 token&lt;/li&gt;
&lt;li&gt;服务端验证 token 是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;DDoS&lt;/code&gt;  又叫分布式拒绝服务，全称  &lt;code&gt;Distributed Denial of Service&lt;/code&gt; ，其原理就是利用大量的请求造成资源过载，导致服务不可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;DDos&lt;/code&gt;  避免方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;限制单 IP 请求频率。&lt;/li&gt;
&lt;li&gt;防火墙等防护设置禁止 &lt;code&gt;ICMP&lt;/code&gt;  包等&lt;/li&gt;
&lt;li&gt;检查特权端口的开放&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXprek56STBNRE14TlE9PSZhbXA7bWlkPTIyNDc0ODcxMTYmYW1wO2lkeD0xJmFtcDtzbj0wOTE4N2VlYjdlNDVmYWExYmVlODZmZjQ4YWUxNGJlMSZhbXA7c291cmNlPTQxI3dlY2hhdF9yZWRpcmVjdA==&#34;&gt;360 技术：嗨，送你一张 Web 性能优化地图&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <updated>2024-03-02T02:52:21.681Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/06.TypeScript/</id>
        <title>TypeScript</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/06.TypeScript/"/>
        <content type="html">&lt;p&gt;1、什么是 TypeScript？&lt;br /&gt;
TypeScript 是 JavaScript 的加强版，它给 JavaScript 添加了可选的静态类型和基于类的面向对象编程，它拓展了 JavaScript 的语法。&lt;/p&gt;
&lt;p&gt;而且 TypeScript 不存在跟浏览器不兼容的问题，因为在编译时，它产生的都是 JavaScript 代码。&lt;/p&gt;
&lt;p&gt;2、TypeScript 和 JavaScript 的区别是什么？&lt;br /&gt;
Typescript 是 JavaScript 的超集，可以被编译成 JavaScript 代码。 用 JavaScript 编写的合法代码，在 TypeScript 中依然有效。Typescript 是纯面向对象的编程语言，包含类和接口的概念。 程序员可以用它来编写面向对象的服务端或客户端程序，并将它们编译成 JavaScript 代码。&lt;/p&gt;
&lt;p&gt;TypeScript 和 JavaScript 的关系&lt;br /&gt;
 TypeScript 引入了很多面向对象程序设计的特征，包括：&lt;/p&gt;
&lt;p&gt;interfaces  接口&lt;br /&gt;
 classes  类&lt;br /&gt;
 enumerated types 枚举类型&lt;br /&gt;
 generics 泛型&lt;br /&gt;
 modules 模块&lt;br /&gt;
主要不同点如下：&lt;br /&gt;
TS 是一种面向对象编程语言，而 JS 是一种脚本语言（尽管 JS 是基于对象的）。&lt;br /&gt;
TS 支持可选参数， JS 则不支持该特性。&lt;br /&gt;
TS 支持静态类型，JS 不支持。&lt;br /&gt;
TS 支持接口，JS 不支持接口。&lt;/p&gt;
&lt;p&gt;3 为什么要用 TypeScript ？&lt;br /&gt;
TS 在开发时就能给出编译错误， 而 JS 错误则需要在运行时才能暴露。&lt;br /&gt;
作为强类型语言，你可以明确知道数据的类型。代码可读性极强，几乎每个人都能理解。&lt;br /&gt;
TS 非常流行，被很多业界大佬使用。像 Asana、Circle CI 和 Slack 这些公司都在用 TS。&lt;/p&gt;
&lt;p&gt;4、TypeScript 和 JavaScript 哪个更好？&lt;br /&gt;
由于 TS 的先天优势，TS 越来越受欢迎。但是 TS 最终不可能取代 JS，因为 JS 是 TS 的核心。&lt;/p&gt;
&lt;p&gt;选择 TypeScript 还是 JavaScript 要由开发者自己去做决定。如果你喜欢类型安全的语言，那么推荐你选择 TS。 如果你已经用 JS 好久了，你可以选择走出舒适区学习 TS，也可以选择坚持自己的强项，继续使用 JS。&lt;/p&gt;
&lt;p&gt;5、什么是泛型？&lt;br /&gt;
泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，使用时再去指定类型的一种特性。&lt;br /&gt;
可以把泛型理解为代表类型的参数&lt;br /&gt;
 // 我们希望传入的值是什么类型，返回的值就是什么类型&lt;br /&gt;
 // 传入的值可以是任意的类型，这时候就可以用到 泛型&lt;/p&gt;
&lt;p&gt;// 如果使用 any 的话，就失去了类型检查的意义&lt;/p&gt;
&lt;p&gt;function createArray1(length: any, value: any): Array&amp;lt;any&amp;gt; {&lt;br /&gt;
let result: any = [];&lt;br /&gt;
for (let i = 0; i &amp;lt; length; i++) {&lt;br /&gt;
result[i] = value;&lt;br /&gt;
}&lt;br /&gt;
return result;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;let result = createArray1(3, &#39;x&#39;);&lt;br /&gt;
console.log(result);&lt;/p&gt;
&lt;p&gt;// 最傻的写法：每种类型都得定义一种函数&lt;br /&gt;
 function createArray2 (length: number, value: string): Array&amp;lt;string&amp;gt; {&lt;br /&gt;
let result: Array&amp;lt;string&amp;gt; = [];&lt;br /&gt;
for (let i = 0; i &amp;lt; length; i++) {&lt;br /&gt;
result[i] = value;&lt;br /&gt;
}&lt;br /&gt;
return result;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;function createArray3(length: number, value: number): Array&amp;lt;number&amp;gt; {&lt;br /&gt;
let result: Array&amp;lt;number&amp;gt; = [];&lt;br /&gt;
for (let i = 0; i &amp;lt; length; i++) {&lt;br /&gt;
result[i] = value;&lt;br /&gt;
}&lt;br /&gt;
return result;&lt;br /&gt;
}&lt;br /&gt;
// 或者使用函数重载，写法有点麻烦&lt;br /&gt;
 function createArray4 (length: number, value: number): Array&amp;lt;number&amp;gt;&lt;br /&gt;
function createArray4(length: number, value: string): Array&amp;lt;string&amp;gt;&lt;br /&gt;
function createArray4(length: number, value: any): Array&amp;lt;any&amp;gt; {&lt;br /&gt;
let result: Array&amp;lt;number&amp;gt; = [];&lt;br /&gt;
for (let i = 0; i &amp;lt; length; i++) {&lt;br /&gt;
result[i] = value;&lt;br /&gt;
}&lt;br /&gt;
return result;&lt;br /&gt;
}&lt;br /&gt;
createArray4(6, &#39;666&#39;);&lt;br /&gt;
// 使用泛型&lt;br /&gt;
 // 有关联的地方都改成 &amp;lt;T&amp;gt;&lt;br /&gt;
function createArray&amp;lt;T&amp;gt;(length: number, value: T): Array&amp;lt;T&amp;gt; {&lt;br /&gt;
let result: T[] = [];&lt;br /&gt;
for (let i = 0; i &amp;lt; length; i++) {&lt;br /&gt;
result[i] = value;&lt;br /&gt;
}&lt;br /&gt;
return result;&lt;br /&gt;
}&lt;br /&gt;
// 使用的时候再指定类型&lt;br /&gt;
 let result = createArray&amp;lt;string&amp;gt;(3, &#39;x&#39;);&lt;br /&gt;
// 也可以不指定类型，TS 会自动类型推导&lt;br /&gt;
 let result2 = createArray (3, &#39;x&#39;);&lt;br /&gt;
console.log(result);&lt;br /&gt;
6、TS 中的类&lt;br /&gt;
 TypeScript 是面向对象的 JavaScript。而其中的类描述了所创建的对象共同的属性和方法。&lt;/p&gt;
&lt;p&gt;传统的 JavaScript 程序使用函数和基于原型的继承来创建可重用的组件，但这对于熟悉使用面向对象方式的程序员来说有些棘手，因为他们用的是基于类的继承并且对象是从类构建出来的。&lt;/p&gt;
&lt;p&gt;从 ECMAScript 2015，也就是 ECMAScript 6，JavaScript 程序将可以使用这种基于类的面向对象方法。在 TypeScript 里允许开发者现在就使用这些特性，并且编译后的 JavaScript 可以在所有主流浏览器和平台上运行，&lt;/p&gt;
&lt;p&gt;7、什么是构造函数，构造函数作用是什么？&lt;br /&gt;
构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。而 TypeScript 的构造函数用关键字 constructor 来实现。可以通过 this（和 java/C# 一样代表对象实例的成员访问）关键字来访问当前类体中的属性和方法。&lt;/p&gt;
&lt;p&gt;8、实例化是什么？&lt;br /&gt;
一般情况下，创建一个类后并不能直接的对属性和方法进行引用，必须对类进行实例化，即创建一个对象。TypeScript 中用 new 关键字创建对象。实例化后通过 “.” 来访问属性和方法&lt;/p&gt;
&lt;p&gt;9、方法重写是什么？&lt;br /&gt;
子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写&lt;/p&gt;
&lt;p&gt;重写的作用在于子类可以根据需要，定义特定于自己的行为。也就是说子类能够根据需要实现父类的方法。&lt;/p&gt;
&lt;p&gt;10、什么是可索引类型接口？&lt;br /&gt;
一般用来约束数组和对象&lt;/p&gt;
&lt;p&gt;/ 数字索引 —— 约束数组&lt;br /&gt;
 //index 是随便取的名字，可以任意取名&lt;br /&gt;
 // 只要 index 的类型是 number，那么值的类型必须是 string&lt;br /&gt;
interface StringArray {&lt;br /&gt;
//key 的类型为 number ，一般都代表是数组&lt;br /&gt;
 // 限制 value 的类型为 string&lt;br /&gt;
[index:number]:string&lt;br /&gt;
}&lt;br /&gt;
let arr:StringArray = [&#39;aaa&#39;,&#39;bbb&#39;];&lt;br /&gt;
console.log(arr);&lt;/p&gt;
&lt;p&gt;// 字符串索引 —— 约束对象&lt;br /&gt;
 // 只要 index 的类型是 string，那么值的类型必须是 string&lt;br /&gt;
interface StringObject {&lt;br /&gt;
//key 的类型为 string ，一般都代表是对象&lt;br /&gt;
 // 限制 value 的类型为 string&lt;br /&gt;
[index:string]:string&lt;br /&gt;
}&lt;br /&gt;
let obj:StringObject = {name:&#39;ccc&#39;};&lt;br /&gt;
11、什么是函数类型接口？&lt;br /&gt;
对方法传入的参数和返回值进行约束&lt;br /&gt;
 // 注意区别&lt;/p&gt;
&lt;p&gt;// 普通的接口&lt;br /&gt;
 interface discount1 {&lt;br /&gt;
getNum : (price:number) =&amp;gt; number&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;// 函数类型接口&lt;br /&gt;
 interface discount2 {&lt;br /&gt;
// 注意:&lt;br /&gt;
// “:” 前面的是函数的签名，用来约束函数的参数&lt;br /&gt;
 // &amp;quot;:&amp;quot; 后面的用来约束函数的返回值&lt;br /&gt;
 (price:number):number&lt;br /&gt;
}&lt;br /&gt;
let cost:discount2 = function(price:number):number{&lt;br /&gt;
return price * .8;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;// 也可以使用类型别名&lt;br /&gt;
 type Add = (x: number, y: number) =&amp;gt; number&lt;br /&gt;
let add: Add = (a: number, b: number) =&amp;gt; a + b&lt;br /&gt;
12、什么是类类型接口？&lt;br /&gt;
如果接口用于一个类的话，那么接口会表示 “行为的抽象”&lt;br /&gt;
 对类的约束，让类去实现接口，类可以实现多个接口&lt;br /&gt;
接口只能约束类的公有成员（实例属性 / 方法），无法约束私有成员、构造函数、静态属性 / 方法&lt;/p&gt;
&lt;p&gt;// 接口可以在面向对象编程中表示为行为的抽象&lt;br /&gt;
 interface Speakable {&lt;br /&gt;
name: string;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; // &amp;quot;:&amp;quot; 前面的是函数签名，用来约束函数的参数
// &amp;quot;:&amp;quot; 后面的用来约束函数的返回值
speak(words: string): void
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;interface Speakable2 {&lt;br /&gt;
age: number;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;class Dog implements Speakable, Speakable2 {&lt;br /&gt;
name!: string;&lt;br /&gt;
age = 18;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;speak(words: string) &amp;#123;
    console.log(words);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;let dog = new Dog();&lt;br /&gt;
dog.speak (&#39; 汪汪汪 &#39;);&lt;br /&gt;
13、什么是混合类型接口？&lt;br /&gt;
一个对象可以同时做为函数和对象使用&lt;/p&gt;
&lt;p&gt;interface FnType {&lt;br /&gt;
(getName:string):string;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;interface MixedType extends FnType{&lt;br /&gt;
name:string;&lt;br /&gt;
age:number;&lt;br /&gt;
}&lt;br /&gt;
interface Counter {&lt;br /&gt;
(start: number): string;&lt;br /&gt;
interval: number;&lt;br /&gt;
reset(): void;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;function getCounter(): Counter {&lt;br /&gt;
let counter = &amp;lt;Counter&amp;gt;function (start: number) { };&lt;br /&gt;
counter.interval = 123;&lt;br /&gt;
counter.reset = function () { };&lt;br /&gt;
return counter;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;let c = getCounter();&lt;br /&gt;
c(10);&lt;br /&gt;
c.reset();&lt;br /&gt;
c.interval = 5.0;&lt;br /&gt;
14、never 和 void 的区别？&lt;br /&gt;
void 表示没有任何类型（可以被赋值为 null 和 undefined）。&lt;br /&gt;
never 表示一个不包含值的类型，即表示永远不存在的值。&lt;br /&gt;
拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。&lt;/p&gt;
&lt;p&gt;15、TS 的学前基础？&lt;br /&gt;
因为 TypeScript 是对 JavaScript 的扩展，更准确的说是 ECMAScript。所以，我们学习我们这套 TypeScript 的课程，需要具备 ECMAScript 语言的基础：&lt;/p&gt;
&lt;p&gt;熟悉语法基础（变量、语句、函数等基础概念）&lt;br /&gt;
掌握内置对象（Array、Date 等）的使用&lt;br /&gt;
面向对象基本概念（构造函数、原型、继承）&lt;/p&gt;
</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="TypeScript" scheme="https://aaaa8880788.github.io/tags/TypeScript/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <updated>2024-03-02T02:52:21.679Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/07.Vue/</id>
        <title>Vue</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/07.Vue/"/>
        <content type="html">&lt;h2 id=&#34;vue-面试专题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue-面试专题&#34;&gt;#&lt;/a&gt; Vue 面试专题&lt;/h2&gt;
&lt;h3 id=&#34;简述mvvm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述mvvm&#34;&gt;#&lt;/a&gt; 简述 MVVM&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;什么是 MVVM？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;视图模型双向绑定&lt;/code&gt; ，是 &lt;code&gt;Model-View-ViewModel&lt;/code&gt;  的缩写，也就是把 &lt;code&gt;MVC&lt;/code&gt;  中的 &lt;code&gt;Controller&lt;/code&gt;  演变成 &lt;code&gt;ViewModel。Model&lt;/code&gt;  层代表数据模型， &lt;code&gt;View&lt;/code&gt;  代表 UI 组件， &lt;code&gt;ViewModel&lt;/code&gt;  是 &lt;code&gt;View&lt;/code&gt;  和 &lt;code&gt;Model&lt;/code&gt;  层的桥梁，数据会绑定到 &lt;code&gt;viewModel&lt;/code&gt;  层并自动将数据渲染到页面中，视图变化的时候会通知 &lt;code&gt;viewModel&lt;/code&gt;  层更新数据。以前是操作 DOM 结构更新视图，现在是 &lt;code&gt;数据驱动视图&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MVVM 的优点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. &lt;code&gt;低耦合&lt;/code&gt; 。视图（View）可以独立于 Model 变化和修改，一个 Model 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变化，当 Model 变化的时候 View 也可以不变；&lt;br /&gt;
2. &lt;code&gt;可重用性&lt;/code&gt; 。你可以把一些视图逻辑放在一个 Model 里面，让很多 View 重用这段视图逻辑。&lt;br /&gt;
3. &lt;code&gt;独立开发&lt;/code&gt; 。开发人员可以专注于业务逻辑和数据的开发 (ViewModel)，设计人员可以专注于页面设计。&lt;br /&gt;
4. &lt;code&gt;可测试&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;vue底层实现原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue底层实现原理&#34;&gt;#&lt;/a&gt; Vue 底层实现原理&lt;/h3&gt;
&lt;p&gt;vue.js 是采用数据劫持结合发布者 - 订阅者模式的方式，通过 Object.defineProperty () 来劫持各个属性的 setter 和 getter，在数据变动时发布消息给订阅者，触发相应的监听回调&lt;br /&gt;
 Vue 是一个典型的 MVVM 框架，模型（Model）只是普通的 javascript 对象，修改它则试图（View）会自动更新。这种设计让状态管理变得非常简单而直观&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observer（数据监听器）&lt;/strong&gt; : Observer 的核心是通过 Object.defineProprtty () 来监听数据的变动，这个函数内部可以定义 setter 和 getter，每当数据发生变化，就会触发 setter。这时候 Observer 就要通知订阅者，订阅者就是 Watcher&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Watcher（订阅者）&lt;/strong&gt; : Watcher 订阅者作为 Observer 和 Compile 之间通信的桥梁，主要做的事情是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在自身实例化时往属性订阅器 (dep) 里面添加自己&lt;/li&gt;
&lt;li&gt;自身必须有一个 update () 方法&lt;/li&gt;
&lt;li&gt;待属性变动 dep.notice () 通知时，能调用自身的 update () 方法，并触发 Compile 中绑定的回调&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Compile（指令解析器）&lt;/strong&gt; : Compile 主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图&lt;/p&gt;
&lt;p&gt;传送门：☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk0OTU5OTk4MjgzOTA3MTAyI2hlYWRpbmctMg==&#34;&gt;20 分钟吃透 Diff 算法核心原理&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;谈谈对vue生命周期的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#谈谈对vue生命周期的理解&#34;&gt;#&lt;/a&gt; 谈谈对 vue 生命周期的理解？&lt;/h3&gt;
&lt;p&gt;每个 &lt;code&gt;Vue&lt;/code&gt;  实例在创建时都会经过一系列的初始化过程， &lt;code&gt;vue&lt;/code&gt;  的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create阶段&lt;/code&gt; ：vue 实例被创建&lt;br /&gt;
 &lt;code&gt;beforeCreate&lt;/code&gt; : 最初调用触发，创建前，此时 data 和 methods 中的数据都还没有初始化，data 和 events 都不能用&lt;br /&gt;
 &lt;code&gt;created&lt;/code&gt; ： 创建完毕，data 中有值，未挂载，data 和 events 已经初始化好，data 已经具有响应式；在这里可以发送请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mount阶段&lt;/code&gt; ： vue 实例被挂载到真实 DOM 节点&lt;br /&gt;
 &lt;code&gt;beforeMount&lt;/code&gt; ：在模版编译之后，渲染之前触发，可以发起服务端请求，去数据，ssr 中不可用，基本用不上这个 hook&lt;br /&gt;
 &lt;code&gt;mounted&lt;/code&gt; : 在渲染之后触发，此时可以操作 DOM，并能访问组件中的 DOM 以及 $ref,SSR 中不可用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update阶段&lt;/code&gt; ：当 vue 实例里面的 data 数据变化时，触发组件的重新渲染&lt;br /&gt;
 &lt;code&gt;beforeUpdate&lt;/code&gt;  : 更新前，在数据变化后，模版改变前触发，切勿使用它监听数据变化&lt;br /&gt;
 &lt;code&gt;updated&lt;/code&gt; ：更新后，在数据改变后，模版改变后触发，常用于重渲染案后的打点，性能检测或触发 vue 组件中非 vue 组件的更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy阶段&lt;/code&gt; ：vue 实例被销毁&lt;br /&gt;
 &lt;code&gt;beforeDestroy&lt;/code&gt; ：实例被销毁前，组件卸载前触发，此时可以手动销毁一些方法，可以在此时清理事件、计时器或者取消订阅操作&lt;br /&gt;
 &lt;code&gt;destroyed&lt;/code&gt; : 卸载完毕后触发，销毁后，可以做最后的打点或事件触发操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;组件生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件生命周期&#34;&gt;#&lt;/a&gt; 组件生命周期&lt;/h4&gt;
&lt;p&gt;生命周期（父子组件） 父组件 beforeCreate --&amp;gt; 父组件 created --&amp;gt; 父组件 beforeMount --&amp;gt; 子组件 beforeCreate --&amp;gt; 子组件 created --&amp;gt; 子组件 beforeMount --&amp;gt; 子组件 mounted --&amp;gt; 父组件 mounted --&amp;gt; 父组件 beforeUpdate --&amp;gt; 子组件 beforeDestroy--&amp;gt; 子组件 destroyed --&amp;gt; 父组件 updated&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加载渲染过程&lt;/strong&gt; 父 beforeCreate-&amp;gt; 父 created-&amp;gt; 父 beforeMount-&amp;gt; 子 beforeCreate-&amp;gt; 子 created-&amp;gt; 子 beforeMount-&amp;gt; 子 mounted-&amp;gt; 父 mounted&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挂载阶段&lt;/strong&gt; 父 created-&amp;gt; 子 created-&amp;gt; 子 mounted-&amp;gt; 父 mounted&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父组件更新阶段&lt;/strong&gt; 父 beforeUpdate-&amp;gt; 父 updated&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子组件更新阶段&lt;/strong&gt; 父 beforeUpdate-&amp;gt; 子 beforeUpdate-&amp;gt; 子 updated-&amp;gt; 父 updated&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;销毁阶段&lt;/strong&gt; 父 beforeDestroy-&amp;gt; 子 beforeDestroy-&amp;gt; 子 destroyed-&amp;gt; 父 destroyed&lt;/p&gt;
&lt;h3 id=&#34;computed与watch&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#computed与watch&#34;&gt;#&lt;/a&gt;  &lt;code&gt;computed与watch&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;通俗来讲，既能用 computed 实现又可以用 watch 监听来实现的功能，推荐用 computed， 重点在于 computed 的缓存功能 computed 计算属性是用来声明式的描述一个值依赖了其它的值，当所依赖的值或者变量 改变时，计算属性也会跟着改变； watch 监听的是已经在 data 中定义的变量，当该变量变化时，会触发 watch 中的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;watch 属性监听&lt;/strong&gt; 是一个对象，键是需要观察的属性，值是对应回调函数，主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作，监听属性的变化，需要在数据变化时执行异步或开销较大的操作时使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;computed 计算属性&lt;/strong&gt; 属性的结果会被 &lt;code&gt;缓存&lt;/code&gt; ，当 &lt;code&gt;computed&lt;/code&gt;  中的函数所依赖的属性没有发生改变的时候，那么调用当前函数的时候结果会从缓存中读取。除非依赖的响应式属性变化时才会重新计算，主要当做属性来使用  &lt;code&gt;computed&lt;/code&gt;  中的函数必须用 &lt;code&gt;return&lt;/code&gt;  返回最终的结果  &lt;code&gt;computed&lt;/code&gt;  更高效，优先使用。 &lt;code&gt;data 不改变，computed 不更新。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;  &lt;code&gt;computed&lt;/code&gt; ：当一个属性受多个属性影响的时候使用，例：购物车商品结算功能  &lt;code&gt;watch&lt;/code&gt; ：当一条数据影响多条数据的时候使用，例：搜索数据&lt;/p&gt;
&lt;h4 id=&#34;组件中的data为什么是一个函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组件中的data为什么是一个函数&#34;&gt;#&lt;/a&gt; 组件中的 data 为什么是一个函数？&lt;/h4&gt;
&lt;p&gt;1. 一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。 2. 如果 data 是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间 data 不冲突，data 必须是一个函数。&lt;/p&gt;
&lt;h4 id=&#34;为什么v-for和v-if不建议用在一起&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么v-for和v-if不建议用在一起&#34;&gt;#&lt;/a&gt; 为什么 v-for 和 v-if 不建议用在一起&lt;/h4&gt;
&lt;p&gt;1. 当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费&lt;br /&gt;
 2. 这种场景建议使用 computed，先对数据进行过滤&lt;/p&gt;
&lt;p&gt;注意：3.x 版本中  &lt;code&gt;v-if&lt;/code&gt;  总是优先于  &lt;code&gt;v-for&lt;/code&gt;  生效。由于语法上存在歧义，建议避免在同一元素上同时使用两者。比起在模板层面管理相关逻辑，更好的办法是通过创建计算属性筛选出列表，并以此创建可见元素。&lt;/p&gt;
&lt;p&gt;解惑传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92My5jbi52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3YtaWYtdi1mb3IuaHRtbCMlRTYlQTYlODIlRTglQTclODg=&#34;&gt;# v-if 与 v-for 的优先级对比非兼容&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;reactvue-项目中-key-的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reactvue-项目中-key-的作用&#34;&gt;#&lt;/a&gt; React/Vue 项目中 key 的作用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;key 的作用是为了在 diff 算法执行时更快的找到对应的节点， &lt;code&gt;提高diff速度，更高效的更新虚拟DOM&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;vue 和 react 都是采用 diff 算法来对比新旧虚拟节点，从而更新节点。在 vue 的 diff 函数中，会根据新节点的 key 去对比旧节点数组中的 key，从而找到相应旧节点。如果没找到就认为是一个新增节点。而如果没有 key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个 map 映射，另一种是遍历查找。相比而言。map 映射的速度更快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了在数据变化时强制更新组件，以避免 &lt;code&gt;“就地复用”&lt;/code&gt;  带来的副作用。&lt;/p&gt;
&lt;p&gt;当 Vue.js 用  &lt;code&gt;v-for&lt;/code&gt;  更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。重复的 key 会造成渲染错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数组扁平化转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组扁平化转换&#34;&gt;#&lt;/a&gt; 数组扁平化转换&lt;/h3&gt;
&lt;p&gt;在说到模版编译的时候，有可能会提到数组的转换，一般就用递归处理&lt;br /&gt;
将 [1,2,3,[4,5]] 转换成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;
    children:[
        &amp;#123;
            value:1
        &amp;#125;,
        &amp;#123;
            value:2
        &amp;#125;,
        &amp;#123;
            value:3
        &amp;#125;,
        &amp;#123;
            children:[
                &amp;#123;
                    value:4
                &amp;#125;,
                &amp;#123;
                    value:5
                &amp;#125;
            ]
        &amp;#125;,
    ]
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 测试数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;，&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;，&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 转换函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;convert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 准备一个接收结果数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 遍历传入的 arr 的每一项&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果遍历到的数字是 number，直接放进入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;number&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;isArray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 如果遍历到这个项目是数组，那么就递归&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            result&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;convert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; o &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;convert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;o&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;vue组件的通信方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue组件的通信方式&#34;&gt;#&lt;/a&gt; vue 组件的通信方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;props&lt;/code&gt; / &lt;code&gt;$emit&lt;/code&gt;  父子组件通信&lt;/p&gt;
&lt;p&gt;父 -&amp;gt; 子 &lt;code&gt;props&lt;/code&gt; ，子 -&amp;gt; 父  &lt;code&gt;$on、$emit&lt;/code&gt;  获取父子组件实例  &lt;code&gt;parent、children&lt;/code&gt;   &lt;code&gt;Ref &lt;/code&gt; 获取实例的方式调用组件的属性或者方法 父 -&amp;gt; 子孙  &lt;code&gt;Provide、inject&lt;/code&gt;  官方不推荐使用，但是写组件库时很常用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$emit&lt;/code&gt; / &lt;code&gt;$on&lt;/code&gt;  自定义事件 兄弟组件通信&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Event Bus&lt;/code&gt;  实现跨组件通信  &lt;code&gt;Vue.prototype.$bus = new Vue()&lt;/code&gt;  自定义事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vuex 跨级组件通信&lt;/p&gt;
&lt;p&gt;Vuex、 &lt;code&gt;$attrs、$listeners&lt;/code&gt;   &lt;code&gt;Provide、inject&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;emit-后面的两个参数是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#emit-后面的两个参数是什么&#34;&gt;#&lt;/a&gt; $emit 后面的两个参数是什么&lt;/h3&gt;
&lt;p&gt;1、父组件可以使用 props 把数据传给子组件。&lt;br /&gt;
2、子组件可以使用 $emit, 让父组件监听到自定义事件 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vm.$emit( event, arg );&lt;/code&gt; // 触发当前实例上的事件，要传递的参数&lt;br /&gt;
 &lt;code&gt;vm.$on( event, fn );&lt;/code&gt; // 监听 event 事件后运行 fn；&lt;/p&gt;
&lt;p&gt;子组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;train-city&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;父组件传给子组件的toCity:&amp;#123;&amp;#123;sendData&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt; 
    &amp;lt;br/&amp;gt;&amp;lt;button @click=&#39;select(`大连`)&#39;&amp;gt;点击此处将‘大连’发射给父组件&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
  export default &amp;#123;
    name:&#39;trainCity&#39;,
    props:[&#39;sendData&#39;], // 用来接收父组件传给子组件的数据
    methods:&amp;#123;
      select(val) &amp;#123;
        let data = &amp;#123;
          cityName: val
        &amp;#125;;
        this.$emit(&#39;showCityName&#39;,data);//select事件触发后，自动触发showCityName事件
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;父组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;div&amp;gt;父组件的toCity&amp;#123;&amp;#123;toCity&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;
        &amp;lt;train-city @showCityName=&amp;quot;updateCity&amp;quot; :sendData=&amp;quot;toCity&amp;quot;&amp;gt;&amp;lt;/train-city&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;template&amp;gt;
&amp;lt;script&amp;gt;
  export default &amp;#123;
    name:&#39;index&#39;,
    components: &amp;#123;&amp;#125;,
    data () &amp;#123;
      return &amp;#123;
        toCity:&amp;quot;北京&amp;quot;
      &amp;#125;
    &amp;#125;,
    methods:&amp;#123;
      updateCity(data)&amp;#123;//触发子组件城市选择-选择城市的事件
        this.toCity = data.cityName;//改变了父组件的值
        console.log(&#39;toCity:&#39;+this.toCity)
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;nexttick的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nexttick的实现&#34;&gt;#&lt;/a&gt; nextTick 的实现&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;nextTick&lt;/code&gt;  是 &lt;code&gt;Vue&lt;/code&gt;  提供的一个全局 &lt;code&gt;API&lt;/code&gt; , 是在下次 &lt;code&gt;DOM&lt;/code&gt;  更新循环结束之后执行延迟回调，在修改数据之后使用 &lt;code&gt;$nextTick&lt;/code&gt; ，则可以在回调中获取更新后的 &lt;code&gt;DOM&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化， &lt;code&gt;Vue&lt;/code&gt;  将开启 1 个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 &lt;code&gt;watcher&lt;/code&gt;  被多次触发，只会被推入到队列中 - 次。这种在缓冲时去除重复数据对于避免不必要的计算和 &lt;code&gt;DOM&lt;/code&gt;  操作是非常重要的。 &lt;code&gt;nextTick&lt;/code&gt;  方法会在队列中加入一个回调函数，确保该函数在前面的 dom 操作完成后才调用；&lt;/li&gt;
&lt;li&gt;比如，我在干什么的时候就会使用 nextTick，传一个回调函数进去，在里面执行 dom 操作即可；&lt;/li&gt;
&lt;li&gt;我也有简单了解 &lt;code&gt;nextTick&lt;/code&gt;  实现，它会在 &lt;code&gt;callbacks&lt;/code&gt;  里面加入我们传入的函数，然后用 &lt;code&gt;timerFunc&lt;/code&gt;  异步方式调用它们，首选的异步方式会是 &lt;code&gt;Promise&lt;/code&gt; 。这让我明白了为什么可以在 &lt;code&gt;nextTick&lt;/code&gt;  中看到 &lt;code&gt;dom&lt;/code&gt;  操作结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;nexttick的实现原理是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nexttick的实现原理是什么&#34;&gt;#&lt;/a&gt; nextTick 的实现原理是什么？&lt;/h3&gt;
&lt;p&gt;在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。 nextTick 主要使用了宏任务和微任务。 根据执行环境分别尝试采用 Promise、MutationObserver、setImmediate，如果以上都不行则采用 setTimeout 定义了一个异步方法，多次调用 nextTick 会将方法存入队列中，通过这个异步方法清空当前队列。&lt;/p&gt;
&lt;h3 id=&#34;使用过插槽么用的是具名插槽还是匿名插槽或作用域插槽&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用过插槽么用的是具名插槽还是匿名插槽或作用域插槽&#34;&gt;#&lt;/a&gt; 使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽&lt;/h3&gt;
&lt;p&gt;vue 中的插槽是一个非常好用的东西 slot 说白了就是一个占位的 在 vue 当中插槽包含三种一种是默认插槽（匿名）一种是具名插槽还有一种就是作用域插槽 匿名插槽就是没有名字的只要默认的都填到这里具名插槽指的是具有名字的&lt;/p&gt;
&lt;h3 id=&#34;keep-alive的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#keep-alive的实现&#34;&gt;#&lt;/a&gt; keep-alive 的实现&lt;/h3&gt;
&lt;p&gt;keep-alive 是 Vue.js 的一个内置组件。它能够不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实 DOM 中，也不会出现在父组件链中。&lt;/p&gt;
&lt;p&gt;作用：实现组件缓存，保持这些组件的状态，以避免反复渲染导致的性能问题。 需要缓存组件 频繁切换，不需要重复渲染&lt;/p&gt;
&lt;p&gt;场景：tabs 标签页 后台导航，vue 性能优化&lt;/p&gt;
&lt;p&gt;原理： &lt;code&gt;Vue.js&lt;/code&gt;  内部将 &lt;code&gt;DOM&lt;/code&gt;  节点抽象成了一个个的 &lt;code&gt;VNode&lt;/code&gt;  节点， &lt;code&gt;keep-alive&lt;/code&gt;  组件的缓存也是基于 &lt;code&gt;VNode&lt;/code&gt;  节点的而不是直接存储 &lt;code&gt;DOM&lt;/code&gt;  结构。它将满足条件 &lt;code&gt;（pruneCache与pruneCache）&lt;/code&gt; 的组件在 &lt;code&gt;cache&lt;/code&gt;  对象中缓存起来，在需要重新渲染的时候再将 &lt;code&gt;vnode&lt;/code&gt;  节点从 &lt;code&gt;cache&lt;/code&gt;  对象中取出并渲染。&lt;/p&gt;
&lt;h3 id=&#34;keep-alive-的属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#keep-alive-的属性&#34;&gt;#&lt;/a&gt; keep-alive 的属性&lt;/h3&gt;
&lt;p&gt;它提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。&lt;/p&gt;
&lt;p&gt;include 定义缓存白名单，keep-alive 会缓存命中的组件；exclude 定义缓存黑名单，被命中的组件将不会被缓存；max 定义缓存组件上限，超出上限使用 LRU 的策略置换缓存数据。&lt;/p&gt;
&lt;p&gt;在动态组件中的应用&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;include&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;whiteList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;exclude&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;blackList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;amount&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;component &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;is&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;currentComponent&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;component&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 vue-router 中的应用&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;include&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;whiteList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;exclude&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;blackList&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;max&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;amount&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;router&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;view&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;router&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;view&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;keep&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;alive&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;vue 中完整示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;keep-alive&amp;gt;
    &amp;lt;coma v-if=&amp;quot;test&amp;quot;&amp;gt;&amp;lt;/coma&amp;gt;
    &amp;lt;comb v-else=&amp;quot;test&amp;quot;&amp;gt;&amp;lt;/comb&amp;gt;
&amp;lt;/keep-alive&amp;gt;
&amp;lt;button @click=&amp;quot;test=handleClick&amp;quot;&amp;gt;请点击&amp;lt;/button&amp;gt;

export default &amp;#123;
    data () &amp;#123;
        return &amp;#123;
            test: true
        &amp;#125;
    &amp;#125;,
    methods: &amp;#123;
        handleClick () &amp;#123;
            this.test = !this.test;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考:&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLyNrZWVwLWFsaXZl&#34;&gt;keep-alive 官网&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85NTIzYmI0Mzk5NTA=&#34;&gt;keep-alive 实现原理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODE4OTg0Mi9hcnRpY2xlL2RldGFpbHMvMTAzOTk5OTg5&#34;&gt;Vue keep-alive 的实现原理&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;mixin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mixin&#34;&gt;#&lt;/a&gt; mixin&lt;/h3&gt;
&lt;p&gt;mixin 项目变得复杂的时候，多个组件间有重复的逻辑就会用到 mixin&lt;br /&gt;
 多个组件有相同的逻辑，抽离出来&lt;br /&gt;
 mixin 并不是完美的解决方案，会有一些问题&lt;br /&gt;
 vue3 提出的 Composition API 旨在解决这些问题【追求完美是要消耗一定的成本的，如开发成本】&lt;br /&gt;
场景：PC 端新闻列表和详情页一样的右侧栏目，可以使用 mixin 进行混合&lt;br /&gt;
劣势：1. 变量来源不明确，不利于阅读 2. 多 mixin 可能会造成命名冲突 3.mixin 和组件可能出现多对多的关系，使得项目复杂度变高&lt;/p&gt;
&lt;h3 id=&#34;vue-如何实现模拟-v-model-指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue-如何实现模拟-v-model-指令&#34;&gt;#&lt;/a&gt; vue 如何实现模拟 v-model 指令&lt;/h3&gt;
&lt;p&gt;可以使用 vue 自定义指令 Vue.directive () 模拟&lt;/p&gt;
&lt;p&gt;具体参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTU3OTQ0L2FydGljbGUvZGV0YWlscy8xMDYyNjI1NDY=&#34;&gt;vue 自定义指令模拟 v-model 指令&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;如何实现-v-model说下思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何实现-v-model说下思路&#34;&gt;#&lt;/a&gt; 如何实现 v-model, 说下思路&lt;/h3&gt;
&lt;h3 id=&#34;vue-router-相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue-router-相关&#34;&gt;#&lt;/a&gt; Vue Router 相关&lt;/h3&gt;
&lt;h3 id=&#34;vuex的理解及使用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vuex的理解及使用场景&#34;&gt;#&lt;/a&gt; Vuex 的理解及使用场景&lt;/h3&gt;
&lt;p&gt;Vuex 是一个专为 Vue 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vuex 的状态存储是响应式的；当 Vue 组件从 store 中读取状态的时候，&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新 2. 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation， 这样使得我们可以方便地跟踪每一个状态的变化 Vuex 主要包括以下几个核心模块：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;State：定义了应用的状态数据&lt;/li&gt;
&lt;li&gt;Getter：在 store 中定义 “getter”（可以认为是 store 的计算属性），&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 3. Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 4. Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 5. Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7249773a1634f779c48f3f0ffabf968~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <category term="Vue" scheme="https://aaaa8880788.github.io/tags/Vue/" />
        <updated>2024-03-02T02:52:21.679Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/08.React/</id>
        <title>React</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/08.React/"/>
        <content type="html">&lt;h2 id=&#34;react-面试专题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react-面试专题&#34;&gt;#&lt;/a&gt; React 面试专题&lt;/h2&gt;
&lt;h3 id=&#34;reactjs是-mvvm-框架吗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reactjs是-mvvm-框架吗&#34;&gt;#&lt;/a&gt; React.js 是 MVVM 框架吗？&lt;/h3&gt;
&lt;p&gt;React 就是 Facebook 的一个开源 JS 框架，专注的层面为 View 层，不包括数据访问层或者那种 Hash 路由（不过 React 有插件支持），与 Angularjs，Emberjs 等大而全的框架不同，React 专注的中心是 Component，即组件。React 认为一切页面元 素都可以抽象成组件，比如一个表单，或者表单中的某一项。&lt;/p&gt;
&lt;p&gt;React 可以作为 MVVM 中第二个 V，也就是 View，但是并不是 MVVM 框架。MVVM 一个最显著的特征：双向绑定。React 没有这个，它是单向数据绑定的。React 是一个单向数据流的库，状态驱动视图。react 整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在 react 中，是单向数据流，推崇结合 immutable 来实现数据不可变。&lt;/p&gt;
&lt;h3 id=&#34;hooks用过吗聊聊react中class组件和函数组件的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hooks用过吗聊聊react中class组件和函数组件的区别&#34;&gt;#&lt;/a&gt; hooks 用过吗？聊聊 react 中 class 组件和函数组件的区别&lt;/h3&gt;
&lt;p&gt;类组件是使用 ES6 的 class 来定义的组件。 函数组件是接收一个单一的  &lt;code&gt;props&lt;/code&gt;  对象并返回一个 React 元素。&lt;/p&gt;
&lt;p&gt;关于 React 的两套 API（类（class）API 和基于函数的钩子（hooks） API）。官方推荐使用钩子（函数），而不是类。因为钩子更简洁，代码量少，用起来比较 &amp;quot;轻&amp;quot;，而类比较 &amp;quot;重&amp;quot;。而且，钩子是函数，更符合 React 函数式的本质。&lt;/p&gt;
&lt;p&gt;函数一般来说，只应该做一件事，就是返回一个值。 如果你有多个操作，每个操作应该写成一个单独的函数。而且，数据的状态应该与操作方法分离。根据函数这种理念，React 的函数组件只应该做一件事情：返回组件的 HTML 代码，而没有其他的功能。函数的返回结果只依赖于它的参数。不改变函数体外部数据、函数执行过程里面没有副作用。&lt;/p&gt;
&lt;p&gt;类（class）是数据和逻辑的封装。 也就是说，组件的状态和操作方法是封装在一起的。如果选择了类的写法，就应该把相关的数据和操作，都写在同一个 class 里面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类组件的缺点&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;大型组件很难拆分和重构，也很难测试。&lt;br /&gt;
业务逻辑分散在组件的各个方法之中，导致重复逻辑或关联逻辑。&lt;br /&gt;
组件类引入了复杂的编程模式，比如 render props 和高阶组件。&lt;br /&gt;
难以理解的 class，理解 JavaScript 中  &lt;code&gt;this&lt;/code&gt;  的工作方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。&lt;/p&gt;
&lt;p&gt;1. 状态的有无&lt;br /&gt;
 hooks 出现之前，函数组件 &lt;code&gt;没有实例&lt;/code&gt; ， &lt;code&gt;没有生命周期&lt;/code&gt; ， &lt;code&gt;没有state&lt;/code&gt; ， &lt;code&gt;没有this&lt;/code&gt; ，所以我们称函数组件为无状态组件。 hooks 出现之前，react 中的函数组件通常只考虑负责 UI 的渲染，没有自身的状态没有业务逻辑代码，是一个纯函数。它的输出只由参数 props 决定，不受其他任何因素影响。&lt;/p&gt;
&lt;p&gt;2. 调用方式的不同&lt;br /&gt;
函数组件重新渲染，将重新调用组件方法返回新的 react 元素。类组件重新渲染将 new 一个新的组件实例，然后调用 render 类方法返回 react 元素，这也说明为什么类组件中 this 是可变的。&lt;/p&gt;
&lt;p&gt;3. 因为调用方式不同，在函数组件使用中会出现问题&lt;br /&gt;
在操作中改变状态值，类组件可以获取最新的状态值，而函数组件则会按照顺序返回状态值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;React Hooks（钩子的作用）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hook&lt;/em&gt; 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。&lt;/p&gt;
&lt;p&gt;React Hooks 的几个常用钩子:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;useState()&lt;/code&gt;  // 状态钩子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useContext()&lt;/code&gt;  // 共享状态钩子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useReducer()&lt;/code&gt;  //action 钩子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useEffect()&lt;/code&gt;  // 副作用钩子&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有几个不常见的大概的说下，后续会专门写篇文章描述下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.useCallback 记忆函数 一般把&lt;strong&gt;函数式组件理解为 class 组件 render 函数的语法糖&lt;/strong&gt;，所以每次重新渲染的时候，函数式组件内部所有的代码都会重新执行一遍。而有了 useCallback 就不一样了，你可以通过 useCallback 获得一个记忆后的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;App&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; memoizedHandleClick &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useCallback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Click happened&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 空数组代表无论什么情况下该函数都不会发生改变&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;SomeComponent onClick&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;memoizedHandleClick&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;Click Me&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;SomeComponent&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第二个参数传入一个数组，数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.useMemo 记忆组件 useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的。 唯一的区别是：&lt;strong&gt;useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个函数并且将函数执行结果返回给你&lt;/strong&gt;。&lt;br /&gt;
所以 useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.useRef 保存引用值&lt;/p&gt;
&lt;p&gt;useRef 跟 createRef 类似，都可以用来生成对 DOM 对象的引用。useRef 返回的值传递给组件或者 DOM 的 ref 属性，就可以通过 ref.current 值&lt;strong&gt;访问组件或真实的 DOM 节点，重点是组件也是可以访问到的&lt;/strong&gt;，从而可以对 DOM 进行一些操作，比如监听事件等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.useImperativeHandle 穿透 Ref&lt;/p&gt;
&lt;p&gt;通过 useImperativeHandle 用于让父组件获取子组件内的索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.useLayoutEffect 同步执行副作用&lt;/p&gt;
&lt;p&gt;大部分情况下，使用 useEffect 就可以帮我们处理组件的副作用，但是如果想要同步调用一些副作用，比如对 DOM 的操作，就需要使用 useLayoutEffect，useLayoutEffect 中的副作用会在 DOM 更新之后同步执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;useEffect 和 useLayoutEffect 有什么区别&lt;/strong&gt;：简单来说就是调用时机不同，useLayoutEffect 和原来 componentDidMount&amp;amp;componentDidUpdate 一致，在 react 完成 DOM 更新后马上同步调用的代码，会阻塞页面渲染。而 useEffect 是会在整个页面渲染完才会调用的代码。 &lt;code&gt;官方建议优先使用useEffect&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;react-组件通信方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react-组件通信方式&#34;&gt;#&lt;/a&gt; React 组件通信方式&lt;/h3&gt;
&lt;p&gt;react 组件间通信常见的几种情况:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;父组件向子组件通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;子组件向父组件通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;跨级组件通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;非嵌套关系的组件通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1父组件向子组件通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1父组件向子组件通信&#34;&gt;#&lt;/a&gt; 1）父组件向子组件通信&lt;/h4&gt;
&lt;p&gt;父组件通过 props 向子组件传递需要的信息。父传子是在父组件中直接绑定一个正常的属性，这个属性就是指具体的值，在子组件中，用 props 就可以获取到这个值&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 子组件: Child&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;props&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 父组件 Parent&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Child name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;京程一灯&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Child&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;2子组件向父组件通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2子组件向父组件通信&#34;&gt;#&lt;/a&gt; 2）子组件向父组件通信&lt;/h4&gt;
&lt;p&gt;props + 回调的方式，使用公共组件进行状态提升。子传父是先在父组件上绑定属性设置为一个函数，当子组件需要给父组件传值的时候，则通过 props 调用该函数将参数传入到该函数当中，此时就可以在父组件中的函数中接收到该参数了，这个参数则为子组件传过来的值&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 子组件: Child&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;props&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;cb&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cb&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;京程一灯欢迎你!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;京程一灯欢迎你&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;button&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 父组件 Parent&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;msg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Child callback&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Child&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;3跨级组件通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3跨级组件通信&#34;&gt;#&lt;/a&gt; 3）跨级组件通信&lt;/h4&gt;
&lt;p&gt;即父组件向子组件的子组件通信，向更深层子组件通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 props，利用中间组件层层传递，但是如果父组件结构较深，那么中间每一层组件都要去传递 props，增加了复杂度，并且这些 props 并不是中间组件自己需要的。&lt;/li&gt;
&lt;li&gt;使用 context，context 相当于一个大容器，我们可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用 context 实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//context 方式实现跨级组件通信 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// Context 设计目的是为了共享那些对于一个组件树而言是 “全局” 的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; BatteryContext &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  子组件的子组件 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GrandChild&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;BatteryContext&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Consumer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class=&#34;token parameter&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;h1 style&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;swig￼&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;我是红色的&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;color&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;h1&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;BatteryContext&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Consumer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  子组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;GrandChild&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 父组件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token literal-property property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;red&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;color&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;BatteryContext&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Provider value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;color&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;              &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Child&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Child&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;BatteryContext&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Provider&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;4非嵌套关系的组件通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4非嵌套关系的组件通信&#34;&gt;#&lt;/a&gt; 4）非嵌套关系的组件通信&lt;/h4&gt;
&lt;p&gt;即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;可以使用自定义事件通信（发布订阅模式），使用 pubsub-js&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;可以通过 redux 等进行全局状态管理&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点，结合父子间通信方式进行通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;也可以 new 一个 Vue 的 EventBus, 进行事件监听，一边执行监听，一边执行新增 VUE 的 eventBus 就是发布订阅模式，是可以在 React 中使用的；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setstate-既存在异步情况也存在同步情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#setstate-既存在异步情况也存在同步情况&#34;&gt;#&lt;/a&gt; setState 既存在异步情况也存在同步情况&lt;/h3&gt;
&lt;p&gt;1. 异步情况 在 &lt;code&gt;React事件当中是异步操作&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2. 同步情况 如果是在 &lt;code&gt;setTimeout事件或者自定义的dom事件&lt;/code&gt; 中，都是同步的&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//setTimeout 事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; Component &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;react&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;count&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;btnAction&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;增加&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;button&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;btnAction&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 不能直接修改 state，需要通过 setState 进行修改&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 同步&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; Count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 自定义 dom 事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; Component &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;react&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;count&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;button id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;btn&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;绑定点击事件&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;button&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;componentDidMount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 自定义 dom 事件，也是同步修改&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#btn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; Count&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生命周期&#34;&gt;#&lt;/a&gt; 生命周期&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bae01e6eb804d849e5bb889f787707d~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;安装&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;当组件的实例被创建并插入到 &lt;span class=&#34;token constant&#34;&gt;DOM&lt;/span&gt; 中时，这些方法按以下顺序调用：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getDerivedStateFromProps&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;componentDidMount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;更新中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;更新可能由道具或状态的更改引起。当重新渲染组件时，这些方法按以下顺序调用：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getDerivedStateFromProps&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;shouldComponentUpdate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;getSnapshotBeforeUpdate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;componentDidUpdate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;卸载&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;当组件从 &lt;span class=&#34;token constant&#34;&gt;DOM&lt;/span&gt; 中移除时调用此方法：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;说一下-react-fiber&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说一下-react-fiber&#34;&gt;#&lt;/a&gt; 说一下 react-fiber&lt;/h3&gt;
&lt;h4 id=&#34;1背景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1背景&#34;&gt;#&lt;/a&gt; 1）背景&lt;/h4&gt;
&lt;p&gt;react-fiber 产生的根本原因，是 &lt;code&gt;大量的同步计算任务阻塞了浏览器的 UI 渲染&lt;/code&gt; 。默认情况下，JS 运算、页面布局和页面绘制都是运行在浏览器的主线程当中，他们之间是互斥的关系。如果 JS 运算持续占用主线程，页面就没法得到及时的更新。当我们调用 &lt;code&gt;setState&lt;/code&gt;  更新页面的时候，React 会遍历应用的所有节点，计算出差异，然后再更新 UI。如果页面元素很多，整个过程占用的时机就可能超过 16 毫秒，就容易出现掉帧的现象。&lt;/p&gt;
&lt;h4 id=&#34;2实现原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2实现原理&#34;&gt;#&lt;/a&gt; 2）实现原理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;react 内部运转分三层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual DOM 层，描述页面长什么样。&lt;/li&gt;
&lt;li&gt;Reconciler 层，负责调用组件生命周期方法，进行 Diff 运算等。&lt;/li&gt;
&lt;li&gt;Renderer 层，根据不同的平台，渲染出相应的页面，比较常见的是 ReactDOM 和 ReactNative。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Fiber 其实指的是一种数据结构，它可以用一个纯 JS 对象来表示&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; fiber &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    stateNode&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// 节点实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    child&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;// 子节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sibling&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;// 兄弟节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// 父节点&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为了实现不卡顿，就需要有一个调度器 (Scheduler) 来进行任务分配。优先级高的任务（如键盘输入）可以打断优先级低的任务（如 Diff）的执行，从而更快的生效。任务的优先级有六种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;synchronous，与之前的 Stack Reconciler 操作一样，同步执行&lt;/li&gt;
&lt;li&gt;task，在 next tick 之前执行&lt;/li&gt;
&lt;li&gt;animation，下一帧之前执行&lt;/li&gt;
&lt;li&gt;high，在不久的将来立即执行&lt;/li&gt;
&lt;li&gt;low，稍微延迟执行也没关系&lt;/li&gt;
&lt;li&gt;offscreen，下一次 render 时或 scroll 时才执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fiber Reconciler（react ）执行过程分为 2 个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阶段一，生成 Fiber 树，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。阶段一可被打断的特性，让优先级更高的任务先执行，从框架层面大大降低了页面掉帧的概率。&lt;/li&gt;
&lt;li&gt;阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fiber 树：React 在 render 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。Fiber Tree 一个重要的特点是链表结构，将递归遍历编程循环遍历，然后配合 requestIdleCallback API, 实现任务拆分、中断与恢复。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 Stack Reconciler 到 Fiber Reconciler，源码层面其实就是干了一件递归改循环的事情&lt;/p&gt;
&lt;p&gt;传送门 ☞&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAyMjUwMjU4ODI2NjU3Nzk5&#34;&gt;# 深入了解 Fiber&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;portals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#portals&#34;&gt;#&lt;/a&gt; Portals&lt;/h3&gt;
&lt;p&gt;Portals 提供了一种一流的方式来将子组件渲染到存在于父组件的 DOM 层次结构之外的 DOM 节点中。结构不受外界的控制的情况下就可以使用 portals 进行创建&lt;/p&gt;
&lt;h3 id=&#34;何时要使用异步组件如和使用异步组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#何时要使用异步组件如和使用异步组件&#34;&gt;#&lt;/a&gt; 何时要使用异步组件？如和使用异步组件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;加载大组件的时候&lt;/li&gt;
&lt;li&gt;路由异步加载的时候&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;react 中要配合 Suspense 使用&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 异步懒加载&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; Box &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;lazy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./components/Box&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用组件的时候要用 suspense 进行包裹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Suspense fallback&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;loading&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;show &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Box&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Suspense&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;react-事件绑定原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#react-事件绑定原理&#34;&gt;#&lt;/a&gt; React 事件绑定原理&lt;/h3&gt;
&lt;p&gt;React 并不是将 click 事件绑在该 div 的真实 DOM 上，而是 &lt;code&gt;在document处监听所有支持的事件&lt;/code&gt; ，当事件发生并冒泡至 document 处时，React 将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。&lt;br /&gt;
另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用  &lt;code&gt;event.preventDefault&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2089718f74b342869de15f01588f033f~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;react事件绑定原理&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;reactlazy-实现的原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reactlazy-实现的原理&#34;&gt;#&lt;/a&gt; React.lazy () 实现的原理&lt;/h3&gt;
&lt;p&gt;React 的懒加载示例：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; Suspense &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; OtherComponent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; React&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lazy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;./OtherComponent&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;MyComponent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Suspense fallback&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;Loading&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;OtherComponent &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;Suspense&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;React.lazy 原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下 React 源码基于 16.8.0 版本&lt;/p&gt;
&lt;p&gt;React.lazy 的源码实现如下：&lt;/p&gt;
&lt;p&gt;export function lazy&amp;lt;T, R&amp;gt;(ctor: () =&amp;gt; Thenable&amp;lt;T, R&amp;gt;): LazyComponent&amp;lt;T&amp;gt; {&lt;br /&gt;
let lazyType = {&lt;br /&gt;
$$typeof: REACT_LAZY_TYPE,&lt;br /&gt;
_ctor: ctor,&lt;br /&gt;
// React uses these fields to store the result.&lt;br /&gt;
_status: -1,&lt;br /&gt;
_result: null,&lt;br /&gt;
};&lt;/p&gt;
&lt;p&gt;return lazyType;&lt;br /&gt;
}&lt;br /&gt;
 可以看到其返回了一个 LazyComponent 对象。&lt;/p&gt;
&lt;p&gt;而对于 LazyComponent 对象的解析：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;LazyComponent&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; elementType &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; workInProgress&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;elementType&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mountLazyComponent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    current&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    workInProgress&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    elementType&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    updateExpirationTime&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    renderExpirationTime&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mountLazyComponent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token parameter&#34;&gt;_current&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  workInProgress&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  elementType&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  updateExpirationTime&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  renderExpirationTime&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; Component &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;readLazyComponentType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;elementType&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// Pending = 0, Resolved = 1, Rejected = 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; readLazyComponentType&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lazyComponent&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; LazyComponent&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; status &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_status&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;status&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;Resolved&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; Component&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;Rejected&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; mixed &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; error&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;Pending&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;thenable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Thenable&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mixed&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; thenable&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//lazyComponent 首次被渲染&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_status &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Pending&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; ctor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_ctor&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; thenable &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ctor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      thenable&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token parameter&#34;&gt;moduleObject&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_status &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; Pending&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; defaultExport &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; moduleObject&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;default&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_status &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Resolved&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; defaultExport&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token parameter&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_status &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; Pending&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_status &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Rejected&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; error&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// Handle synchronous thenables.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_status&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;Resolved&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;Rejected&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      lazyComponent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;_result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; thenable&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; thenable&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注：如果 readLazyComponentType 函数多次处理同一个 lazyComponent，则可能进入 Pending、Rejected 等 case 中。&lt;/p&gt;
&lt;p&gt;从上述代码中可以看出，对于最初 React.lazy () 所返回的 LazyComponent 对象，其 _status 默认是 -1，所以首次渲染时，会进入 readLazyComponentType 函数中的 default 的逻辑，这里才会真正异步执行 import (url) 操作，由于并未等待，随后会检查模块是否 Resolved，如果已经 Resolved 了（已经加载完毕）则直接返回 moduleObject.default（动态加载的模块的默认导出），否则将通过 throw 将 thenable 抛出到上层。&lt;/p&gt;
&lt;p&gt;为什么要 throw 它？这就要涉及到 Suspense 的工作原理，我们接着往下分析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suspense 原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 React 捕获异常并处理的代码逻辑比较多，这里就不贴源码，感兴趣可以去看 throwException 中的逻辑，其中就包含了如何处理捕获的异常。简单描述一下处理过程，React 捕获到异常之后，会判断异常是不是一个 thenable，如果是则会找到 SuspenseComponent ，如果 thenable 处于 pending 状态，则会将其 children 都渲染成 fallback 的值，一旦 thenable 被 resolve 则 SuspenseComponent 的子组件会重新渲染一次。&lt;/p&gt;
&lt;p&gt;为了便于理解，我们也可以用 componentDidCatch 实现一个自己的 Suspense 组件，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Suspense&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;React&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;componentDidCatch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 判断 err 是否是 thenable&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; err &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;object&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;then &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;function&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; err &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        err&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; fallback&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; children &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;props&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; promise &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; promise &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; fallback &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; children &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;至此，我们分析完了 React 的懒加载原理。简单来说，React 利用 React.lazy 与 import () 实现了渲染时的动态加载 ，并利用 Suspense 来处理异步加载资源时页面应该如何显示的问题。&lt;/p&gt;
&lt;p&gt;参考传送门☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90aG9hbXN5LmdpdGh1Yi5pby9ibG9ncy9yZWFjdC1sYXp5Lw==&#34;&gt;React Lazy 的实现原理&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <category term="React" scheme="https://aaaa8880788.github.io/tags/React/" />
        <updated>2024-03-02T02:52:21.679Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/02.%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
        <title>浏览器知识</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/02.%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
        <content type="html">&lt;h1 id=&#34;浏览器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器&#34;&gt;#&lt;/a&gt; 浏览器&lt;/h1&gt;
&lt;h3 id=&#34;从输入url到页面加载的全过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从输入url到页面加载的全过程&#34;&gt;#&lt;/a&gt; 从输入 URL 到页面加载的全过程&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e44aa8a92602405db3c12161b71e2094~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;从输入URL到页面加载的主干流程&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先在浏览器中输入 URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找缓存：浏览器先查看浏览器缓存 - 系统缓存 - 路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器缓存：浏览器会记录 DNS 一段时间，因此，只是第一个地方解析 DNS 请求；&lt;/li&gt;
&lt;li&gt;操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录 (保存最近的 DNS 查询缓存)；&lt;/li&gt;
&lt;li&gt;路由器缓存：如果上述两个步骤均不能成功获取 DNS 记录，继续搜索路由器缓存；&lt;/li&gt;
&lt;li&gt;ISP 缓存：若上述均失败，继续向 ISP 搜索。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 域名解析：浏览器向 DNS 服务器发起请求，解析该 URL 中的域名对应的 IP 地址。 &lt;code&gt;DNS服务器是基于UDP的，因此会用到UDP协议&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立 TCP 连接：解析出 IP 地址后，根据 IP 地址和默认 80 端口，和服务器建立 TCP 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发起 HTTP 请求：浏览器发起读取文件的 HTTP 请求，，该请求报文作为 TCP 三次握手的第三次数据发送给服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的 html 文件发送给浏览器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭 TCP 连接：通过四次挥手释放 TCP 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器渲染：客户端（浏览器）解析 HTML 内容并渲染出来，浏览器接收到数据包后的解析流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建 DOM 树：词法分析然后解析成 DOM 树（dom tree），是由 dom 元素及属性节点组成，树的根是 document 对象&lt;/li&gt;
&lt;li&gt;构建 CSS 规则树：生成 CSS 规则树（CSS Rule Tree）&lt;/li&gt;
&lt;li&gt;构建 render 树：Web 浏览器将 DOM 和 CSSOM 结合，并构建出渲染树（render tree）&lt;/li&gt;
&lt;li&gt;布局（Layout）：计算出每个节点在屏幕中的位置&lt;/li&gt;
&lt;li&gt;绘制（Painting）：即遍历 render 树，并使用 UI 后端层绘制每个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a90660027f0d4c559732519bad4c6323~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;浏览器渲染流程图&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JS 引擎解析过程：调用 JS 引擎执行 JS 代码（JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建 window 对象：window 对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于 window 的属性和方法，而 DOM Tree 也会映射在 window 的 doucment 对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。&lt;/li&gt;
&lt;li&gt;加载文件：完成 js 引擎分析它的语法与词法是否合法，如果合法进入预编译&lt;/li&gt;
&lt;li&gt;预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为 window 的属性加入到 window 对象中，并给变量赋值为 &#39;undefined&#39;；寻找全局函数声明，把它作为 window 的方法加入到 window 对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在 ES6 中已经解决了，函数提升还存在。&lt;/li&gt;
&lt;li&gt;解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在 ES5 非严格模式下这个变量会成为 window 的一个属性，也就是成为全局变量。string、int 这样的值就是直接把值放在变量的存储空间里，object 对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS 作用域其实就是这样的执行流机制实现的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY4NDkxMDY3MTYyNjU1&#34;&gt;# DNS 域名解析过程&lt;/span&gt; ☞&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyNTk3NzYwOTM1NDYwOTAx&#34;&gt;# 浏览器的工作原理&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议&#34;&gt;#&lt;/a&gt; 在浏览器中输入 URL 到显示页面经历哪些过程，涉及到哪些协议？&lt;/h3&gt;
&lt;p&gt;浏览器要将 URL 解析为 IP 地址，解析域名就要用到 DNS 协议，首先主机会查询 DNS 的缓存，如果没有就给本地 DNS 发送查询请求。DNS 查询分为两种方式，一种是递归查询，一种是迭代查询。如果是迭代查询，本地的 DNS 服务器，向根域名服务器发送查询请求，根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求，然后依次类推直到查询到该域名的 IP 地址。 &lt;code&gt;DNS服务器是基于UDP的，因此会用到UDP协议。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到 IP 地址后，浏览器就要与服务器建立一个 http 连接。因此要用到 http 协议。http 生成一个 get 请求报文，将该报文传给 TCP 层处理，所以还会用到 TCP 协议。如果采用 https 还会使用 https 协议先对 http 数据进行加密。TCP 层如果有需要先将 HTTP 数据包分片，分片依据路径 MTU 和 MSS。TCP 的数据包然后会发送给 IP 层，用到 IP 协议。IP 层通过路由选路，一跳一跳发送到目的地址。当然在一个网段内的寻址是通过以太网协议实现 (也可以是其他物理层协议，比如 PPP，SLIP)，以太网协议需要直到目的 IP 地址的物理地址，有需要 ARP 协议。&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;1、 &lt;code&gt;DNS协议，http协议，https协议属于应用层&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;应用层是体系结构中的最高层。应用层确定进程之间通信的性质以满足用户的需要。这里的进程就是指正在运行的程序。应用层不仅要提供应用进程所需要的信息交换和远地操作，而且还要作为互相作用的应用进程的用户代理，来完成一些为进行语义上有意义的信息交换所必须的功能。应用层直接为用户的应用进程提供服务。&lt;/p&gt;
&lt;p&gt;2、 &lt;code&gt;TCP/UDP属于传输层&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;传输层的任务就是负责主机中两个进程之间的通信。因特网的传输层可使用两种不同协议：即面向连接的传输控制协议 TCP，和无连接的用户数据报协议 UDP。面向连接的服务能够提供可靠的交付，但无连接服务则不保证提供可靠的交付，它只是 “尽最大努力交付”。这两种服务方式都很有用，备有其优缺点。在分组交换网内的各个交换结点机都没有传输层。&lt;/p&gt;
&lt;p&gt;3、 &lt;code&gt;IP协议，ARP协议属于网络层&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;网络层负责为分组交换网上的不同主机提供通信。在发送数据时，网络层将运输层产生的报文段或用户数据报封装成分组或包进行传送。在 TCP/IP 体系中，分组也叫作 IP 数据报，或简称为数据报。网络层的另一个任务就是要选择合适的路由，使源主机运输层所传下来的分组能够交付到目的主机。&lt;/p&gt;
&lt;p&gt;4、数据链路层&lt;/p&gt;
&lt;p&gt;当发送数据时，数据链路层的任务是将在网络层交下来的 IP 数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制、以及流量控制信息等）。控制信息使接收端能够知道 — 个帧从哪个比特开始和到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错。&lt;/p&gt;
&lt;p&gt;5、物理层&lt;/p&gt;
&lt;p&gt;物理层的任务就是透明地传送比特流。在物理层上所传数据的单位是比特。传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆等，并不在物理层之内而是在物理层的下面。因此也有人把物理媒体当做第 0 层。&lt;/p&gt;
&lt;h3 id=&#34;浏览器的主要功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的主要功能&#34;&gt;#&lt;/a&gt; 浏览器的主要功能&lt;/h3&gt;
&lt;p&gt;浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。&lt;/p&gt;
&lt;h3 id=&#34;浏览器的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的工作原理&#34;&gt;#&lt;/a&gt; 浏览器的工作原理&lt;/h3&gt;
&lt;p&gt;渲染引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。&lt;/p&gt;
&lt;p&gt;然后进行如下所示的基本流程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ef6cb226b374e89914a2315e4ca9ba9~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图：渲染引擎的基本流程。&lt;/p&gt;
&lt;p&gt;渲染引擎将开始 &lt;code&gt;解析 HTML 文档&lt;/code&gt; ，并将各标记逐个转化成 “内容树” 上的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM0RPTQ==&#34;&gt;DOM&lt;/span&gt; 节点。同时也会 &lt;code&gt;解析外部 CSS 文件以及样式元素中的样式数据&lt;/code&gt; 。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：&lt;a href=&#34;https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23Render_tree_construction&#34; title=&#34;https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Render_tree_construction&#34;&gt; &lt;code&gt;渲染树&lt;/code&gt; &lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;渲染树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。&lt;/p&gt;
&lt;p&gt;渲染树构建完毕之后，进入 “&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM2xheW91dA==&#34;&gt;布局&lt;/span&gt;” 处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM1BhaW50aW5n&#34;&gt;绘制&lt;/span&gt; - 渲染引擎会遍历渲染树，由用户界面后端层将每个节点绘制出来。&lt;/p&gt;
&lt;p&gt;需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，渲染引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，渲染引擎会将部分内容解析并显示出来。&lt;/p&gt;
&lt;h3 id=&#34;浏览器的主要组成部分是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的主要组成部分是什么&#34;&gt;#&lt;/a&gt; 浏览器的主要组成部分是什么？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户界面&lt;/strong&gt; - 包括地址栏、前进 / 后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器引擎&lt;/strong&gt; - 在用户界面和呈现引擎之间传送指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;呈现引擎&lt;/strong&gt; - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络&lt;/strong&gt; - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户界面后端&lt;/strong&gt; - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript 解释器&lt;/strong&gt;。用于解析和执行 JavaScript 代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt;。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了 “网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。&lt;br /&gt;
&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f83cb61cb9de4a65abeb95e50608af48~tplv-k3u1fbpfcp-watermark.awebp&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图：浏览器的主要组件。&lt;/p&gt;
&lt;p&gt;值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。&lt;/p&gt;
&lt;h3 id=&#34;浏览器是如何渲染ui的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器是如何渲染ui的&#34;&gt;#&lt;/a&gt; 浏览器是如何渲染 UI 的？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;浏览器获取 HTML 文件，然后对文件进行解析，形成 DOM Tree&lt;/li&gt;
&lt;li&gt;与此同时，进行 CSS 解析，生成 Style Rules&lt;/li&gt;
&lt;li&gt;接着将 DOM Tree 与 Style Rules 合成为 Render Tree&lt;/li&gt;
&lt;li&gt;接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标&lt;/li&gt;
&lt;li&gt;随后调用 GPU 进行绘制（Paint），遍历 Render Tree 的节点，并将元素呈现出来&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67b1336692f540c9a81756f93e82c2f5~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dom-tree是如何构建的&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dom-tree是如何构建的&#34;&gt;#&lt;/a&gt; DOM Tree 是如何构建的？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;转码：浏览器将接收到的二进制数据按照指定编码格式转化为 HTML 字符串&lt;/li&gt;
&lt;li&gt;生成 Tokens: 之后开始 parser，浏览器会将 HTML 字符串解析成 Tokens&lt;/li&gt;
&lt;li&gt;构建 Nodes: 对 Node 添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope&lt;/li&gt;
&lt;li&gt;生成 DOM Tree: 通过 node 包含的指针确定的关系构建出 DOM&lt;br /&gt;
Tree&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1dc0f577836c4705bb582b2ac15bc5d1~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;2019-06-22-11-48-00&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;浏览器重绘与重排的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器重绘与重排的区别&#34;&gt;#&lt;/a&gt; 浏览器重绘与重排的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;重排/回流（Reflow）&lt;/code&gt; ：当 &lt;code&gt;DOM&lt;/code&gt;  的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;重绘(Repaint)&lt;/code&gt; : 当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分&lt;/p&gt;
&lt;p&gt;重排和重绘代价是高昂的，它们会破坏用户体验，并且让 UI 展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。&lt;/p&gt;
&lt;p&gt;『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。&lt;/p&gt;
&lt;h3 id=&#34;如何触发重排和重绘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何触发重排和重绘&#34;&gt;#&lt;/a&gt; 如何触发重排和重绘？&lt;/h3&gt;
&lt;p&gt;任何改变用来构建渲染树的信息都会导致一次重排或重绘：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加、删除、更新 DOM 节点&lt;/li&gt;
&lt;li&gt;通过 display: none 隐藏一个 DOM 节点 - 触发重排和重绘&lt;/li&gt;
&lt;li&gt;通过 visibility: hidden 隐藏一个 DOM 节点 - 只触发重绘，因为没有几何变化&lt;/li&gt;
&lt;li&gt;移动或者给页面中的 DOM 节点添加动画&lt;/li&gt;
&lt;li&gt;添加一个样式表，调整样式属性&lt;/li&gt;
&lt;li&gt;用户行为，例如调整窗口大小，改变字号，或者滚动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何避免重绘或者重排&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何避免重绘或者重排&#34;&gt;#&lt;/a&gt; 如何避免重绘或者重排？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;集中改变样式&lt;/code&gt; ，不要一条一条地修改 DOM 的样式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要把 DOM 结点的属性值放在循环里当成循环里的变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为动画的 HTML 元件使用  &lt;code&gt;fixed&lt;/code&gt;  或  &lt;code&gt;absoult&lt;/code&gt;  的  &lt;code&gt;position&lt;/code&gt; ，那么修改他们的 CSS 是不会 reflow 的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽量只修改 &lt;code&gt;position：absolute&lt;/code&gt;  或 &lt;code&gt;fixed&lt;/code&gt;  元素，对其他元素影响不大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动画开始 &lt;code&gt;GPU&lt;/code&gt;  加速， &lt;code&gt;translate&lt;/code&gt;  使用 &lt;code&gt;3D&lt;/code&gt;  变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提升为合成层&lt;/p&gt;
&lt;p&gt;将元素提升为合成层有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合成层的位图，会交由 GPU 合成，比 CPU 处理要快&lt;/li&gt;
&lt;li&gt;当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层&lt;/li&gt;
&lt;li&gt;对于 transform 和 opacity 效果，不会触发 layout 和 paint&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提升合成层的最好方式是使用 CSS 的 will-change 属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#target &amp;#123;
  will-change: transform;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;关于合成层的详解请移步&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cCUzQSUyRiUyRnRhb2Jhb2ZlZC5vcmclMkZibG9nJTJGMjAxNiUyRjA0JTJGMjUlMkZwZXJmb3JtYW5jZS1jb21wb3NpdGUlMkY=&#34;&gt;无线性能优化：Composite&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;介绍下304过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍下304过程&#34;&gt;#&lt;/a&gt; 介绍下 304 过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。&lt;/li&gt;
&lt;li&gt;b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。&lt;/li&gt;
&lt;li&gt;c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;#&lt;/a&gt; 浏览器的缓存机制 强制缓存 &amp;amp;&amp;amp; 协商缓存&lt;/h3&gt;
&lt;p&gt;浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/487144abaada4b9a8b34bc9375191ec7~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;图片&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上图我们可以知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器每次发起请求，都会 &lt;code&gt;先在浏览器缓存中查找该请求的结果以及缓存标识&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浏览器每次拿到返回的请求结果都会 &lt;code&gt;将该结果和缓存标识存入浏览器缓存中&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 &lt;code&gt;强制缓存&lt;/code&gt; 和 &lt;code&gt;协商缓存&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。&lt;/code&gt; 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  &lt;code&gt;Expires&lt;/code&gt;  和  &lt;code&gt;Cache-Control&lt;/code&gt; ，其中 Cache-Control 优先级比 Expires 高。&lt;/p&gt;
&lt;p&gt;强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协商缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程&lt;/code&gt; ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： &lt;code&gt;Last-Modified / If-Modified-Since&lt;/code&gt;  和  &lt;code&gt;Etag / If-None-Match&lt;/code&gt; ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协商缓存生效，返回 304&lt;/li&gt;
&lt;li&gt;协商缓存失效，返回 200 和请求结果结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx&#34;&gt;# 彻底理解浏览器的缓存机制&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;cookie-sessionstorage-localstorage-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie-sessionstorage-localstorage-的区别&#34;&gt;#&lt;/a&gt; Cookie、sessionStorage、localStorage 的区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;相同点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储在客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不同点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie 数据大小不能超过 4k；sessionStorage 和 localStorage 的存储比 cookie 大得多，可以达到 5M+&lt;/li&gt;
&lt;li&gt;cookie 设置的过期时间之前一直有效；localStorage 永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage 数据在当前浏览器窗口关闭后自动删除&lt;/li&gt;
&lt;li&gt;cookie 的数据会自动的传递到服务器；sessionStorage 和 localStorage 数据保存在本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;说下进程-线程和协程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说下进程-线程和协程&#34;&gt;#&lt;/a&gt; 说下进程、线程和协程&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程， &lt;code&gt;是操作系统进行资源分配和调度的一个独立单位&lt;/code&gt; ，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;是程序执行中一个单一的顺序控制流程，是 &lt;code&gt;程序执行流的最小单元&lt;/code&gt; ，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间 (也就是所在进程的内存空间)。一个标准的线程由线程 ID、当前指令指针 (PC)、寄存器和堆栈组成。而进程由内存空间 (代码、数据、进程空间、打开的文件) 和一个或多个线程组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;协程&lt;/strong&gt;，英文 Coroutines，是一种 &lt;code&gt;基于线程之上，但又比线程更加轻量级的存在&lt;/code&gt; ，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程和线程的区别与联系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【区别】：&lt;/p&gt;
&lt;p&gt;调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；&lt;/p&gt;
&lt;p&gt;并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；&lt;/p&gt;
&lt;p&gt;拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。&lt;/p&gt;
&lt;p&gt;系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。&lt;/p&gt;
&lt;p&gt;【联系】：&lt;/p&gt;
&lt;p&gt;一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；&lt;/p&gt;
&lt;p&gt;资源分配给进程，同一进程的所有线程共享该进程的所有资源；&lt;/p&gt;
&lt;p&gt;处理机分给线程，即真正在处理机上运行的是线程；&lt;/p&gt;
&lt;p&gt;线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。&lt;/p&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY1MzgxNzkxODc1MTA5&#34;&gt;# 一文搞懂进程、线程、协程及 JS 协程的发展&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy4zNjBkb2MuY29tL2NvbnRlbnQvMjAvMDQxNy8xNC8zMjE5NjUwN185MDY2Mjg4NTcuc2h0bWw=&#34;&gt;☞了解更多&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;关于浏览器传送门 ☞&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkzMDk1MzQ1NTc2MDgzNDg2&#34;&gt;# 深入了解现代 Web 浏览器&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;进程间的通信方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间的通信方式&#34;&gt;#&lt;/a&gt; 进程间的通信方式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;进程通信&lt;/code&gt; ：&lt;br /&gt;
每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程 A 把数据从用户空间拷到内核缓冲区，进程 B 再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信。&lt;/p&gt;
&lt;p&gt;进程间的通信方式：管道、有名管道、信号、消息队列、共享内存、信号量、socket&lt;/p&gt;
&lt;p&gt;&lt;code&gt;匿名管道( pipe )&lt;/code&gt; ： 管道是一种半双工的通信方式，数据只能&lt;strong&gt;单向流动&lt;/strong&gt;，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指&lt;strong&gt;父子进程关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;高级管道(popen)&lt;/code&gt; ：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;有名管道 (named pipe) &lt;/code&gt; ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;消息队列( message queue )&lt;/code&gt;  ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;信号量( semophore )&lt;/code&gt;  ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;信号 ( sinal )&lt;/code&gt;  ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;共享内存( shared memory )&lt;/code&gt;  ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;套接字( socket ) 通信&lt;/code&gt; ： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信&lt;/p&gt;
&lt;h3 id=&#34;浏览器样式兼容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器样式兼容&#34;&gt;#&lt;/a&gt; 浏览器样式兼容&lt;/h3&gt;
&lt;h4 id=&#34;一-css初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-css初始化&#34;&gt;#&lt;/a&gt; 一、CSS 初始化&lt;/h4&gt;
&lt;p&gt;每个浏览器的 css 默认样式不尽相同，所以最简单有效的方式就是对其进行初始化（覆盖默认样式）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p margin:=&#34;&#34; 0;=&#34;&#34; padding:=&#34;&#34; 0;=&#34;&#34;&gt;常见 :  *&lt;/p&gt;
&lt;p&gt;库：normalize.css&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;二-浏览器私有属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-浏览器私有属性&#34;&gt;#&lt;/a&gt; 二、&lt;strong&gt;浏览器私有属性&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;常用的前缀有：&lt;/p&gt;
&lt;p&gt;firefox 浏览器 ：-moz-&lt;/p&gt;
&lt;p&gt;chrome、safari ：-webkit-&lt;/p&gt;
&lt;p&gt;opera ：-o- / -xv-&lt;/p&gt;
&lt;p&gt;IE 浏览器 ：-ms-（目前只有 IE 8 + 支持）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;三-css-hack条件hack-属性级hack-选择符级hack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-css-hack条件hack-属性级hack-选择符级hack&#34;&gt;#&lt;/a&gt; &lt;strong&gt;三、CSS hack（条件 hack、属性级 hack、选择符级 hack）&lt;/strong&gt;&lt;/h4&gt;
&lt;h3 id=&#34;js垃圾回收机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js垃圾回收机制&#34;&gt;#&lt;/a&gt; JS 垃圾回收机制&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;项目中，如果存在大量不被释放的内存（堆 / 栈 / 上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器垃圾回收机制 / 内存回收机制:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浏览器的 &lt;code&gt;Javascript&lt;/code&gt;  具有自动垃圾回收机制 ( &lt;code&gt;GC:Garbage Collecation&lt;/code&gt; )，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;标记清除&lt;/strong&gt;：在 &lt;code&gt;js&lt;/code&gt;  中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为 “进入环境”，当变量离开执行环境时，会被标记为 “离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。&lt;br /&gt;
&lt;strong&gt;谷歌浏览器&lt;/strong&gt;：“查找引用”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收。&lt;br /&gt;
&lt;strong&gt;IE 浏览器&lt;/strong&gt;：“引用计数法”，当前内存被占用一次，计数累加 1 次，移除占用就减 1，减到 0 时，浏览器就回收它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化手段：内存优化；手动释放：取消内存的占用即可。&lt;/p&gt;
&lt;p&gt;（1）堆内存：fn = null 【null：空指针对象】&lt;/p&gt;
&lt;p&gt;（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存泄漏&lt;/p&gt;
&lt;p&gt;在 JS 中，常见的内存泄露主要有 4 种，全局变量、闭包、DOM 元素的引用、定时器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <category term="浏览器知识" scheme="https://aaaa8880788.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9F%A5%E8%AF%86/" />
        <updated>2024-03-02T02:52:21.678Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/03.HTML%20&amp;&amp;%20CSS/</id>
        <title>Html-css</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/03.HTML%20&amp;&amp;%20CSS/"/>
        <content type="html">&lt;h2 id=&#34;html-css&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html-css&#34;&gt;#&lt;/a&gt; HTML &amp;amp;&amp;amp; CSS&lt;/h2&gt;
&lt;h3 id=&#34;html5-新特性-语义化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html5-新特性-语义化&#34;&gt;#&lt;/a&gt; HTML5 新特性、语义化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;HTML5 的语义化指的是 &lt;code&gt;合理正确的使用语义化的标签来创建页面结构&lt;/code&gt; 。【正确的标签做正确的事】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语义化标签&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;header nav main article section aside footer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;语义化的优点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;没CSS样式的情况下，页面整体也会呈现很好的结构效果&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;代码结构清晰&lt;/code&gt; ，易于阅读，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;利于开发和维护&lt;/code&gt;  方便其他设备解析（如屏幕阅读器）根据语义渲染网页。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;有利于搜索引擎优化（SEO）&lt;/code&gt; ，搜索引擎爬虫会根据不同的标签来赋予不同的权重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;html5新特性有哪些&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html5新特性有哪些&#34;&gt;#&lt;/a&gt; HTML5 新特性有哪些&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;语义化标签&lt;/li&gt;
&lt;li&gt;音视频处理 API (audio,video)&lt;/li&gt;
&lt;li&gt;canvas / webGL&lt;/li&gt;
&lt;li&gt;拖拽释放 (Drag and drop) API&lt;/li&gt;
&lt;li&gt;history API&lt;/li&gt;
&lt;li&gt;requestAnimationFrame&lt;/li&gt;
&lt;li&gt;地理位置 (Geolocation) API&lt;/li&gt;
&lt;li&gt;webSocket&lt;/li&gt;
&lt;li&gt;web 存储 localStorage、SessionStorage&lt;/li&gt;
&lt;li&gt;表单控件，calendar、date、time、email、url、search&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;css-选择器及优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-选择器及优先级&#34;&gt;#&lt;/a&gt; CSS 选择器及优先级&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;选择器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id 选择器 (#myid)&lt;/li&gt;
&lt;li&gt;类选择器 (.myclass)&lt;/li&gt;
&lt;li&gt;属性选择器 (a [rel=&amp;quot;external&amp;quot;])&lt;/li&gt;
&lt;li&gt;伪类选择器 (a:hover, li:nth-child)&lt;/li&gt;
&lt;li&gt;标签选择器 (div, h1,p)&lt;/li&gt;
&lt;li&gt;相邻选择器（h1 + p）&lt;/li&gt;
&lt;li&gt;子选择器 (ul&amp;gt; li)&lt;/li&gt;
&lt;li&gt;后代选择器 (li a)&lt;/li&gt;
&lt;li&gt;通配符选择器 (*)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优先级：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!important&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联样式（1000）&lt;/li&gt;
&lt;li&gt;ID 选择器（0100）&lt;/li&gt;
&lt;li&gt;类选择器 / 属性选择器 / 伪类选择器（0010）&lt;/li&gt;
&lt;li&gt;元素选择器 / 伪元素选择器（0001）&lt;/li&gt;
&lt;li&gt;关系选择器 / 通配符选择器（0000）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;带！important 标记的样式属性优先级最高； 样式表的来源相同时：&lt;br /&gt;
 &lt;code&gt;!important &amp;gt; 行内样式&amp;gt;ID选择器 &amp;gt; 类选择器 &amp;gt; 标签 &amp;gt; 通配符 &amp;gt; 继承 &amp;gt; 浏览器默认属性&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;渐进增强与优雅降级的理解及区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#渐进增强与优雅降级的理解及区别&#34;&gt;#&lt;/a&gt; 渐进增强与优雅降级的理解及区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;渐进增强（Progressive Enhancement）：&lt;/strong&gt;&lt;br /&gt;
一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优雅降级（Graceful Degradation）：&lt;/strong&gt;&lt;br /&gt;
一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。&lt;br /&gt;
&lt;strong&gt;两者区别&lt;/strong&gt;&lt;br /&gt;
 1、广义：&lt;br /&gt;
其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级&lt;br /&gt;
 2、狭义：&lt;br /&gt;
渐进增强一般说的是使用 CSS3 技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现 html 标签的语义，以便在 js/css 的加载失败 / 被禁用时，也不影响用户的相应功能。&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 例子 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.transition&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 渐进增强写法 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token property&#34;&gt;-moz-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token property&#34;&gt;-o-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token property&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.transition&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* 优雅降级写法 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token property&#34;&gt;transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token property&#34;&gt;-o-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token property&#34;&gt;-moz-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;-webkit-transition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; all .5s&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;常见的兼容性问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的兼容性问题&#34;&gt;#&lt;/a&gt; 常见的兼容性问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li margin:0;padding:0;=&#34;&#34;&gt;
&lt;p&gt;不同浏览器的标签默认的 margin 和 padding 不一样。*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IE6 双边距 bug：块属性标签 float 后，又有横行的 margin 情况下，在 IE6 显示 margin 比设置的大。hack：display:inline; 将其转化为行内属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置较小高度标签（一般小于 10px），在 IE6，IE7 中高度超出自己设置高度。hack：给超出高度的标签设置 overflow:hidden; 或者设置行高 line-height 小于你设置的高度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示，可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不再具有 hover 和 active 了。解决方法是改变 CSS 属性的排列顺序：L-V-H-A (love hate): a:link {} a:visited {} a:hover {} a:active {}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;css3新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css3新特性&#34;&gt;#&lt;/a&gt; CSS3 新特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;过渡&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 所有属性从原始值到制定值的一个过渡，运动曲线 ease, 运动时间 0.5 秒 */&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;transition：all&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;5s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;动画&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//animation：动画名称，一个周期花费时间，运动曲线（默认 ease），动画延迟（默认 0），播放次数（默认 1），是否反向播放动画（默认 normal），是否暂停动画（默认 running）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 执行一次 logo2-line 动画，运动时间 2 秒，运动曲线为 linear*/&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;animation&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; logo2&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;line 2s linear&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;形状转换&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//transform: 适用于 2D 或 3D 转换的元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//transform-origin：转换元素的位置（围绕那个点进行转换）。默认 (x,y,z)：(50%,50%,0)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;translate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30px&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;30px&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;rotate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;30deg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token literal-property property&#34;&gt;transform&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;scale&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选择器:nth-of-type ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阴影&lt;br /&gt;
文字阴影: text-shadow: 2px 2px 2px #000;(水平阴影，垂直阴影，模糊距离，阴影颜色) 盒子阴影: box-shadow: 10px 10px 5px #999&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边框 border-image: url (border.png);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;渐变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filter（滤镜）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弹性布局、栅格布局、多列布局&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;媒体查询&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;position-属性的值有哪些及其区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#position-属性的值有哪些及其区别&#34;&gt;#&lt;/a&gt; position 属性的值有哪些及其区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;固定定位 fixed&lt;/strong&gt;： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相对定位 relative&lt;/strong&gt;： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素 “相对于” 它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝对定位 absolute&lt;/strong&gt;： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;粘性定位 sticky&lt;/strong&gt;： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;默认定位 Static&lt;/strong&gt;： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。&lt;/p&gt;
&lt;h3 id=&#34;box-sizing属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#box-sizing属性&#34;&gt;#&lt;/a&gt; box-sizing 属性&lt;/h3&gt;
&lt;p&gt;box-sizing 规定两个并排的带边框的框，语法为 box-sizing：content-box/border-box/inherit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;content-box&lt;/strong&gt;：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。【标准盒子模型】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;border-box&lt;/strong&gt;：为元素设定的宽度和高度决定了元素的边框盒。【IE 盒子模型】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;inherit&lt;/strong&gt;：继承父元素的 box-sizing 值。&lt;/p&gt;
&lt;h3 id=&#34;css-盒子模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-盒子模型&#34;&gt;#&lt;/a&gt; CSS 盒子模型&lt;/h3&gt;
&lt;p&gt;CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。&lt;br /&gt;
在标准的盒子模型中， &lt;code&gt;width 指 content 部分的宽度&lt;/code&gt; 。&lt;br /&gt;
在 IE 盒子模型中， &lt;code&gt;width 表示 content+padding+border 这三个部分的宽度&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;故在计算盒子的宽度时存在差异：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准盒模型：&lt;/strong&gt; 一个块的总宽度 = width+margin (左右)+padding (左右)+border (左右)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;怪异盒模型：&lt;/strong&gt; 一个块的总宽度 = width+margin（左右）（既 width 已经包含了 padding 和 border 值）&lt;/p&gt;
&lt;h3 id=&#34;bfc块级格式上下文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bfc块级格式上下文&#34;&gt;#&lt;/a&gt; BFC（块级格式上下文）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;BFC 的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BFC&lt;/code&gt;  是  &lt;code&gt;Block Formatting Context &lt;/code&gt; 的缩写，即块级格式化上下文。 &lt;code&gt;BFC&lt;/code&gt;  是 CSS 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BFC 的原理布局规则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部的 Box 会在 &lt;code&gt;垂直方向&lt;/code&gt; ，一个接一个地放置&lt;/li&gt;
&lt;li&gt;Box &lt;code&gt;垂直方向的距离由margin决定&lt;/code&gt; 。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠&lt;/li&gt;
&lt;li&gt;每个元素的 margin box 的左边， 与包含块 border box 的左边相接触 (对于从左往右的格式化，否则相反&lt;/li&gt;
&lt;li&gt;BFC 的区域 &lt;code&gt;不会与float box重叠&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BFC 是一个独立容器，容器里面的 &lt;code&gt;子元素不会影响到外面的元素&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;计算 BFC 的高度时， &lt;code&gt;浮动元素也参与计算高度&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;元素的类型和 &lt;code&gt;display属性，决定了这个Box的类型&lt;/code&gt; 。不同类型的 Box 会参与不同的 &lt;code&gt;Formatting Context&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;如何创建 BFC？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根元素，即 HTML 元素&lt;/li&gt;
&lt;li&gt;float 的值不为 none&lt;/li&gt;
&lt;li&gt;position 为 absolute 或 fixed&lt;/li&gt;
&lt;li&gt;display 的值为 inline-block、table-cell、table-caption&lt;/li&gt;
&lt;li&gt;overflow 的值不为 visible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;BFC 的使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去除边距重叠现象&lt;/li&gt;
&lt;li&gt;清除浮动（让父元素的高度包含子浮动元素）&lt;/li&gt;
&lt;li&gt;避免某元素被浮动元素覆盖&lt;/li&gt;
&lt;li&gt;避免多列布局由于宽度计算四舍五入而自动换行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;让一个元素水平垂直居中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#让一个元素水平垂直居中&#34;&gt;#&lt;/a&gt; 让一个元素水平垂直居中&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;水平居中&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于 行内元素 :  &lt;code&gt;text-align: center&lt;/code&gt; ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于确定宽度的块级元素：&lt;/p&gt;
&lt;p&gt;（1）width 和 margin 实现。 &lt;code&gt;margin: 0 auto&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;（2）绝对定位和 margin-left: margin-left: (父 width - 子 width）/2, 前提是父元素 position: relative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于宽度未知的块级元素&lt;/p&gt;
&lt;p&gt;（1） &lt;code&gt;table标签配合margin左右auto实现水平居中&lt;/code&gt; 。使用 table 标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右 margin 为 auto。&lt;/p&gt;
&lt;p&gt;（2）inline-block 实现水平居中方法。display：inline-block 和 text-align:center 实现水平居中。&lt;/p&gt;
&lt;p&gt;（3） &lt;code&gt;绝对定位+transform&lt;/code&gt; ，translateX 可以移动本身元素的 50%。&lt;/p&gt;
&lt;p&gt;（4）flex 布局使用 &lt;code&gt;justify-content:center&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;垂直居中&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用  &lt;code&gt;line-height&lt;/code&gt;  实现居中，这种方法适合纯文字类&lt;/li&gt;
&lt;li&gt;通过设置父容器 相对定位 ，子级设置  &lt;code&gt;绝对定位&lt;/code&gt; ，标签通过 margin 实现自适应居中&lt;/li&gt;
&lt;li&gt;弹性布局 flex : 父级设置 display: flex; 子级设置 margin 为 auto 实现自适应居中&lt;/li&gt;
&lt;li&gt;父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table 布局&lt;/code&gt; ，父级通过转换成表格形式， &lt;code&gt;然后子级设置 vertical-align 实现&lt;/code&gt; 。（需要注意的是：vertical-align: middle 使用的前提条件是内联元素以及 display 值为 table-cell 的元素）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA4MzQ4NTI0NTMwMTA2Mzgx&#34;&gt;# 图解 CSS 水平垂直居中常见面试方法&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;隐藏页面中某个元素的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐藏页面中某个元素的方法&#34;&gt;#&lt;/a&gt; 隐藏页面中某个元素的方法&lt;/h3&gt;
&lt;p&gt;1. &lt;code&gt;opacity：0&lt;/code&gt; ，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如 click 事件，那么点击该区域，也能触发点击事件的&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;visibility：hidden&lt;/code&gt; ，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）&lt;/p&gt;
&lt;p&gt;3. &lt;code&gt;display：none&lt;/code&gt; ，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流 + 重绘）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该问题会引出 回流和重绘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;用css实现三角符号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用css实现三角符号&#34;&gt;#&lt;/a&gt; 用 CSS 实现三角符号&lt;/h3&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 记忆口诀：盒子宽高均为零，三面边框皆透明。 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;div:after&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; absolute&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 0px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-right&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid transparent&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid #ff0&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-left&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid transparent&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token property&#34;&gt;border-bottom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 100px solid transparent&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;页面布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页面布局&#34;&gt;#&lt;/a&gt; 页面布局&lt;/h3&gt;
&lt;h4 id=&#34;1flex-布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1flex-布局&#34;&gt;#&lt;/a&gt; 1.Flex 布局&lt;/h4&gt;
&lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。&lt;/p&gt;
&lt;p&gt;Flex 是 Flexible Box 的缩写，意为 &amp;quot;弹性布局&amp;quot;, 用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。&lt;/p&gt;
&lt;p&gt;容器的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li flex-flow:=&#34;&#34; ||=&#34;&#34; ;=&#34;&#34;&gt;flex-flow： .box&lt;/li&gt;
&lt;li&gt;justify-content：对其方式，水平主轴对齐方式&lt;/li&gt;
&lt;li&gt;align-items：对齐方式，竖直轴线方向&lt;/li&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目的属性（元素的属性）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0&lt;/li&gt;
&lt;li&gt;flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大&lt;/li&gt;
&lt;li&gt;flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小&lt;/li&gt;
&lt;li&gt;flex-basis 属性：定义了在分配多余的空间，项目占据的空间。&lt;/li&gt;
&lt;li&gt;flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。&lt;/li&gt;
&lt;li&gt;align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖&lt;/li&gt;
&lt;li&gt;align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2rem-布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2rem-布局&#34;&gt;#&lt;/a&gt; 2.Rem 布局&lt;/h4&gt;
&lt;p&gt;首先 Rem 相对于根 (html) 的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;, 那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：可以快速适用移动端布局，字体，图片高度&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;①目前 ie 不支持，对 pc 页面来讲使用次数不多；&lt;br /&gt;
②数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；&lt;br /&gt;
③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。&lt;/p&gt;
&lt;h4 id=&#34;3百分比布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3百分比布局&#34;&gt;#&lt;/a&gt; 3. 百分比布局&lt;/h4&gt;
&lt;p&gt;通过百分比单位 &amp;quot;%&amp;quot; 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（1）计算困难&lt;br /&gt;
（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。&lt;/p&gt;
&lt;h4 id=&#34;4浮动布局&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4浮动布局&#34;&gt;#&lt;/a&gt; 4. 浮动布局&lt;/h4&gt;
&lt;p&gt;浮动布局：当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与 inline-block 还是有一些区别的，第一个就是关于横向排序的时候，float 可以设置方向而 inline-block 方向是固定的；还有一个就是 inline-block 在使用时有时会有空白间隙的问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素， &lt;code&gt;会造成父级元素高度塌陷&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;如何使用rem或viewport进行移动端适配&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何使用rem或viewport进行移动端适配&#34;&gt;#&lt;/a&gt; 如何使用 rem 或 viewport 进行移动端适配&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;rem 适配原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;改变了一个元素在不同设备上占据的 css 像素的个数&lt;/p&gt;
&lt;p&gt;rem 适配的优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：没有破坏完美视口&lt;/li&gt;
&lt;li&gt;缺点：px 值转换 rem 太过于复杂 (下面我们使用 less 来解决这个问题)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;viewport 适配的原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;viewport 适配方案中，每一个元素在不同设备上占据的 css 像素的个数是一样的。但是 css 像素和物理像素的比例是不一样的，等比的&lt;/p&gt;
&lt;p&gt;viewport 适配的优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在我们设计图上所量取的大小即为我们可以设置的像素大小，即所量即所设&lt;/li&gt;
&lt;li&gt;缺点破坏完美视口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;清除浮动的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#清除浮动的方式&#34;&gt;#&lt;/a&gt; 清除浮动的方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加额外标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;parent&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    //添加额外标签并且添加clear属性&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token special-attr&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token value css language-css&#34;&gt;&lt;span class=&#34;token property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;both&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    //也可以加一个br标签&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;父级添加 overflow 属性，或者设置高度&lt;/li&gt;
&lt;li&gt;建立伪类选择器清除浮动&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 在 css 中添加:after 伪元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parent&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;after&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加子元素的内容是空 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加子元素为块级元素 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; block&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加的子元素的高度 0 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置添加子元素看不见 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;visibility&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; hidden&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;/* 设置 clear：both */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; both&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;css预处理器sass-less-stylus的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css预处理器sass-less-stylus的区别&#34;&gt;#&lt;/a&gt; CSS 预处理器 Sass、Less、Stylus 的区别&lt;/h3&gt;
&lt;p&gt;什么事 CSS 预处理器？&lt;/p&gt;
&lt;p&gt;CSS 预处理器是一种语言用来为 CSS 增加一些变成的特性，无需考虑浏览器兼容问题，例如你可以在 CSS 中使用变量，简单的程序逻辑、函数等在编程语言中的一些基本技巧，可以让 CSS 更加简洁，适应性更强，代码更直观等诸多好处&lt;br /&gt;
基本语法区别&lt;/p&gt;
&lt;p&gt;Sass 是以.sass 为扩展名，Less 是以.less 为扩展名，Stylus 是以.styl 为扩展名&lt;br /&gt;
变量的区别&lt;/p&gt;
&lt;p&gt;Sass 变量必须是以 &lt;code&gt;$&lt;/code&gt;  开头的，然后变量和值之间使用冒号（：）隔开，和 css 属性是一样的。&lt;br /&gt;
Less 变量是以 &lt;code&gt;@&lt;/code&gt; 开头的，其余 sass 都是一样的。&lt;br /&gt;
Stylus 对变量是没有任何设定的，可以是以 $ 开头或者任意字符，而且变量之间可以冒号，空格隔开，但是在 stylus 中不能用 @开头&lt;br /&gt;
三种预处理器都有：嵌套、运算符、颜色函数、导入、继承、混入。Stylus 还有一些高级特性。例如循环、判断等&lt;/p&gt;
</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <category term="Html-css" scheme="https://aaaa8880788.github.io/tags/Html-css/" />
        <updated>2024-03-02T02:52:21.678Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/04.JavaScript/</id>
        <title>Javascript</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/04.JavaScript/"/>
        <content type="html">&lt;h2 id=&#34;javascript&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#javascript&#34;&gt;#&lt;/a&gt; JavaScript&lt;/h2&gt;
&lt;h3 id=&#34;js中的8种数据类型及区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js中的8种数据类型及区别&#34;&gt;#&lt;/a&gt; JS 中的 8 种数据类型及区别&lt;/h3&gt;
&lt;p&gt;包括值类型 (基本对象类型) 和引用类型 (复杂对象类型)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本类型 (值类型)：&lt;/strong&gt; Number (数字),String (字符串),Boolean (布尔),Symbol (符号),null (空),undefined (未定义) 在内存中占据固定大小，保存在栈内存中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用类型 (复杂数据类型)：&lt;/strong&gt; Object (对象)、Function (函数)。其他还有 Array (数组)、Date (日期)、RegExp (正则表达式)、特殊的基本包装类型 (String、Number、Boolean) 以及单体内置对象 (Global、Math) 等 引用类型的值是对象 保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Symbol：使用 Symbol 来作为对象属性名 (key)  利用该特性，把一些不需要对外操作和访问的属性使用 Symbol 来定义&lt;/p&gt;
&lt;p&gt;BigInt：由于在 Number 与 BigInt 之间进行转换会损失精度，因而建议仅在值可能大于 253 时使用 BigInt 类型，并且不在两种类型之间进行相互转换。&lt;/p&gt;
&lt;p&gt;传送门 ☞&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAwNzU0ODEzODAxNzc1MTEx&#34;&gt;# JavaScript 数据类型之 Symbol、BigInt&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;js中的数据类型检测方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js中的数据类型检测方案&#34;&gt;#&lt;/a&gt; JS 中的数据类型检测方案&lt;/h3&gt;
&lt;h4 id=&#34;1typeof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1typeof&#34;&gt;#&lt;/a&gt; 1.typeof&lt;/h4&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;               &lt;span class=&#34;token comment&#34;&gt;// number&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; Symbol&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;// function&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;// function&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// function&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// object &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// object&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;            &lt;span class=&#34;token comment&#34;&gt;// object&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;优点：能够快速区分基本数据类型&lt;/p&gt;
&lt;p&gt;缺点：不能将 Object、Array 和 Null 区分，都返回 object&lt;/p&gt;
&lt;h4 id=&#34;2instanceof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2instanceof&#34;&gt;#&lt;/a&gt; 2.instanceof&lt;/h4&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                    &lt;span class=&#34;token comment&#34;&gt;// false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Boolean&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;// false &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;str&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;// false  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                    &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;token comment&#34;&gt;// true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;优点：能够区分 Array、Object 和 Function，适合用于判断自定义的类实例对象&lt;/p&gt;
&lt;p&gt;缺点：Number，Boolean，String 基本数据类型不能判断&lt;/p&gt;
&lt;h4 id=&#34;3objectprototypetostringcall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3objectprototypetostringcall&#34;&gt;#&lt;/a&gt; 3.Object.prototype.toString.call()&lt;/h4&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; toString &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toString&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;//[object Number]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//[object Boolean]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;mc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//[object String]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;//[object Array]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;//[object Object]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//[object Function]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//[object Undefined]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//[object Null]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;优点：精准判断数据类型&lt;/p&gt;
&lt;p&gt;缺点：写法繁琐不容易记，推荐进行封装后使用&lt;/p&gt;
&lt;h4 id=&#34;instanceof-的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#instanceof-的作用&#34;&gt;#&lt;/a&gt; instanceof 的作用&lt;/h4&gt;
&lt;p&gt;用于判断一个引用类型是否属于某构造函数；&lt;/p&gt;
&lt;p&gt;还可以在继承关系中用来判断一个实例是否属于它的父类型。&lt;/p&gt;
&lt;h4 id=&#34;instanceof-和-typeof-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#instanceof-和-typeof-的区别&#34;&gt;#&lt;/a&gt; instanceof 和 typeof 的区别：&lt;/h4&gt;
&lt;p&gt;typeof 在对值类型 number、string、boolean 、null 、 undefined、 以及引用类型的 function 的反应是精准的；但是，对于对象 {} 、数组 [] 、null 都会返回 object&lt;/p&gt;
&lt;p&gt;为了弥补这一点，instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型。&lt;/p&gt;
&lt;h3 id=&#34;var-let-const&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#var-let-const&#34;&gt;#&lt;/a&gt; var &amp;amp;&amp;amp; let &amp;amp;&amp;amp; const&lt;/h3&gt;
&lt;p&gt;ES6 之前创建变量用的是 var, 之后创建变量用的是 let/const&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三者区别&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;var 定义的变量， &lt;code&gt;没有块的概念，可以跨块访问&lt;/code&gt; ，不能跨函数访问。&lt;br /&gt;
let 定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。&lt;br /&gt;
const 用来定义常量，使用时必须初始化 (即必须赋值)，只能在块作用域里访问，且不能修改。&lt;/li&gt;
&lt;li&gt;var 可以 &lt;code&gt;先使用，后声明&lt;/code&gt; ，因为存在变量提升；let 必须先声明后使用。&lt;/li&gt;
&lt;li&gt;var 是允许在相同作用域内 &lt;code&gt;重复声明同一个变量&lt;/code&gt; 的，而 let 与 const 不允许这一现象。&lt;/li&gt;
&lt;li&gt;在全局上下文中，基于 let 声明的全局变量和全局对象 GO（window）没有任何关系；&lt;br /&gt;
var 声明的变量会和 GO 有映射关系；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;会产生暂时性死区&lt;/code&gt; ：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;暂时性死区是浏览器的 bug：检测一个未被声明的变量类型时，不会报错，会返回 undefined&lt;br /&gt;
 如：console.log (typeof a) //undefined&lt;br /&gt;
 而：console.log (typeof a)// 未声明之前不能使用&lt;br /&gt;
 let a&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;let /const/function 会把当前所在的大括号 (除函数之外) 作为一个全新的块级上下文，应用这个机制，在开发项目的时候，遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于 let 的块作用特征即可解决&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;作用域和作用域链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域和作用域链&#34;&gt;#&lt;/a&gt; 作用域和作用域链&lt;/h3&gt;
&lt;p&gt;创建函数的时候，已经声明了当前函数的作用域 ==&amp;gt; &lt;code&gt;当前创建函数所处的上下文&lt;/code&gt; 。如果是在全局下创建的函数就是 &lt;code&gt;[[scope]]:EC(G)&lt;/code&gt; ，函数执行的时候，形成一个全新的私有上下文 &lt;code&gt;EC(FN)&lt;/code&gt; ，供字符串代码执行 (进栈执行)&lt;/p&gt;
&lt;p&gt;定义：简单来说作用域就是变量与函数的可访问范围， &lt;code&gt;由当前环境与上层环境的一系列变量对象组成&lt;/code&gt; &lt;br /&gt;
 1. 全局作用域：代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。&lt;br /&gt;
2. 函数作用域：在固定的代码片段才能被访问&lt;/p&gt;
&lt;p&gt;作用：作用域最大的用处就是 &lt;code&gt;隔离变量&lt;/code&gt; ，不同作用域下同名变量不会有冲突。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作用域链参考链接&lt;/strong&gt;一般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。&lt;/p&gt;
&lt;h3 id=&#34;闭包的两大作用保存保护&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#闭包的两大作用保存保护&#34;&gt;#&lt;/a&gt; 闭包的两大作用：保存 / 保护&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闭包的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数执行时形成的私有上下文 EC (FN)，正常情况下，代码执行完会出栈后释放；但是特殊情况下，如果当前私有上下文中的某个东西被上下文以外的事物占用了，则上下文不会出栈释放，从而形成不销毁的上下文。 函数执行函数执行过程中，会形成一个全新的私有上下文，可能会被释放，可能不会被释放，不论释放与否，他的作用是：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（1）保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）；&lt;/p&gt;
&lt;p&gt;（2）保存：如果当前上下文不被释放【只要上下文中的某个东西被外部占用即可】，则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来了；&lt;/p&gt;
&lt;p&gt;我们把函数执行形成私有上下文，来保护和保存私有变量机制称为 &lt;code&gt;闭包&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是指有权访问另一个函数作用域中的变量的函数 --《JavaScript 高级程序设计》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;稍全面的回答&lt;/strong&gt;： 在 js 中变量的作用域属于函数作用域，在函数执行完后，作用域就会被清理，内存也会随之被回收，但是由于闭包函数是建立在函数内部的子函数，由于其可访问上级作用域，即使上级函数执行完，作用域也不会随之销毁，这时的子函数 (也就是闭包), 便拥有了访问上级作用域中变量的权限，即使上级函数执行完后作用域内的值也不会被销毁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闭包的特性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1、内部函数可以访问定义他们外部函数的参数和变量。(作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁) 设计私有的方法和变量，避免全局变量的污染。&lt;/p&gt;
&lt;p&gt;1.1. 闭包是密闭的容器，，类似于 set、map 容器，存储数据的&lt;/p&gt;
&lt;p&gt;1.2. 闭包是一个对象，存放数据的格式为 key-value 形式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2、函数嵌套函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3、本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闭包形成的条件&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数的嵌套&lt;/li&gt;
&lt;li&gt;内部函数引用外部函数的局部变量，延长外部函数的变量生命周期&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闭包的用途&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模仿块级作用域&lt;/li&gt;
&lt;li&gt;保护外部函数的变量 能够访问函数定义时所在的词法作用域 (阻止其被回收)&lt;/li&gt;
&lt;li&gt;封装私有化变量&lt;/li&gt;
&lt;li&gt;创建模块&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闭包应用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;闭包的两个场景，闭包的两大作用： &lt;code&gt;保存/保护&lt;/code&gt; 。 在开发中，其实我们随处可见闭包的身影，大部分前端 JavaScript 代码都是 “事件驱动” 的，即一个事件绑定的回调方法；发送 ajax 请求成功 | 失败的回调；setTimeout 的延时回调；或者一个函数内部返回另一个匿名函数，这些都是闭包的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闭包的优点&lt;/strong&gt;：延长局部变量的生命周期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闭包缺点&lt;/strong&gt;：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;js-中-this-的情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js-中-this-的情况&#34;&gt;#&lt;/a&gt; JS 中 this 的情况&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;普通函数调用：通过函数名 () 直接调用： &lt;code&gt;this&lt;/code&gt;  指向 &lt;code&gt;全局对象window&lt;/code&gt; （注意 let 定义的变量不是 window 属性，只有 window.xxx 定义的才是。即 let a =’aaa’; this.a 是 undefined）&lt;/li&gt;
&lt;li&gt;构造函数调用：函数作为构造函数，用 new 关键字调用时： &lt;code&gt;this&lt;/code&gt;  指向 &lt;code&gt;新new出的对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对象函数调用：通过对象。函数名 () 调用的： &lt;code&gt;this&lt;/code&gt;  指向 &lt;code&gt;这个对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;箭头函数调用：箭头函数里面没有 this ，所以 &lt;code&gt;永远是上层作用域this&lt;/code&gt; （上下文）&lt;/li&gt;
&lt;li&gt;apply 和 call 调用：函数体内 this 的指向的是 call/apply 方法 &lt;code&gt;第一个参数&lt;/code&gt; ，若为空默认是指向全局对象 window。&lt;/li&gt;
&lt;li&gt;函数作为数组的一个元素，通过数组下标调用的：this 指向这个数组&lt;/li&gt;
&lt;li&gt;函数作为 window 内置函数的回调函数调用：this 指向 window（如 setInterval setTimeout 等）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;callapplybind-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#callapplybind-的区别&#34;&gt;#&lt;/a&gt; call/apply/bind 的区别&lt;/h3&gt;
&lt;p&gt;相同：&lt;/p&gt;
&lt;p&gt;1、都是用来改变函数的 this 对象的指向的。&lt;br /&gt;
2、第一个参数都是 this 要指向的对象。&lt;br /&gt;
3、都可以利用后续参数传参。&lt;/p&gt;
&lt;p&gt;不同：&lt;/p&gt;
&lt;p&gt;apply 和 call 传入的参数列表形式不同。apply 接收 arguments，call 接收一串参数列表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn.call(obj, 1, 2);
fn.apply(obj, [1, 2]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;bind：语法和 call 一模一样，区别在于立即执行还是等待执行，bind 不兼容 IE6~8&lt;br /&gt;
bind 主要就是将函数绑定到某个对象，bind () 会创建一个函数，返回对应函数便于稍后调用；而 apply、call 则是立即调用。&lt;/p&gt;
&lt;p&gt;总结：基于 Function.prototype 上的  &lt;code&gt;apply 、 call 和 bind &lt;/code&gt; 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。 &lt;code&gt;apply&lt;/code&gt;  接收参数的是数组， &lt;code&gt;call&lt;/code&gt;  接受参数列表，`` bind &lt;code&gt;方法通过传入一个对象，返回一个&lt;/code&gt;  this  &lt;code&gt;绑定了传入对象的新函数。这个函数的 &lt;/code&gt; this &lt;code&gt;指向除了使用&lt;/code&gt;  new ` 时会被改变，其他情况下都不会改变。若为空默认是指向全局对象 window。&lt;/p&gt;
&lt;p&gt;参考：☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hleGlueXVfMTAyMi9hcnRpY2xlL2RldGFpbHMvODI3OTU1MTc=&#34;&gt;call、apply、bind 三者的用法和区别&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;箭头函数的特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#箭头函数的特性&#34;&gt;#&lt;/a&gt; 箭头函数的特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;箭头函数没有自己的this&lt;/code&gt; ，会捕获其所在的上下文的 this 值，作为自己的 this 值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;箭头函数没有constructor&lt;/code&gt; ，是匿名函数，不能作为构造函数，不能通过 new 调用；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;没有new.target 属性&lt;/code&gt; 。在通过 new 运算符被初始化的函数或构造方法中，new.target 返回一个指向构造方法或函数的引用。在普通的函数调用中，new.target 的值是 undefined&lt;/li&gt;
&lt;li&gt;&lt;code&gt;箭头函数不绑定Arguments 对象&lt;/code&gt; 。取而代之用 rest 参数... 解决。由于 箭头函数没有自己的 this 指针，通过 call () 或 apply () 方法调用一个函数时，只能传递参数（不能绑定 this），他们的第一个参数会被忽略。（这种现象对于 bind 方法同样成立）&lt;/li&gt;
&lt;li&gt;箭头函数通过 call ()  或   apply () 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。&lt;/li&gt;
&lt;li&gt;箭头函数没有原型属性 Fn.prototype 值为 undefined&lt;/li&gt;
&lt;li&gt;箭头函数不能当做 Generator 函数，不能使用 yield 关键字&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYml1Yml1eGl4aXlhL3AvODYxMDU5NC5odG1s&#34;&gt;箭头函数与普通函数的区别&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;原型-原型链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型-原型链&#34;&gt;#&lt;/a&gt; 原型 &amp;amp;&amp;amp; 原型链&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原型关系：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个 class 都有显示原型 prototype&lt;/li&gt;
&lt;li&gt;每个实例都有隐式原型  &lt;code&gt;__proto__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实例的  &lt;code&gt;__proto__&lt;/code&gt;  指向对应 class 的 prototype&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;‌ &lt;strong&gt;原型:&lt;/strong&gt;  在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个 &lt;code&gt;函数对象&lt;/code&gt; 都有一个 &lt;code&gt;prototype&lt;/code&gt;  属性，这个属性指向函数的 &lt;code&gt;原型对象&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;原型链：函数的原型链对象 constructor 默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__, 该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向 Object 的原型对象上，而 Object 原型对象用 Object.prototype.__ proto__ = null 表示原型链顶端。如此形成了 js 的原型链继承。同时所有的 js 对象都有 Object 的基本防范&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点:&lt;/strong&gt;   &lt;code&gt;JavaScript&lt;/code&gt;  对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。&lt;/p&gt;
&lt;h3 id=&#34;new运算符的实现机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#new运算符的实现机制&#34;&gt;#&lt;/a&gt; new 运算符的实现机制&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先创建了一个新的 &lt;code&gt;空对象&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;设置原型&lt;/code&gt; ，将对象的原型设置为函数的 &lt;code&gt;prototype&lt;/code&gt;  对象。&lt;/li&gt;
&lt;li&gt;让函数的 &lt;code&gt;this&lt;/code&gt;  指向这个对象，执行构造函数的代码（为这个新对象添加属性）&lt;/li&gt;
&lt;li&gt;判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;eventloop-事件循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#eventloop-事件循环&#34;&gt;#&lt;/a&gt; EventLoop 事件循环&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;JS&lt;/code&gt;  是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是， &lt;code&gt;Promise.then&lt;/code&gt; ， &lt;code&gt;MutationObserver&lt;/code&gt; ，宏任务的话就是 &lt;code&gt;setImmediate setTimeout setInterval&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;JS 运行的环境。一般为浏览器或者 Node。 在浏览器环境中，有 JS 引擎线程和渲染线程，且两个线程互斥。 Node 环境中，只有 JS 线程。 不同环境执行机制有差异，不同任务进入不同 Event Queue 队列。 当主程结束，先执行准备好微任务，然后再执行准备好的宏任务，一个轮询结束。&lt;/p&gt;
&lt;h4 id=&#34;浏览器中的事件环event-loop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器中的事件环event-loop&#34;&gt;#&lt;/a&gt; &lt;strong&gt;浏览器中的事件环（Event Loop)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;事件环的运行机制是，先会执行栈中的内容，栈中的内容执行后执行微任务，微任务清空后再执行宏任务，先取出一个宏任务，再去执行微任务，然后在取宏任务清微任务这样不停的循环。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;eventLoop 是由 JS 的宿主环境（浏览器）来实现的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件循环可以简单的描述为以下四个步骤:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数入栈，当 Stack 中执行到异步任务的时候，就将他丢给 WebAPIs, 接着执行同步任务，直到 Stack 为空；&lt;/li&gt;
&lt;li&gt;此期间 WebAPIs 完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列）&lt;/li&gt;
&lt;li&gt;执行栈为空时，Event Loop 把微任务队列执行清空；&lt;/li&gt;
&lt;li&gt;微任务队列清空后，进入宏任务队列，取队列的第一项任务放入 Stack (栈）中执行，执行完成后，查看微任务队列是否有任务，有的话，清空微任务队列。重复 4，继续从宏任务中取任务执行，执行完成之后，继续清空微任务，如此反复循环，直至清空所有的任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/342e581223d2471d9484fc48beb9f8e1~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;事件循环流程&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器中的任务源 (task):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;宏任务(macrotask)&lt;/code&gt; ：&lt;br /&gt;
宿主环境提供的，比如浏览器&lt;br /&gt;
 ajax、setTimeout、setInterval、setTmmediate (只兼容 ie)、script、requestAnimationFrame、messageChannel、UI 渲染、一些浏览器 api&lt;/li&gt;
&lt;li&gt;&lt;code&gt;微任务(microtask)&lt;/code&gt; ：&lt;br /&gt;
语言本身提供的，比如 promise.then&lt;br /&gt;
then、queueMicrotask (基于 then)、mutationObserver (浏览器提供)、messageChannel 、mutationObersve&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAxODgxNzgxMTI1MjUxMDg2&#34;&gt;# 宏任务和微任务&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;node-环境中的事件环event-loop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#node-环境中的事件环event-loop&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Node 环境中的事件环（Event Loop)&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Node&lt;/code&gt;  是基于 V8 引擎的运行在服务端的 &lt;code&gt;JavaScript&lt;/code&gt;  运行环境，在处理高并发、I/O 密集 (文件操作、网络操作、数据库操作等) 场景有明显的优势。虽然用到也是 V8 引擎，但由于服务目的和环境不同，导致了它的 API 与原生 JS 有些区别，其 Event Loop 还要处理一些 I/O，比如新的网络连接等，所以 Node 的 Event Loop (事件环机制) 与浏览器的是不太一样。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e362c1770f62428fbf3faabd99d2a64c~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;2020120317343116.png&#34; /&gt; 执行顺序如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timers&lt;/code&gt; : 计时器，执行 setTimeout 和 setInterval 的回调&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pending callbacks&lt;/code&gt; : 执行延迟到下一个循环迭代的 I/O 回调&lt;/li&gt;
&lt;li&gt;&lt;code&gt;idle, prepare&lt;/code&gt; : 队列的移动，仅系统内部使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poll轮询&lt;/code&gt; ：检索新的 I/O 事件；执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check&lt;/code&gt; : 执行 &lt;code&gt;setImmediate&lt;/code&gt;  回调，setImmediate 在这里执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close callbacks&lt;/code&gt; : 执行 &lt;code&gt;close&lt;/code&gt;  事件的 &lt;code&gt;callback&lt;/code&gt; ，一些关闭的回调函数，如：socket.on (&#39;close&#39;, ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;settimeout-promise-asyncawait-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#settimeout-promise-asyncawait-的区别&#34;&gt;#&lt;/a&gt; setTimeout、Promise、Async/Await 的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;setTimeout&lt;/p&gt;
&lt;p&gt;settimeout 的回调函数放到宏任务队列里，等到执行栈清空以后执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Promise&lt;/p&gt;
&lt;p&gt;Promise 本身是&lt;strong&gt;同步的立即执行函数&lt;/strong&gt;， 当在 executor 中执行 resolve 或者 reject 的时候，此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script start&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; promise1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;promise1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;promise1 end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;promise2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;settimeout&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;async/await&lt;/p&gt;
&lt;p&gt;async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;async1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;async1 start&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;async2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;async1 end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;async2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;async2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script start&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;async1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script end&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk5NjUxMDExMzA0MzU3OTI1&#34;&gt;# JavaScript Promise 专题&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;asyncawait-如何通过同步的方式实现异步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#asyncawait-如何通过同步的方式实现异步&#34;&gt;#&lt;/a&gt; Async/Await 如何通过同步的方式实现异步&lt;/h3&gt;
&lt;p&gt;Async/Await 就是一个&lt;strong&gt;自执行&lt;/strong&gt;的 generate 函数。利用 generate 函数的特性把异步的代码写成 “同步” 的形式，第一个请求的返回值作为后面一个请求的参数，其中每一个参数都是一个 promise 对象.&lt;/p&gt;
&lt;h3 id=&#34;介绍节流防抖原理-区别以及应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍节流防抖原理-区别以及应用&#34;&gt;#&lt;/a&gt; 介绍节流防抖原理、区别以及应用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;节流&lt;/code&gt; ：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;防抖&lt;/code&gt; ：多次触发事件，事件处理函数只能执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发准备执行事件函数前，会等待一定的时间（这时间是码农自己去定义的，比如 1 秒），如果没有再次被触发，那么就执行，如果被触发了，那就本次作废，重新从新触发的时间开始计算，并再次等待 1 秒，直到能最终执行！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;使用场景&lt;/code&gt; ：&lt;br /&gt;
节流：滚动加载更多、搜索框搜的索联想功能、高频点击、表单重复提交……&lt;br /&gt;
 防抖：搜索框搜索输入，并在输入完以后自动搜索、手机号，邮箱验证输入检测、窗口大小 resize 变化后，再重新渲染。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 节流函数 一个函数执行一次后，只有大于设定的执行周期才会执行第二次。有个需要频繁触发的函数，出于优化性能的角度，在规定时间内，只让函数触发的第一次生效，后面的不生效。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @param fn 要被节流的函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @param delay 规定的时间&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;throttle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 记录上一次函数触发的时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; lastTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 记录当前函数触发的时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; nowTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nowTime &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; lastTime &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; delay&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 修正 this 指向问题&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 同步执行结束时间&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            lastTime &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nowTime&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;onscroll &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;throttle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;scllor事件被触发了&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; Date&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/**&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * 防抖函数  一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @param fn 要被节流的函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * @param delay 规定的时间&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;debounce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 记录上一次的延时器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; timer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token comment&#34;&gt;// 清除上一次的演示器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;clearTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;timer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 重新设置新的延时器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        timer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 修正 this 指向问题&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; delay&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;btn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;onclick &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;debounce&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;按钮被点击了&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; Date&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="Javascript" scheme="https://aaaa8880788.github.io/tags/Javascript/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <updated>2024-03-02T02:52:21.678Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/web-interview/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
        <title>计算机网络</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/web-interview/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
        <content type="html">&lt;h1 id=&#34;http-和-https&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-和-https&#34;&gt;#&lt;/a&gt; HTTP 和 HTTPS&lt;/h1&gt;
&lt;h3 id=&#34;http-的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-的基本概念&#34;&gt;#&lt;/a&gt; HTTP 的基本概念&lt;/h3&gt;
&lt;p&gt;http: 是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端 &lt;code&gt;请求和应答的标准（TCP）&lt;/code&gt; ，用于从 WWW 服务器传输超文本到本地浏览器的 &lt;code&gt;超文本传输协议&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;http工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http工作原理&#34;&gt;#&lt;/a&gt; HTTP 工作原理&lt;/h3&gt;
&lt;p&gt;HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。&lt;/p&gt;
&lt;h3 id=&#34;http请求响应的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http请求响应的步骤&#34;&gt;#&lt;/a&gt; HTTP 请求 / 响应的步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1. 客户端连接到 Web 服务器&lt;/li&gt;
&lt;li&gt;2. 发送 HTTP 请求&lt;/li&gt;
&lt;li&gt;3. 服务器接受请求并返回 HTTP 响应&lt;/li&gt;
&lt;li&gt;4. 释放 TCP 连接&lt;/li&gt;
&lt;li&gt;5. 客户端（浏览器）解析 HTML 内容&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：连接发送加响应，释放解析整过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;http-的-5-种方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-的-5-种方法&#34;&gt;#&lt;/a&gt; HTTP 的 5 种方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GET--- 获取资源&lt;/li&gt;
&lt;li&gt;POST--- 传输资源&lt;/li&gt;
&lt;li&gt;PUT--- 更新资源&lt;/li&gt;
&lt;li&gt;DELETE--- 删除资源&lt;/li&gt;
&lt;li&gt;HEAD--- 获取报文首部&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get与post的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get与post的区别&#34;&gt;#&lt;/a&gt; GET 与 POST 的区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 浏览器回退表现不同&lt;/strong&gt; GET 在浏览器回退时是无害的，而 POST 会再次提交请求&lt;br /&gt;
&lt;strong&gt; 2. 浏览器对请求地址的处理不同&lt;/strong&gt; GET 请求地址会被浏览器主动缓存，而 POST 不会，除非手动设置&lt;br /&gt;
&lt;strong&gt; 3. 浏览器对响应的处理不同&lt;/strong&gt; GET 请求参数会被完整的保留在浏览器历史记录里，而 POST 中的参数不会被保留&lt;br /&gt;
&lt;strong&gt; 4. 参数大小不同.&lt;/strong&gt; GET 请求在 URL 中传送的参数是有长度的限制，而 POST 没有限制&lt;br /&gt;
&lt;strong&gt; 5. 安全性不同.&lt;/strong&gt; GET 参数通过 URL 传递，会暴露，不安全；POST 放在 Request Body 中，相对更安全&lt;br /&gt;
&lt;strong&gt; 6. 针对数据操作的类型不同&lt;/strong&gt;.GET 对数据进行查询，POST 主要对数据进行增删改！简单说，GET 是只读，POST 是写。&lt;/p&gt;
&lt;h3 id=&#34;http报文的组成成分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http报文的组成成分&#34;&gt;#&lt;/a&gt; HTTP 报文的组成成分&lt;/h3&gt;
&lt;p 状态行、响应头、空行、响应体=&#34;&#34;&gt;请求报文 {请求行、请求头、空行、请求体} 请求行：{http 方法、页面地址、http 协议、http 版本} 响应报文&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Request Header:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;GET /sample.Jsp HTTP/1.1&lt;/strong&gt;  // 请求行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host:&lt;/strong&gt;  www.uuid.online/// 请求的目标域名和端口号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Origin:&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgxLw==&#34;&gt;http://localhost:8081/&lt;/span&gt;  // 请求的来源域名和端口号 （跨域请求时，浏览器会自动带上这个头信息）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Referer:&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MS9saW5rP3F1ZXJ5PXh4eHh4&#34;&gt;https://localhost:8081/link?query=xxxxx&lt;/span&gt; // 请求资源的完整 URI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User-Agent:&lt;/strong&gt; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 // 浏览器信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cookie:&lt;/strong&gt;  BAIDUID=FA89F036:FG=1; BD_HOME=1; sugstore=0  // 当前域名下的 Cookie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accept:&lt;/strong&gt; text/html,image/apng  // 代表客户端希望接受的数据类型是 html 或者是 png 图片类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accept-Encoding:&lt;/strong&gt; gzip, deflate  // 代表客户端能支持 gzip 和 deflate 格式的压缩&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accept-Language:&lt;/strong&gt; zh-CN,zh;q=0.9  // 代表客户端可以支持语言 zh-CN 或者 zh (值得一提的是 q (0~1) 是优先级权重的意思，不写默认为 1，这里 zh-CN 是 1，zh 是 0.9)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connection:&lt;/strong&gt; keep-alive  // 告诉服务器，客户端需要的 tcp 连接是一个长连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Response Header:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HTTP/1.1 200 OK&lt;/strong&gt;  // 响应状态行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date:&lt;/strong&gt;  Mon, 30 Jul 2018 02:50:55 GMT  // 服务端发送资源时的服务器时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expires:&lt;/strong&gt;  Wed, 31 Dec 1969 23:59:59 GMT // 比较过时的一种验证缓存的方式，与浏览器（客户端）的时间比较，超过这个时间就不用缓存（不和服务器进行验证），适合版本比较稳定的网页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cache-Control:&lt;/strong&gt;  no-cache  // 现在最多使用的控制缓存的方式，会和服务器进行缓存验证，具体见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYW1pZXpoYW5nL3AvOTM4OTUzNy5odG1s&#34;&gt;博文”Cache-Control“&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;etag:&lt;/strong&gt;  &amp;quot;fb8ba2f80b1d324bb997cbe188f28187-ssl-df&amp;quot;  // 一般是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy50MDg2LmNvbS9hcnRpY2xlLzUyMDc=&#34;&gt; Nginx 静态服务器&lt;/span&gt;发来的静态文件签名，浏览在没有 “Disabled cache” 情况下，接收到 etag 后，同一个 url 第二次请求就会自动带上 “If-None-Match”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Last-Modified:&lt;/strong&gt;  Fri, 27 Jul 2018 11:04:55 GMT // 是服务器发来的当前资源最后一次修改的时间，下次请求时，如果服务器上当前资源的修改时间大于这个时间，就返回新的资源内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content-Type:&lt;/strong&gt;  text/html; charset=utf-8  // 如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是 utf8 编码，否则可能出现乱码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content-Encoding:&lt;/strong&gt;  gzip  // 告诉客户端，应该采用 gzip 对资源进行解码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connection:&lt;/strong&gt;  keep-alive  // 告诉客户端服务器的 tcp 连接也是一个长连接&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;https-的基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https-的基本概念&#34;&gt;#&lt;/a&gt; https 的基本概念&lt;/h3&gt;
&lt;p&gt;https: 是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。&lt;/p&gt;
&lt;p&gt;https 协议的作用：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。&lt;/p&gt;
&lt;h3 id=&#34;http-和-https-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-和-https-的区别&#34;&gt;#&lt;/a&gt; http 和 https 的区别？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。&lt;/li&gt;
&lt;li&gt;Https 协议需要 ca 证书，费用较高。&lt;/li&gt;
&lt;li&gt;使用不同的链接方式，端口也不同，一般，http 协议的端口为 80，https 的端口为 443。&lt;/li&gt;
&lt;li&gt;http 的连接很简单，是无状态的。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：明文传输超文本，安全等级各不同。CA 证书费用高，无状连接端难同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;https-协议的工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https-协议的工作原理&#34;&gt;#&lt;/a&gt; https 协议的工作原理&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c42bc6f45451457fa6d614fb27534516~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端使用 https url 访问服务器，则要求 web 服务器 &lt;code&gt;建立 ssl 链接&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;web 服务器接收到客户端的请求之后，会 &lt;code&gt;将网站的证书（证书中包含了公钥），传输给客户端&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;客户端和 web 服务器端开始 &lt;code&gt;协商 SSL 链接的安全等级&lt;/code&gt; ，也就是加密等级。&lt;/li&gt;
&lt;li&gt;客户端浏览器通过双方协商一致的安全等级， &lt;code&gt;建立会话密钥&lt;/code&gt; ，然后通过网站的公钥来加密会话密钥，并传送给网站。&lt;/li&gt;
&lt;li&gt;web 服务器 &lt;code&gt;通过自己的私钥解密出会话密钥&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;web 服务器 &lt;code&gt;通过会话密钥加密与客户端之间的通信&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：一连二传三协商，四建五得六使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;https-协议的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#https-协议的优缺点&#34;&gt;#&lt;/a&gt; https 协议的优缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HTTPS 协议要比 http 协议 &lt;code&gt;安全&lt;/code&gt; ，可防止数据在传输过程中被窃取、改变，确保数据的完整性。&lt;/li&gt;
&lt;li&gt;https 握手阶段比较 &lt;code&gt;费时&lt;/code&gt; ，会使页面加载时间延长 50%，增加 10%~20% 的耗电。&lt;/li&gt;
&lt;li&gt;https  &lt;code&gt;缓存&lt;/code&gt; 不如 http 高效，会增加数据开销。&lt;/li&gt;
&lt;li&gt;SSL 证书也需要钱，功能越强大的 &lt;code&gt;证书费&lt;/code&gt; 用越高。&lt;/li&gt;
&lt;li&gt;SSL 证书需要绑定  &lt;code&gt;IP&lt;/code&gt; ，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcpip网络模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpip网络模型&#34;&gt;#&lt;/a&gt; TCP/IP 网络模型&lt;/h3&gt;
&lt;p&gt;TCP/IP 模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链路层：负责封装和解封装 IP 报文，发送和接受 ARP/RARP 报文等。&lt;/li&gt;
&lt;li&gt;网络层：负责路由以及把分组报文发送给目标网络或主机。&lt;/li&gt;
&lt;li&gt;传输层：负责对报文进行分组和重组，并以 TCP 或 UDP 协议格式封装报文。&lt;/li&gt;
&lt;li&gt;应用层：负责向用户提供应用程序，比如 HTTP、FTP、Telnet、DNS、SMTP 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa80b3b48a84bd18d8e708c56a1dc22~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;tcp三次握手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp三次握手&#34;&gt;#&lt;/a&gt; TCP 三次握手&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baf3d5df95a74f47a1d779ee50c3411f~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次握手： &lt;code&gt;建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认&lt;/code&gt; ；SYN：同步序列编号（Synchronize Sequence Numbers）。&lt;/li&gt;
&lt;li&gt;第二次握手： &lt;code&gt;服务器收到syn包并确认客户的SYN&lt;/code&gt; （ack=j+1）， &lt;code&gt;同时也发送一个自己的SYN包&lt;/code&gt; （syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；&lt;/li&gt;
&lt;li&gt;第三次握手： &lt;code&gt;客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）&lt;/code&gt; ，此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP 连接成功）状态，完成三次握手。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tcp-四次挥手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp-四次挥手&#34;&gt;#&lt;/a&gt; TCP 四次挥手&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;客户端进程发出连接释放报文&lt;/code&gt; ，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为 seq=u（等于前面已经传送过来的数据的最后一个字节的序号加 1），此时，客户端进入 FIN-WAIT-1（终止等待 1）状态。 TCP 规定，FIN 报文段即使不携带数据，也要消耗一个序号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2） &lt;code&gt;服务器收到连接释放报文，发出确认报文&lt;/code&gt; ，ACK=1，ack=u+1，并且带上自己的序列号 seq=v，此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。TCP 服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。&lt;/p&gt;
&lt;p&gt;3）客户端收到服务器的确认请求后，此时，客户端就进入 FIN-WAIT-2（终止等待 2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。&lt;/p&gt;
&lt;p&gt;4） &lt;code&gt;服务器将最后的数据发送完毕后，就向客户端发送连接释放报文&lt;/code&gt; ，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq=w，此时，服务器就进入了 LAST-ACK（最后确认）状态，等待客户端的确认。&lt;/p&gt;
&lt;p&gt;5） &lt;code&gt;客户端收到服务器的连接释放报文后，必须发出确认&lt;/code&gt; ，ACK=1，ack=w+1，而自己的序列号是 seq=u+1，此时，客户端就进入了 TIME-WAIT（时间等待）状态。注意此时 TCP 连接还没有释放，必须经过 2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态。&lt;/p&gt;
&lt;p&gt;6）服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。可以看到，服务器结束 TCP 连接的时间要比客户端早一些。&lt;/p&gt;
&lt;h3 id=&#34;tcp和udp的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcp和udp的区别&#34;&gt;#&lt;/a&gt; TCP 和 UDP 的区别&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;TCP 是面向 &lt;code&gt;连接&lt;/code&gt; 的，而 UDP 是面向无连接的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 仅支持 &lt;code&gt;单播传输&lt;/code&gt; ，UDP 提供了单播，多播，广播的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP 的三次握手保证了连接的 &lt;code&gt;可靠性&lt;/code&gt; ；UDP 是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP 的 &lt;code&gt;头部开销&lt;/code&gt; 比 TCP 的更小，数据 &lt;code&gt;传输速率更高&lt;/code&gt; ， &lt;code&gt;实时性更好&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;http-请求跨域问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-请求跨域问题&#34;&gt;#&lt;/a&gt; HTTP 请求跨域问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;跨域的原理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域&lt;/strong&gt;，是指浏览器不能执行其他网站的脚本。它是由浏览器的 &lt;code&gt;同源策略&lt;/code&gt; 造成的。&lt;br /&gt;
&lt;strong&gt;同源策略&lt;/strong&gt;，是浏览器对 JavaScript 实施的安全限制，只要 &lt;code&gt;协议、域名、端口&lt;/code&gt; 有任何一个不同，都被当作是不同的域。&lt;br /&gt;
&lt;strong&gt;跨域原理&lt;/strong&gt;，即是通过各种方式， &lt;code&gt;避开浏览器的安全限制&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;p&gt;最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JSONP&lt;/strong&gt;：&lt;br /&gt;
ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去创建一个 script 标签&lt;/li&gt;
&lt;li&gt;script 的 src 属性设置接口地址&lt;/li&gt;
&lt;li&gt;接口参数，必须要带一个自定义函数名，要不然后台无法返回数据&lt;/li&gt;
&lt;li&gt;通过定义函数名去接受返回的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 动态创建 script&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; script &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置回调函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置 script 的 src 属性，并设置请求地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;script&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://localhost:3000/?callback=getData&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 让 script 生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;script&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;JSONP 的缺点&lt;/strong&gt;:&lt;br /&gt;
JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;document.domain&lt;/strong&gt;  基础域名相同 子域名不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dpbmRvdy5uYW1l&#34;&gt;window.name&lt;/span&gt;&lt;/strong&gt; 利用在一个浏览器窗口内，载入所有的域名都是共享一个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dpbmRvdy5uYW1l&#34;&gt;window.name&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CORS&lt;/strong&gt; CORS (Cross-origin resource sharing) 跨域资源共享 服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;proxy 代理&lt;/strong&gt; 目前常用方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;window.postMessage()&lt;/strong&gt;  利用 h5 新特性 window.postMessage ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Websocket&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;cookie-sessionstorage-localstorage-的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie-sessionstorage-localstorage-的区别&#34;&gt;#&lt;/a&gt; Cookie、sessionStorage、localStorage 的区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;相同点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储在客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不同点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie 数据大小不能超过 4k；sessionStorage 和 localStorage 的存储比 cookie 大得多，可以达到 5M+&lt;/li&gt;
&lt;li&gt;cookie 设置的过期时间之前一直有效；localStorage 永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage 数据在当前浏览器窗口关闭后自动删除&lt;/li&gt;
&lt;li&gt;cookie 的数据会自动的传递到服务器；sessionStorage 和 localStorage 数据保存在本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http状态码及常见状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态码及常见状态码&#34;&gt;#&lt;/a&gt; HTTP 状态码及常见状态码&lt;/h3&gt;
&lt;h4 id=&#34;http状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http状态码&#34;&gt;#&lt;/a&gt; HTTP 状态码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1xx：指示信息类，表示请求已接受，继续处理&lt;/li&gt;
&lt;li&gt;2xx：指示成功类，表示请求已成功接受&lt;/li&gt;
&lt;li&gt;3xx：指示重定向，表示要完成请求必须进行更近一步的操作&lt;/li&gt;
&lt;li&gt;4xx：指示客户端错误，请求有语法错误或请求无法实现&lt;/li&gt;
&lt;li&gt;5xx：指示服务器错误，服务器未能实现合法的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见状态码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见状态码&#34;&gt;#&lt;/a&gt; 常见状态码&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;200 OK：客户端请求成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;301 Moved Permanently：所请求的页面已经永久重定向至新的 URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;302 Found：所请求的页面已经临时重定向至新的 URL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;304 Not Modified 未修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;403 Forbidden：对请求页面的访问被禁止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;404 Not Found：请求资源不存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100 - 继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分&lt;/li&gt;
&lt;li&gt;101 - 切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2xx（成功）表示成功处理了请求的状态码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;200&lt;/code&gt;  - 成功 服务器已经成功处理了请求。通常，这表示服务器提供了请求的网页&lt;/li&gt;
&lt;li&gt;201 - 已创建 请求成功并且服务器创建了新的资源&lt;/li&gt;
&lt;li&gt;202 - 已接受 服务器已接受请求，但尚未处理&lt;/li&gt;
&lt;li&gt;203 - 非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源&lt;/li&gt;
&lt;li&gt;204 - 无内容 服务器成功处理了请求，但没有返回任何内容&lt;/li&gt;
&lt;li&gt;205 - 重置内容 服务器成功处理了请求，但没有返回任何内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3xx（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;300 - 多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;301&lt;/code&gt;  - 永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;302&lt;/code&gt;  - 临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求&lt;/li&gt;
&lt;li&gt;303 - 查看其它位置 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;304&lt;/code&gt;  - 未修改 自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容&lt;/li&gt;
&lt;li&gt;305 - 使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;307&lt;/code&gt;  - 临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;400&lt;/code&gt;  - 错误请求 服务器不理解请求的语法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;401&lt;/code&gt;  - 未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;403&lt;/code&gt;  - 禁止 服务器拒绝请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;404&lt;/code&gt;  - 未找到 服务器找不到请求的网页&lt;/li&gt;
&lt;li&gt;405 - 方法禁用 禁用请求中指定的方法&lt;/li&gt;
&lt;li&gt;406 - 不接受 无法使用请求的内容特性响应请求的网页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;407&lt;/code&gt;  - 需要代理授权 此状态码与 401（未授权）类似，但指定请求者应当授权使用代理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;408&lt;/code&gt;  - 请求超时 服务器等候请求时发生超时&lt;/li&gt;
&lt;li&gt;410 - 已删除 如果请求的资源已永久删除，服务器就会返回此响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;413&lt;/code&gt;  - 请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力&lt;/li&gt;
&lt;li&gt;&lt;code&gt;414&lt;/code&gt;  - 请求的 URI 过长 请求的 URI（通常为网址）过长，服务器无法处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5xx（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;500&lt;/code&gt;  - 服务器内部错误 服务器遇到错误，无法完成请求&lt;/li&gt;
&lt;li&gt;501 - 尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;502&lt;/code&gt;  - 错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应&lt;/li&gt;
&lt;li&gt;&lt;code&gt;503&lt;/code&gt;  - 服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;504&lt;/code&gt;  - 网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求&lt;/li&gt;
&lt;li&gt;505 - HTTP 版本不受支持 服务器不支持请求中所用的 HTTP 协议版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介绍下304过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#介绍下304过程&#34;&gt;#&lt;/a&gt; 介绍下 304 过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器的缓存机制-强制缓存-协商缓存&#34;&gt;#&lt;/a&gt; 浏览器的缓存机制 强制缓存 &amp;amp;&amp;amp; 协商缓存&lt;/h3&gt;
&lt;p&gt;浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05b3fe9c411f4881a8b22fe37eae170b~tplv-k3u1fbpfcp-zoom-1.image&#34; alt=&#34;图片&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由上图我们可以知道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器每次发起请求，都会 &lt;code&gt;先在浏览器缓存中查找该请求的结果以及缓存标识&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浏览器每次拿到返回的请求结果都会 &lt;code&gt;将该结果和缓存标识存入浏览器缓存中&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 &lt;code&gt;强制缓存&lt;/code&gt; 和 &lt;code&gt;协商缓存&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。&lt;/code&gt; 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  &lt;code&gt;Expires&lt;/code&gt;  和  &lt;code&gt;Cache-Control&lt;/code&gt; ，其中 Cache-Control 优先级比 Expires 高。&lt;/p&gt;
&lt;p&gt;强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。&lt;/li&gt;
&lt;li&gt;存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协商缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程&lt;/code&gt; ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： &lt;code&gt;Last-Modified / If-Modified-Since&lt;/code&gt;  和  &lt;code&gt;Etag / If-None-Match&lt;/code&gt; ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协商缓存生效，返回 304&lt;/li&gt;
&lt;li&gt;协商缓存失效，返回 200 和请求结果结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0ce991db4847b98d9f049f9ffa5c93~tplv-k3u1fbpfcp-watermark.image&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx&#34;&gt;# 彻底理解浏览器的缓存机制&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;http-请求跨域问题-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http-请求跨域问题-2&#34;&gt;#&lt;/a&gt; HTTP 请求跨域问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;跨域的原理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域&lt;/strong&gt;，是指浏览器不能执行其他网站的脚本。它是由浏览器的 &lt;code&gt;同源策略&lt;/code&gt; 造成的。跨域访问是被各大浏览器所默认禁止的。&lt;br /&gt;
&lt;strong&gt;同源策略&lt;/strong&gt;，是浏览器对 JavaScript 实施的安全限制，只要 &lt;code&gt;协议、域名、端口&lt;/code&gt; 有任何一个不同，都被当作是不同的域。&lt;br /&gt;
&lt;strong&gt;跨域原理&lt;/strong&gt;，即是通过各种方式， &lt;code&gt;避开浏览器的安全限制&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;p&gt;最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JSONP&lt;/strong&gt;：&lt;br /&gt;
ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。&lt;/p&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去创建一个 script 标签&lt;/li&gt;
&lt;li&gt;script 的 src 属性设置接口地址&lt;/li&gt;
&lt;li&gt;接口参数，必须要带一个自定义函数名，要不然后台无法返回数据&lt;/li&gt;
&lt;li&gt;通过定义函数名去接受返回的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 动态创建 script&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; script &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;script&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置回调函数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置 script 的 src 属性，并设置请求地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;script&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://localhost:3000/?callback=getData&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 让 script 生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;body&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;script&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;JSONP 的缺点&lt;/strong&gt;:&lt;br /&gt;
JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;document.domain&lt;/strong&gt; 基础域名相同 子域名不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3dpbmRvdy5uYW1l&#34;&gt;window.name&lt;/span&gt;&lt;/strong&gt; 利用在一个浏览器窗口内，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS13aW5kb3ctOW03aWdsMjNibzhwMWQ4MTZhaW1uMW05YXdsbXVqZDV5OWd6NjdldzdmLm5hbWU=&#34;&gt;载入所有的域名都是共享一个 window.name&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;br /&gt;
CORS (Cross-origin resource sharing) 跨域资源共享 是一种机制，是目前主流的跨域解决方案，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求&lt;/p&gt;
&lt;p&gt;1. 浏览器端会自动向请求头添加 origin 字段，表明当前请求来源。&lt;br /&gt;
2. 服务器设置 Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers 等 HTTP 响应头字段之后，浏览器将会允许跨域请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预检&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是还有复杂一点的请求，我们需要先发 OPTIONS 请求，a.com 想请求 b.com 它需要发一个自定义的 Headers：X-ABC 和 content-type，这个时候就不是简单请求了， &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2EueG4tLWNvbWItMjk1azQxNGMuY29t&#34;&gt;a.com 要给 b.com&lt;/span&gt; 发一个 options 请求，它其实在问 b.com 我用 post 行不行，还想在 Headers 中带 X-ABC 和 content-type；并不是所有的 headers 都发这个 OPTIONS 请求，因为 X-ABC 是自定义的，所以需要发；b.com 看到 OPTIONS 请求，先不会返回数据，先检查自己的策略，看看能不能支持这次请求，如果支持就返回 200。&lt;/p&gt;
&lt;p&gt;OPTIONS 请求返回以下报文&lt;/p&gt;
&lt;p&gt;HTTP/2.0 20 OK&lt;br /&gt;
Access-Control-Allow-Origin:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hLmNvbQ==&#34;&gt;https://a.com&lt;/span&gt;&lt;br /&gt;
Access-Control-Allow-Methods:POST,GET,OPTIONS&lt;br /&gt;
Access-Control-Allow-Headers:X-ABC,Content-Type&lt;br /&gt;
Access-Control-Max-Age:86400 // 告诉浏览器这个策略生效时间为一个小时，在一个小时之内发送类似的请求，不用在问服务端了，相当于缓存了&lt;br /&gt;
浏览器收到了 OPTIONS 的返回，会在发一次，这一次才是真正的请求数据，这次 headers 会带上 X-ABC、contentType。&lt;/p&gt;
&lt;p&gt;整体的过程 cors 将请求分为 2 种，简单请求和复杂请求，需不需要发送 OPTIONS 浏览器说的算，浏览器判断是简单请求还是复杂请求，cors 是非常广泛的跨域手段 这里的缺点是 OPTIONS 请求也是一次请求，消耗带宽，真正的请求也会延迟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最方便的跨域方案 &lt;strong&gt;proxy 代理 + Nginx&lt;/strong&gt;&lt;br /&gt;
nginx 是一款极其强大的 web 服务器，其优点就是轻量级、启动快、高并发。&lt;/p&gt;
&lt;p&gt;跨域问题的产生是因为浏览器的同源政策造成的，但是服务器与服务器之间的数据交换是没有这个限制。&lt;/p&gt;
&lt;p&gt;反向代理就是采用这种方式，建立一个虚拟的代理服务器来接收 internet 上的链接请求，然后转发给内部网络上的服务器，并将从服务器上得到的结果，返回给 internet 上请求链接的客户端。现在的新项目中 nginx 几乎是首选，我们用 node 或者 java 开发的服务通常都需要经过 nginx 的反向代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;window.postMessage()&lt;/strong&gt; 利用 h5 新特性 window.postMessage ()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;跨域传送门 ☞ &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAzMjMyNzY5MTgyNTQ3OTk4&#34;&gt;# 跨域，不可不知的基础概念&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;观看记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#观看记录&#34;&gt;#&lt;/a&gt; ！！！！！！观看记录！！！！！！！！&lt;/h3&gt;
&lt;h3 id=&#34;粘包问题分析与对策&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#粘包问题分析与对策&#34;&gt;#&lt;/a&gt; 粘包问题分析与对策&lt;/h3&gt;
&lt;p&gt;TCP 粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;粘包出现原因&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单得说，在流传输中出现，UDP 不会出现粘包，因为它有&lt;strong&gt;消息边界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;粘包情况有两种，一种是 &lt;code&gt;粘在一起的包都是完整的数据包&lt;/code&gt; ，另一种情况是 &lt;code&gt;粘在一起的包有不完整的包&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;为了&lt;strong&gt;避免粘包&lt;/strong&gt;现象，可采取以下几种措施：&lt;/p&gt;
&lt;p&gt;（1）对于发送方引起的粘包现象，用户可通过编程设置来避免， &lt;code&gt;TCP提供了强制数据立即传送的操作指令push&lt;/code&gt; ，TCP 软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；&lt;/p&gt;
&lt;p&gt;（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、 &lt;code&gt;提高接收进程优先级等措施&lt;/code&gt; ，使其及时接收数据，从而尽量避免出现粘包现象；&lt;/p&gt;
&lt;p&gt;（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。 &lt;code&gt;分包多发&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以上提到的三种措施，都有其不足之处。&lt;/p&gt;
&lt;p&gt;（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。&lt;/p&gt;
&lt;p&gt;（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。&lt;/p&gt;
&lt;p&gt;（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;客户端与服务端长连接的几种方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#客户端与服务端长连接的几种方式&#34;&gt;#&lt;/a&gt; 客户端与服务端长连接的几种方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ajax 轮询&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;实现原理&lt;/strong&gt;：ajax 轮询指客户端每间隔一段时间向服务端发起请求，保持数据的同步。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：可实现基础（指间隔时间较短）的数据更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：这种方法也只是尽量的模拟即时传输，但并非真正意义上的即时通讯，很有可能出现客户端请求时，服务端数据并未更新。或者服务端数据已更新，但客户端未发起请求。导致多次请求资源浪费，效率低下。【 &lt;code&gt;数据更新不及时，效率低下&lt;/code&gt; 】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;long poll 长轮询&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;/strong&gt;：&lt;br /&gt;
long poll 指的是客户端发送请求之后，如果没有数据返回，服务端会将请求挂起放入队列（不断开连接）处理其他请求，直到有数据返回给客户端。然后客户端再次发起请求，以此轮询。在 HTTP1.0 中客户端可以设置请求头 Connection:keep-alive，服务端收到该请求头之后知道这是一个长连接，在响应报文头中也添加 Connection:keep-alive。客户端收到之后表示长连接建立完成，可以继续发送其他的请求。在 HTTP1.1 中默认使用了 Connection:keep-alive 长连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：减少客户端的请求，降低无效的网络传输，保证每次请求都有数据返回，不会一直占用线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：无法处理高并发，当客户端请求量大，请求频繁时对服务器的处理能力要求较高。服务器一直保持连接会消耗资源，需要同时维护多个线程，服务器所能承载的 TCP 连接数是有上限的，这种轮询很容易把连接数顶满。每次通讯都需要客户端发起，服务端不能主动推送。【 &lt;code&gt;无法处理高并发，消耗服务器资源严重，服务端不能主动推送&lt;/code&gt; 】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;iframe 长连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理：&lt;/strong&gt;&lt;br /&gt;
在网页上嵌入一个 iframe 标签，该标签的 src 属性指向一个长连接请求。这样服务端就可以源源不断地给客户端传输信息。保障信息实时更新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：消息及时传输。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;： &lt;code&gt;消耗服务器资源&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现原理&lt;/strong&gt;：&lt;br /&gt;
Websocket 实现了客户端与服务端的双向通信，只需要连接一次，就可以相互传输数据，很适合实时通讯、数据实时更新等场景。&lt;/p&gt;
&lt;p&gt;Websocket 协议与 HTTP 协议没有关系，它是一个建立在 TCP 协议上的全新协议，为了兼容 HTTP 握手规范，在握手阶段依然使用 HTTP 协议，握手完成之后，数据通过 TCP 通道进行传输。&lt;/p&gt;
&lt;p&gt;Websoket 数据传输是通过 frame 形式，一个消息可以分成几个片段传输。这样大数据可以分成一些小片段进行传输，不用考虑由于数据量大导致标志位不够的情况。也可以边生成数据边传递消息，提高传输效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;br /&gt;
双向通信。客户端和服务端双方都可以主动发起通讯。&lt;br /&gt;
没有同源限制。客户端可以与任意服务端通信，不存在跨域问题。&lt;br /&gt;
数据量轻。第一次连接时需要携带请求头，后面数据通信都不需要带请求头，减少了请求头的负荷。&lt;br /&gt;
传输效率高。因为只需要一次连接，所以数据传输效率高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;br /&gt;
长连接需要后端处理业务的代码更稳定，推送消息相对复杂；&lt;br /&gt;
长连接受网络限制比较大，需要处理好重连。&lt;br /&gt;
兼容性，WebSocket 只支持 IE10 及其以上版本。&lt;br /&gt;
服务器长期维护长连接需要一定的成本，各个浏览器支持程度不一；&lt;br /&gt;
成熟的 HTTP 生态下有大量的组件可以复用，WebSocket 则没有，遇到异常问题难以快速定位快速解决。【需要后端代码稳定，受网络限制大，兼容性差，维护成本高，生态圈小】&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;利用socket建立网络连接的步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用socket建立网络连接的步骤&#34;&gt;#&lt;/a&gt; 利用 Socket 建立网络连接的步骤&lt;/h3&gt;
&lt;p&gt;建立 Socket 连接至少需要一对套接字，其中一个运行于客户端，称为 ClientSocket ，另一个运行于服务器端，称为 ServerSocket 。&lt;/p&gt;
&lt;p&gt;套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。&lt;/p&gt;
&lt;p&gt;1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。&lt;/p&gt;
&lt;p&gt;2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。&lt;/p&gt;
&lt;p&gt;为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。&lt;/p&gt;
&lt;p&gt;3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。&lt;/p&gt;
&lt;p&gt;而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。&lt;/p&gt;
&lt;h3 id=&#34;非对称加密rsa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非对称加密rsa&#34;&gt;#&lt;/a&gt; 非对称加密 RSA&lt;/h3&gt;
&lt;p&gt;简介：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对称加密算法又称现代加密算法。&lt;/li&gt;
&lt;li&gt;非对称加密是计算机通信安全的基石，保证了加密数据不会被破解。&lt;/li&gt;
&lt;li&gt;非对称加密算法需要两个密钥：公开密钥 (publickey) 和私有密 (privatekey)&lt;/li&gt;
&lt;li&gt;公开密钥和私有密钥是一对&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。 &lt;br /&gt;
如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。&lt;/p&gt;
&lt;p&gt;特点： &lt;br /&gt;
算法强度复杂，安全性依赖于算法与密钥。 &lt;br /&gt;
加密解密速度慢。&lt;/p&gt;
&lt;p&gt;与对称加密算法的对比： &lt;br /&gt;
对称加密只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。 &lt;br /&gt;
非对称加密有两种密钥，其中一个是公开的。&lt;/p&gt;
&lt;p&gt;RSA 应用场景： &lt;br /&gt;
由于 RSA 算法的加密解密速度要比对称算法速度慢很多，在实际应用中，通常采取 &lt;br /&gt;
数据本身的加密和解密使用对称加密算法 (AES)。 用 RSA 算法加密并传输对称算法所需的密钥。&lt;/p&gt;
&lt;h3 id=&#34;http1-http2-http3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http1-http2-http3&#34;&gt;#&lt;/a&gt; HTTP1、HTTP2、HTTP3&lt;/h3&gt;
&lt;p&gt;HTTP/2 相比于 HTTP/1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，虽如此但 HTTP/2 并非完美的，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。&lt;/p&gt;
&lt;h3 id=&#34;http11-的缺陷&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http11-的缺陷&#34;&gt;#&lt;/a&gt; &lt;strong&gt;HTTP1.1 的缺陷&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;高延迟 — 队头阻塞 (Head-Of-Line Blocking)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;队头阻塞&lt;/code&gt; 是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。&lt;/p&gt;
&lt;p&gt;针对队头阻塞的解决办法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;将同一页面的资源分散到不同域名下，提升连接上限&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;合并小文件减少资源数&lt;/code&gt; ，使用精灵图。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;内联(Inlining)资源&lt;/code&gt; 是另外一种防止发送很多小图请求的技巧，将图片的原始数据嵌入在 CSS 文件里面的 URL 里，减少网络请求次数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;减少请求数量&lt;/code&gt; ，合并文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无状态特性 — 阻碍交互&lt;/p&gt;
&lt;p&gt;&lt;code&gt;无状态是指协议对于连接状态没有记忆能力&lt;/code&gt; 。纯净的 HTTP 是没有 cookie 等机制的，每一个连接都是一个新的连接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Header里携带的内容过大，在一定程度上增加了传输的成本&lt;/code&gt; 。且请求响应报文里有大量字段值都是重复的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;明文传输 — 不安全性&lt;/p&gt;
&lt;p&gt;HTTP/1.1 在传输数据时，所有 &lt;code&gt;传输的内容都是明文&lt;/code&gt; ，客户端和服务器端都无法验证对方的身份，无法保证数据的安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不支持服务端推送&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;记忆口诀：队头阻塞高延迟，无状态阻交互，明文传输不安全，服务推送不支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTTP 1.1 排队问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP 1.1 多个文件共用一个 TCP，这样可以减少 tcp 握手，这样 3 个文件就不用握手 9 次了，不过这样请求文件需要排队，请求和返回都需要排队， 如果第一个文件响应慢，会阻塞后面的文件，这样就产生了对头的等待问题。&lt;/p&gt;
&lt;p&gt;有的网站可能会有很多文件，浏览器处于对机器性能的考虑，它不可能让你无限制的发请求建连接，因为建立连接需要占用资源，浏览器不想把用户的网络资源都占用了，所以浏览器最多会建立 6 个 tcp 连接；如果有上百个文件可能都需要排队，http2.0 正在解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ecdc60670194df7957ee59e1f56701f~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;spdy-协议与-http2-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#spdy-协议与-http2-简介&#34;&gt;#&lt;/a&gt; SPDY 协议与 HTTP/2 简介&lt;/h3&gt;
&lt;h4 id=&#34;1-http2-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-http2-简介&#34;&gt;#&lt;/a&gt; 1、HTTP/2 简介&lt;/h4&gt;
&lt;p&gt;HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写。&lt;strong&gt;HTTP/2 基于 SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）&lt;/strong&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;2-http2-新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-http2-新特性&#34;&gt;#&lt;/a&gt; 2、HTTP/2 新特性&lt;/h4&gt;
&lt;h4 id=&#34;1-二进制传输&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-二进制传输&#34;&gt;#&lt;/a&gt; 1、二进制传输&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;HTTP/2传输数据量的大幅减少,主要有两个原因:以二进制方式传输和Header 压缩&lt;/code&gt; 。我们先来介绍二进制传输，HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。 &lt;code&gt;HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;2-header-压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-header-压缩&#34;&gt;#&lt;/a&gt; 2、Header 压缩&lt;/h4&gt;
&lt;p&gt;HTTP/2 并没有使用传统的压缩算法，而是开发了专门的 &amp;quot;HPACK” 算法，在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。&lt;/p&gt;
&lt;h4 id=&#34;3-多路复用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-多路复用&#34;&gt;#&lt;/a&gt; 3、多路复用&lt;/h4&gt;
&lt;p&gt;在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f756ad3403bc4fe18e970c56677c796e~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-server-push&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-server-push&#34;&gt;#&lt;/a&gt; 4、Server Push&lt;/h4&gt;
&lt;p&gt;HTTP2 还在一定程度上改变了传统的 “请求 - 应答” 工作模式，服务器不再是完全被动地响应请求，也可以新建 “流” 主动向客户端发送消息。减少等待的延迟，这被称为 &amp;quot; &lt;code&gt;服务器推送&lt;/code&gt;  &amp;quot;（ Server Push，也叫 Cache push）&lt;/p&gt;
&lt;h4 id=&#34;5-提高安全性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-提高安全性&#34;&gt;#&lt;/a&gt; 5、提高安全性&lt;/h4&gt;
&lt;p&gt;出于兼容的考虑，HTTP/2 延续了 HTTP/1 的 “明文” 特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密。&lt;/p&gt;
&lt;p&gt;但由于 HTTPS 已经是大势所趋，而且主流的浏览器 Chrome、Firefox 等都公开宣布只支持加密的 HTTP/2，&lt;strong&gt;所以 “事实上” 的 HTTP/2 是加密的&lt;/strong&gt;。也就是说，互联网上通常所能见到的 HTTP/2 都是使用 &amp;quot;https” 协议名，跑在 TLS 上面。HTTP/2 协议定义了两个字符串标识符：“h2&amp;quot; 表示加密的 HTTP/2，“h2c” 表示明文的 HTTP/2。&lt;/p&gt;
&lt;h4 id=&#34;6-防止对头阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-防止对头阻塞&#34;&gt;#&lt;/a&gt; 6、防止对头阻塞&lt;/h4&gt;
&lt;p&gt;http1.1 如果第一个文件阻塞，第二个文件也就阻塞了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b67bd1f793a3425d9e8a415cae9b7863~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;http2.0 的解决，把 3 个请求打包成一个小块发送过去，即使第一个阻塞了，后面 2 个也可以回来；相当于 3 个文件同时请求，就看谁先回来谁后回来，阻塞的可能就后回来，对带宽的利用是最高的；但没有解决 TCP 的对头阻塞，如果 TCP 发过去的一个分包发丢了，他会重新发一次；http2.0 的解决了大文件的阻塞。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77d8ae8e0de44f3aa693f0626a346d4c~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;image.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;一个分包请求 3 个文件，即使第一个阻塞了，第二个也能返回&lt;/p&gt;
&lt;h3 id=&#34;http2-的缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http2-的缺点&#34;&gt;#&lt;/a&gt; HTTP/2 的缺点&lt;/h3&gt;
&lt;p&gt;虽然 HTTP/2 解决了很多之前旧版本的问题，但它还是存在一个巨大的问题，&lt;strong&gt;主要是底层支撑的 TCP 协议造成的&lt;/strong&gt;。HTTP/2 的缺点主要有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TCP 以及 TCP+TLS 建立连接时延时&lt;/li&gt;
&lt;li&gt;TCP 的队头阻塞并没有彻底解决&lt;/li&gt;
&lt;li&gt;多路复用导致服务器压力上升也容易 Timeout&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;http3-新特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http3-新特性&#34;&gt;#&lt;/a&gt; HTTP/3 新特性&lt;/h3&gt;
&lt;h4 id=&#34;1-http3简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-http3简介&#34;&gt;#&lt;/a&gt; 1、HTTP/3 简介&lt;/h4&gt;
&lt;p&gt;Google 在推 SPDY 的时候就搞了个基于 UDP 协议的 “QUIC” 协议，让 HTTP 跑在 QUIC 上而不是 TCP 上。而 “HTTP over QUIC” 就是 HTTP/3，真正 “完美” 地解决了 “队头阻塞” 问题。&lt;/p&gt;
&lt;p&gt;QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。&lt;/p&gt;
&lt;h4 id=&#34;2-quic新功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-quic新功能&#34;&gt;#&lt;/a&gt; 2、QUIC 新功能&lt;/h4&gt;
&lt;p&gt;QUIC 基于 UDP，而 UDP 是 “无连接” 的，根本就不需要 “握手” 和 “挥手”，所以就比 TCP 来得快。此外 QUIC 也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似 HTTP/2 的 “流” 和 “多路复用”，单个 “流 &amp;quot; 是有序的，可能会因为丢包而阻塞，但其他 “流” 不会受到影响。具体来说 QUIC 协议有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现了类似 TCP 的流量控制、传输可靠性的功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现了快速握手功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。&lt;strong&gt;0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集成了 TLS 加密功能&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多路复用，彻底解决 TCP 中队头阻塞的问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和 TCP 不同，QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流。实现了数据流的单独传输，就解决了 TCP 中队头阻塞的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接迁移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP 是按照 4 要素（客户端 IP、端口，服务器 IP、端口）确定一个连接的。而 QUIC 则是让客户端生成一个 Connection ID （64 位）来区别不同连接。只要 Connection ID 不变，连接就不需要重新建立，即便是客户端的网络发生变化。由于迁移客户端继续使用相同的会话密钥来加密和解密数据包，QUIC 还提供了迁移客户端的自动加密验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/1.1 有两个主要的缺点：安全不足和性能不高。&lt;/li&gt;
&lt;li&gt;HTTP/2 完全兼容 HTTP/1，是 “更安全的 HTTP、更快的 HTTPS&amp;quot;，二进制传输、头部压缩、多路复用、服务器推送等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；&lt;/li&gt;
&lt;li&gt;QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;理解xsscsrfddos攻击原理以及避免方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#理解xsscsrfddos攻击原理以及避免方式&#34;&gt;#&lt;/a&gt; 理解 xss，csrf，ddos 攻击原理以及避免方式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;XSS&lt;/code&gt; ( &lt;code&gt;Cross-Site Scripting&lt;/code&gt; ，&lt;strong&gt;跨站脚本攻击&lt;/strong&gt;) 是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取  &lt;code&gt;cookie，session tokens&lt;/code&gt; ，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CSRF&lt;/code&gt; （ &lt;code&gt;Cross-site request forgery&lt;/code&gt; ）&lt;strong&gt;跨站请求伪造&lt;/strong&gt;：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XSS 避免方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;  参数使用 &lt;code&gt;encodeURIComponent&lt;/code&gt;  方法转义&lt;/li&gt;
&lt;li&gt;尽量不是有 &lt;code&gt;InnerHtml&lt;/code&gt;  插入 &lt;code&gt;HTML&lt;/code&gt;  内容&lt;/li&gt;
&lt;li&gt;使用特殊符号、标签转义符。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;CSRF&lt;/code&gt;  避免方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加验证码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 token&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端给用户生成一个 token，加密后传递给用户&lt;/li&gt;
&lt;li&gt;用户在提交请求时，需要携带这个 token&lt;/li&gt;
&lt;li&gt;服务端验证 token 是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;DDoS&lt;/code&gt;  又叫分布式拒绝服务，全称  &lt;code&gt;Distributed Denial of Service&lt;/code&gt; ，其原理就是利用大量的请求造成资源过载，导致服务不可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;DDos&lt;/code&gt;  避免方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;限制单 IP 请求频率。&lt;/li&gt;
&lt;li&gt;防火墙等防护设置禁止 &lt;code&gt;ICMP&lt;/code&gt;  包等&lt;/li&gt;
&lt;li&gt;检查特权端口的开放&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXprek56STBNRE14TlE9PSZhbXA7bWlkPTIyNDc0ODcxMTYmYW1wO2lkeD0xJmFtcDtzbj0wOTE4N2VlYjdlNDVmYWExYmVlODZmZjQ4YWUxNGJlMSZhbXA7c291cmNlPTQxI3dlY2hhdF9yZWRpcmVjdA==&#34;&gt;360 技术：嗨，送你一张 Web 性能优化地图&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="前端面试" scheme="https://aaaa8880788.github.io/categories/web-interview/" />
        <category term="前端面试" scheme="https://aaaa8880788.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/" />
        <category term="计算机网络" scheme="https://aaaa8880788.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/" />
        <updated>2024-03-02T02:52:21.678Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5%E9%81%87%E5%88%B0%E8%B7%A8%E5%9F%9F/</id>
        <title>Vue3中开发阶段跨域解决</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5%E9%81%87%E5%88%B0%E8%B7%A8%E5%9F%9F/"/>
        <content type="html">&lt;h1 id=&#34;vue3项目中开发阶段遇到跨域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue3项目中开发阶段遇到跨域&#34;&gt;#&lt;/a&gt; Vue3 项目中开发阶段遇到跨域&lt;/h1&gt;
&lt;p&gt;可以在 vue.config.json 中配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;devServer: &amp;#123;
  proxy:&amp;#123;
    &#39;^/api&#39;:&amp;#123;
      target:&#39;http://XX.XX.XX.XX:XXXX&#39;,
      pathRewrite:&amp;#123;
        &#39;^api&#39;:&#39;&#39;
      &amp;#125;,
      changeOrigin:true
    &amp;#125;
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;module.exports = defineConfig(&amp;#123;
  transpileDependencies: true,
  outputDir: &#39;./build&#39;,
  // 位置放这里,配置好后需要去把baseURL设置成 BASE_URL = &#39;/api&#39;,原本是BASE_URL = &#39;http://XX.XX.XX.XX:XXXX&#39;
  devServer: &amp;#123;
    proxy:&amp;#123;
     &#39;^/api&#39;:&amp;#123;
      target:&#39;http://XX.XX.XX.XX:XXXX&#39;,
      pathRewrite:&amp;#123;
        &#39;^api&#39;:&#39;&#39;
      &amp;#125;,
      changeOrigin:true
    &amp;#125;
  &amp;#125;
&amp;#125;
&amp;#125;)

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <category term="跨域" scheme="https://aaaa8880788.github.io/tags/%E8%B7%A8%E5%9F%9F/" />
        <updated>2024-03-02T02:52:21.670Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%EF%BC%88%E6%9D%83%E9%99%90%E8%8F%9C%E5%8D%95%EF%BC%89/</id>
        <title>Vue3+Ts中实现动态路由菜单</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%EF%BC%88%E6%9D%83%E9%99%90%E8%8F%9C%E5%8D%95%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;vue3实现动态路由权限菜单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue3实现动态路由权限菜单&#34;&gt;#&lt;/a&gt; Vue3 实现动态路由（权限菜单）&lt;/h1&gt;
&lt;h2 id=&#34;步骤一分析数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤一分析数据&#34;&gt;#&lt;/a&gt; 步骤一：分析数据&lt;/h2&gt;
&lt;p&gt;假设后端发来的数据是这样的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153724675.png&#34; alt=&#34;image-20220506153724675&#34; /&gt;&lt;/p&gt;
&lt;p&gt;type ===1 时是二级菜单（也就是可以展开的菜单，里面有各个子菜单）&lt;/p&gt;
&lt;p&gt;type === 2 时是一级菜单（不可展开）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153736724.png&#34; alt=&#34;image-20220506153736724&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;步骤二创建组件和路由&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤二创建组件和路由&#34;&gt;#&lt;/a&gt; 步骤二：创建组件和路由&lt;/h2&gt;
&lt;p&gt;先将需要的所有路由都创建出来（后续再根据什么用户权限对应注册哪些路由，菜单也是根据后端数据动态生成的）&lt;/p&gt;
&lt;p&gt;只有一级菜单才创建，创建的路径跟传过来的 url 一致，因为 url 对应的其实就是 path&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153747335.png&#34; alt=&#34;image-20220506153747335&#34; /&gt;&lt;/p&gt;
&lt;p&gt;例如这里的 url 是 /main/system/role  所以我就在 views/main/system/role 下面创建 role.vue&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153759070.png&#34; alt=&#34;image-20220506153759070&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同时在 router/main/system/role 下面创建 role.ts&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153809838.png&#34; alt=&#34;image-20220506153809838&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其内容为路由的注册信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153821382.png&#34; alt=&#34;image-20220506153821382&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里因为要创建太多的组件和路由，所以用一个工具来快速创建 (coderwhy 提供的)&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; i coderwhy &lt;span class=&#34;token parameter variable&#34;&gt;-g&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装成功后敲命令，它就会创建出相应路径的 role.vue 和 role.ts&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// coderwhy add3page&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;如果是vue2就用addpage&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 组件名 &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; 组件存放路径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 例如&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;coderwhy add3page role &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; src/views/main/system/role&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;coderwhy add3page user &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; src/views/main/system/user&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意：自己一个个创建组件和路由都可以，路径也自己可以顶，弄这么长的路径其实只是为了利用这个工具而已&lt;/p&gt;
&lt;p&gt;命令分析：它会在创建完组件后，会根据 - d 后面的路径替换 views 为 router 创建它的路由规则，而且路径都是一一对应的，相当方便&lt;/p&gt;
&lt;h2 id=&#34;步骤三根据菜单权限获取路由规则数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤三根据菜单权限获取路由规则数组&#34;&gt;#&lt;/a&gt; 步骤三：根据菜单权限获取路由规则数组&lt;/h2&gt;
&lt;p&gt;创建完所有组件和路由规则后&lt;/p&gt;
&lt;p&gt;在 src/utils 下创建 map-menus.ts 文件，该文件是根据用户菜单权限拿到对应的路由规则&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; RouteRecordRaw &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue-router&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mapMenusToRoutes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userMenus&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RouteRecordRaw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; routes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RouteRecordRaw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 1. 先去加载默认所有的 routes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; allRoutes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RouteRecordRaw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 这里的三个参数分别为①加载文件路径②是否递归加载，如果为 false，只会加载路径下文件，如果 true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 路径里面文件夹的文件也会加载③正则表达式（加载什么文件）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; routeFiles &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;@/router/main&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\.ts&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  routeFiles&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; route &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;@/router/main&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    allRoutes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;default&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 2. 根据菜单获取需要添加的 routes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// userMenus:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// type === 1 -&gt; children -&gt; type === 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// type === 2 -&gt; route&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;_recurseGetRoute&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;menus&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; menu &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; menus&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;menu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; route &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; allRoutes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; route&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; menu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; routes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;_recurseGetRoute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;menu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;children&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;_recurseGetRoute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userMenus&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; routes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;步骤四注册路由&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤四注册路由&#34;&gt;#&lt;/a&gt; 步骤四：注册路由&lt;/h2&gt;
&lt;p&gt;大概实现思路就是这样，不同的情况可以适当修改，思路是一致的，&lt;/p&gt;
&lt;p&gt;最后使用的话只需要导入该文件（map-menus.ts），在获取到用户菜单权限后调用该文件导出的函数 mapMenusToRoutes（传入的菜单数据）就可以得到相应的路由规则，然后遍历注册就可以了&lt;/p&gt;
&lt;p&gt;我这里是在登录成功后获取数据并将数据存入 vuex 里面，所以我在存的时候顺便注册路由（vuex 存的操作就不说了，直接调用就好了）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153842905.png&#34; alt=&#34;image-20220506153842905&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当然，vuex 的特点就是刷新页面丢失，因为我是在登录成功才会进行存 vuex 的操作，而注册动态路由也放在这个操作里面，所以刷新 vuex 没了，动态路由的注册也没了，所以我们在登录成功后保存用户菜单信息到 vuex 之前，先将它存到本地，这样的话在登录成功后，vuex 和 localStorage 里面都有我们的菜单信息了，然后再定义一个函数（该函数作用是获取 localStorage 的菜单信息，然后将他存入 vuex，也就是再次调用存 vuex 的操作，这样也就间接的又注册了动态路由），在每次页面刷新都调用该函数&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这里是 vuex 里面的 actions 函数，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;actions&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 从本地缓存取数据保存入 vuex&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;loadLocalLogin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;context&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; localStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;token&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;changeToken&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; token&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; userInfo &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; localStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;userInfo&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userInfo&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;changeUserInfo&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; userInfo&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; userMenus &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; localStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;userMenus&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;userMenus&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;changeUserMenusInfo&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; userMenus&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;该函数定义在哪里随意，最后在 main.js 里面调用就好了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 在每次页面重新加载时(刷新或第一次打开时),将本地缓存中vuex需要的数据存入vuex
export function setupStore() &amp;#123;
  // 从本地缓存获取Login模块需要的vuex数据
  store.dispatch(&#39;login/loadLocalLogin&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里注意该函数的调用一定要在 app.use (router) 之前，因为在 app.use (router) 后，页面路径就会去匹配路由，这时动态路由还没注册，这时页面路径是 router 里面的还好，可以正常显示，如果是动态路由的路径，那就 gg，找不到页面...&lt;/p&gt;
&lt;p&gt;可以放上面试一试，刷新一下页面，会发现页面空白～&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; createApp &amp;#125; from &#39;vue&#39;
import App from &#39;./App.vue&#39;
import router from &#39;./router&#39;
import store from &#39;./store&#39;
import &amp;#123; setupStore &amp;#125; from &#39;./store&#39;

const app = createApp(App)
// 在每次页面重新加载时(刷新或第一次打开时),将本地缓存中vuex需要的数据存入vuex
// 该函数要放在app.use(router)之前,因为在函数里面注册了动态路由，如果放后面
// 路径是动态路由的路径的话，刷新会页面丢失，因为这时动态路由还没注册，匹配不到路径
setupStore()
app.use(router)
app.use(store)
app.mount(&#39;#app&#39;)

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="TypeScript" scheme="https://aaaa8880788.github.io/tags/TypeScript/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <updated>2024-03-02T02:52:21.670Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</id>
        <title>Vue3项目搭建流程</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;项目搭建规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目搭建规范&#34;&gt;#&lt;/a&gt; 项目搭建规范&lt;/h1&gt;
&lt;h2 id=&#34;一-代码规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-代码规范&#34;&gt;#&lt;/a&gt; 一。代码规范&lt;/h2&gt;
&lt;h3 id=&#34;11-集成editorconfig配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-集成editorconfig配置&#34;&gt;#&lt;/a&gt; 1.1. 集成 editorconfig 配置&lt;/h3&gt;
&lt;p&gt;EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# http://editorconfig.org&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root = true&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;*&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 表示所有文件适用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;charset = utf&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 设置文件字符集为 utf-8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;indent_style = space &lt;span class=&#34;token comment&#34;&gt;# 缩进风格（tab | space）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;indent_size = 2 &lt;span class=&#34;token comment&#34;&gt;# 缩进大小&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;end_of_line = lf &lt;span class=&#34;token comment&#34;&gt;# 控制换行类型 (lf | cr | crlf)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;trim_trailing_whitespace = true &lt;span class=&#34;token comment&#34;&gt;# 去除行首的任意空白字符&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;insert_final_newline = true &lt;span class=&#34;token comment&#34;&gt;# 始终在文件末尾插入一个新行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token important&#34;&gt;*.md&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 表示仅 md 文件适用以下规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;max_line_length = off&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;trim_trailing_whitespace = false&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;VSCode 需要安装一个插件：EditorConfig for VS Code&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506134337889.png&#34; alt=&#34;image-20220506134337889&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-使用prettier工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-使用prettier工具&#34;&gt;#&lt;/a&gt; 1.2. 使用 prettier 工具&lt;/h3&gt;
&lt;p&gt;Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。&lt;/p&gt;
&lt;p&gt;1. 安装 prettier&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; prettier &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 配置.prettierrc 文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;useTabs：使用 tab 缩进还是空格缩进，选择 false；&lt;/li&gt;
&lt;li&gt;tabWidth：tab 是空格的情况下，是几个空格，选择 2 个；&lt;/li&gt;
&lt;li&gt;printWidth：当行字符的长度，推荐 80，也有人喜欢 100 或者 120；&lt;/li&gt;
&lt;li&gt;singleQuote：使用单引号还是双引号，选择 true，使用单引号；&lt;/li&gt;
&lt;li&gt;trailingComma：在多行输入的尾逗号是否添加，设置为  &lt;code&gt;none&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;semi：语句末尾是否要加分号，默认值 true，选择 false 表示不加；&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;useTabs&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;tabWidth&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;printWidth&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;singleQuote&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;trailingComma&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;none&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token property&#34;&gt;&#34;semi&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3. 创建.prettierignore 忽略文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/dist/*
.local
.output.js
/node_modules/**

**/*.svg
**/*.sh

/public/*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.VSCode 需要安装 prettier 的插件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135533179.png&#34; alt=&#34;image-20220506135533179&#34; /&gt;&lt;/p&gt;
&lt;p&gt;5. 测试 prettier 是否生效&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试一：在代码中保存代码；&lt;/li&gt;
&lt;li&gt;测试二：配置一次性修改的命令；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 package.json 中配置一个 scripts：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;&#34;prettier&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;prettier --write .&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;13-使用eslint检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-使用eslint检测&#34;&gt;#&lt;/a&gt; 1.3. 使用 ESLint 检测&lt;/h3&gt;
&lt;p&gt;1. 在前面创建项目的时候，我们就选择了 ESLint，所以 Vue 会默认帮助我们配置需要的 ESLint 环境。&lt;/p&gt;
&lt;p&gt;2.VSCode 需要安装 ESLint 插件：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135616879.png&#34; alt=&#34;image-20220506135616879&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 解决 eslint 和 prettier 冲突的问题：&lt;/p&gt;
&lt;p&gt;安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; i eslint-plugin-prettier eslint-config-prettier &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;添加 prettier 插件：(在.eslintrc.js 文件中)&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module.exports = &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  root&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  env&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    node&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  extends&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &#39;plugin&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;vue/vue3-essential&#39;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &#39;eslint&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;recommended&#39;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &#39;@vue/typescript/recommended&#39;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &#39;plugin&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;prettier/recommended&#39; &lt;span class=&#34;token comment&#34;&gt;// 加上这句话，一般会自动加&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  parserOptions&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ecmaVersion&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2020&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  rules&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &#39;no-console&#39;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &#39;off&#39;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &#39;no-debugger&#39;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &#39;off&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;14-git-husky和eslint&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-git-husky和eslint&#34;&gt;#&lt;/a&gt; 1.4. git Husky 和 eslint&lt;/h3&gt;
&lt;p&gt;虽然我们已经要求项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 中的问题解决掉了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;也就是我们希望保证代码仓库中的代码都是符合 eslint 规范的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么我们需要在组员执行  &lt;code&gt;git commit &lt;/code&gt;  命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进行修复；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么如何做到这一点呢？可以通过 Husky 工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;husky 是一个 git hook 工具，可以帮助我们触发 git 提交的各个阶段：pre-commit、commit-msg、pre-push&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何使用 husky 呢？&lt;/p&gt;
&lt;p&gt;这里我们可以使用自动配置命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npx husky-init &lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这里会做三件事：&lt;/p&gt;
&lt;p&gt;1. 安装 husky 相关的依赖：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135657968.png&#34; alt=&#34;image-20220506135657968&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 在项目目录下创建  &lt;code&gt;.husky&lt;/code&gt;  文件夹：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npx huksy install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135710556.png&#34; alt=&#34;image-20220506135710556&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 在 package.json 中添加一个脚本：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135721621.png&#34; alt=&#34;image-20220506135721621&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们需要去完成一个操作：在进行 commit 时，执行 lint 脚本：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135734035.png&#34; alt=&#34;image-20220506135734035&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个时候我们执行 git commit 的时候会自动对代码进行 lint 校验。&lt;/p&gt;
&lt;h3 id=&#34;15-git-commit规范&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-git-commit规范&#34;&gt;#&lt;/a&gt; 1.5. git commit 规范&lt;/h3&gt;
&lt;h4 id=&#34;151-代码提交风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#151-代码提交风格&#34;&gt;#&lt;/a&gt; 1.5.1. 代码提交风格&lt;/h4&gt;
&lt;p&gt;通常我们的 git commit 会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135748248.png&#34; alt=&#34;image-20220506135748248&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commitizen 是一个帮助我们编写规范 commit message 的工具；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1. 安装 Commitizen&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; commitizen &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 安装 cz-conventional-changelog，并且初始化 cz-conventional-changelog：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npx commitizen init cz-conventional-changelog --save-dev --save-exact&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个命令会帮助我们安装 cz-conventional-changelog：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506140026044.png&#34; alt=&#34;image-20220506140026044&#34; /&gt;&lt;/p&gt;
&lt;p&gt;并且在 package.json 中进行配置：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135802278.png&#34; alt=&#34;image-20220506135802278&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个时候我们提交代码需要使用  &lt;code&gt;npx cz&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步是选择 type，本次更新的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;feat&lt;/td&gt;
&lt;td&gt;新增特性 (feature)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fix&lt;/td&gt;
&lt;td&gt;修复 Bug (bug fix)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docs&lt;/td&gt;
&lt;td&gt;修改文档 (documentation)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;style&lt;/td&gt;
&lt;td&gt;代码格式修改 (white-space, formatting, missing semi colons, etc)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;refactor&lt;/td&gt;
&lt;td&gt;代码重构 (refactor)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;perf&lt;/td&gt;
&lt;td&gt;改善性能 (A code change that improves performance)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test&lt;/td&gt;
&lt;td&gt;测试 (when adding missing tests)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;build&lt;/td&gt;
&lt;td&gt;变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ci&lt;/td&gt;
&lt;td&gt;更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chore&lt;/td&gt;
&lt;td&gt;变更构建流程或辅助工具 (比如更改测试环境)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;revert&lt;/td&gt;
&lt;td&gt;代码回退&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;第二步选择本次修改的范围（作用域）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135820858.png&#34; alt=&#34;image-20220506135820858&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三步选择提交的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135828392.png&#34; alt=&#34;image-20220506135828392&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第四步提交详细的描述信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135839782.png&#34; alt=&#34;image-20220506135839782&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第五步是否是一次重大的更改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135847203.png&#34; alt=&#34;image-20220506135847203&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第六步是否影响某个 open issue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135855311.png&#34; alt=&#34;image-20220506135855311&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们也可以在 scripts 中构建一个命令来执行 cz：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135903118.png&#34; alt=&#34;image-20220506135903118&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;152-代码提交验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#152-代码提交验证&#34;&gt;#&lt;/a&gt; 1.5.2. 代码提交验证&lt;/h4&gt;
&lt;p&gt;如果我们按照 cz 来规范了提交风格，但是依然有同事通过  &lt;code&gt;git commit&lt;/code&gt;  按照不规范的格式提交应该怎么办呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们可以通过 commitlint 来限制提交；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1. 安装 @commitlint/config-conventional 和 @commitlint/cli&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; i @commitlint/config-conventional @commitlint/cli &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 在根目录创建 commitlint.config.js 文件，配置 commitlint&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;@commitlint/config-conventional&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3. 使用 husky 生成 commit-msg 文件，验证提交信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;npx husky &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; .husky/commit-msg &lt;span class=&#34;token string&#34;&gt;&#34;npx --no-install commitlint --edit &lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;二-第三方库集成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-第三方库集成&#34;&gt;#&lt;/a&gt; 二。第三方库集成&lt;/h2&gt;
&lt;h3 id=&#34;21-vueconfigjs配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-vueconfigjs配置&#34;&gt;#&lt;/a&gt; 2.1. vue.config.js 配置&lt;/h3&gt;
&lt;p&gt;vue.config.js 有三种配置方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式一：直接通过 CLI 提供给我们的选项来配置：
&lt;ul&gt;
&lt;li&gt;比如 publicPath：配置应用程序部署的子目录（默认是  &lt;code&gt;/&lt;/code&gt; ，相当于部署在  &lt;code&gt;https://www.my-app.com/&lt;/code&gt; ）；&lt;/li&gt;
&lt;li&gt;比如 outputDir：修改输出的文件夹；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方式二：通过 configureWebpack 修改 webpack 的配置：
&lt;ul&gt;
&lt;li&gt;可以是一个对象，直接会被合并；&lt;/li&gt;
&lt;li&gt;可以是一个函数，会接收一个 config，可以通过 config 来修改配置；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方式三：通过 chainWebpack 修改 webpack 的配置：
&lt;ul&gt;
&lt;li&gt;是一个函数，会接收一个基于  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEtbmV1dHJpbm8vd2VicGFjay1jaGFpbg==&#34;&gt;webpack-chain&lt;/span&gt; 的 config 对象，可以对配置进行修改；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;module&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;outputDir&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./build&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// configureWebpack: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//   resolve: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//     alias: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//       views: &#39;@/views&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//     &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//   &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// configureWebpack: (config) =&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//   config.resolve.alias = &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//     &#39;@&#39;: path.resolve(__dirname, &#39;src&#39;),&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//     views: &#39;@/views&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;//   &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// &amp;#125;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function-variable function&#34;&gt;chainWebpack&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;alias&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;@&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__dirname&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;src&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;views&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/views&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;22-vue-router集成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-vue-router集成&#34;&gt;#&lt;/a&gt; 2.2. vue-router 集成&lt;/h3&gt;
&lt;p&gt;安装 vue-router 的最新版本：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; vue-router@next&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建 router 对象：（在 src 目录下创建 router 文件夹 /index.ts）&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createRouter&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; createWebHashHistory &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue-router&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; RouteRecordRaw &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue-router&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; routes&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; RouteRecordRaw&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    redirect&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/main&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/main&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../views/main/main.vue&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    path&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/login&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../views/login/login.vue&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; router &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createRouter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  routes&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  history&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createWebHashHistory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; router&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装 router：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; router &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./router&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;createApp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;App&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;router&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 App.vue 中配置跳转：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;app&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;router-link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;/login&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;登录&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;router-link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;router-link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;/main&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;首页&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;router-link&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;router-view&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;router-view&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;23-vuex集成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-vuex集成&#34;&gt;#&lt;/a&gt; 2.3. vuex 集成&lt;/h3&gt;
&lt;p&gt;安装 vuex：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; vuex@next&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;创建 store 对象：（在 src 目录下创建 store 文件夹 /index.ts）&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createStore &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; store &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;coderwhy&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; store&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;安装 store：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;createApp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;App&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;router&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;store&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 App.vue 中使用：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;24-element-plus集成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-element-plus集成&#34;&gt;#&lt;/a&gt; 2.4. element-plus 集成&lt;/h3&gt;
&lt;p&gt;Element Plus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相信很多同学在 Vue2 中都使用过 element-ui，而 element-plus 正是 element-ui 针对于 vue3 开发的一个 UI 组件库；&lt;/li&gt;
&lt;li&gt;它的使用方式和很多其他的组件库是一样的，所以学会 element-plus，其他类似于 ant-design-vue、NaiveUI、VantUI 都是差不多的；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装 element-plus&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; element-plus&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;241-全局引入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#241-全局引入&#34;&gt;#&lt;/a&gt; 2.4.1. 全局引入&lt;/h4&gt;
&lt;p&gt;一种引入 element-plus 的方式是全局引入，代表的含义是所有的组件和插件都会被自动注册：&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// main.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createApp &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; ElementPlus &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;element-plus&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;element-plus/dist/index.css&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; App &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./App.vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createApp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;App&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ElementPlus&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;引入字体图标&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// main.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 引入 element plus 图标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; ElIcons &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@element-plus/icons-vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 统一注册 Icon 图标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; iconName &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; ElIcons&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;iconName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ElIcons&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;iconName&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;242-按需引入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#242-按需引入&#34;&gt;#&lt;/a&gt; 2.4.2. 按需引入&lt;/h4&gt;
&lt;p&gt;首先你需要安装 &lt;code&gt;unplugin-vue-components&lt;/code&gt;  和  &lt;code&gt;unplugin-auto-import&lt;/code&gt;  这两款插件&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt; unplugin-vue-components unplugin-auto-import&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 vue.config.js 中配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const &amp;#123; defineConfig &amp;#125; = require(&#39;@vue/cli-service&#39;)
const AutoImport = require(&#39;unplugin-auto-import/webpack&#39;)
const Components = require(&#39;unplugin-vue-components/webpack&#39;)
const &amp;#123; ElementPlusResolver &amp;#125; = require(&#39;unplugin-vue-components/resolvers&#39;)

module.exports = defineConfig(&amp;#123;
  configureWebpack: &amp;#123;
    // ...
    plugins: [
      AutoImport(&amp;#123;
        resolvers: [ElementPlusResolver()]
      &amp;#125;),
      Components(&amp;#123;
        resolvers: [ElementPlusResolver()]
      &amp;#125;)
    ]
  &amp;#125;
&amp;#125;)

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;25-axios集成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-axios集成&#34;&gt;#&lt;/a&gt; 2.5. axios 集成&lt;/h3&gt;
&lt;p&gt;安装 axios：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; axios&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;封装 axios：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; axios&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; AxiosInstance&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AxiosResponse &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; Result &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./types&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; useUserStore &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/@/store/modules/user&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HYRequest&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; instance&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosInstance&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;readonly&lt;/span&gt; options&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;options&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; options&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; axios&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;options&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useUserStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;getToken&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;headers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Authorization &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;Bearer &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;token&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 拦截响应的数据&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;code &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AxiosResponse&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Result&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;unknown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;GET&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;POST&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;PATCH&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;DELETE&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; HYRequest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <updated>2024-03-02T02:52:21.670Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue%E4%B8%ADrender%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%B7%E5%80%BC/</id>
        <title>Vue中render的使用价值</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue%E4%B8%ADrender%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%B7%E5%80%BC/"/>
        <content type="html">&lt;h2 id=&#34;vue中render的使用价值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue中render的使用价值&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Vue&lt;/code&gt;  中 render 的使用价值&lt;/h2&gt;
&lt;h2 id=&#34;场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#场景&#34;&gt;#&lt;/a&gt; 场景&lt;/h2&gt;
&lt;p&gt;假设说是低代码平台配置好的表单渲染，亦或者说自己封装的一个表单组件，通过传配置项来渲染，一般我们会怎么做呢？&lt;/p&gt;
&lt;h2 id=&#34;常规做法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常规做法&#34;&gt;#&lt;/a&gt; 常规做法&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
    &amp;lt;div  
      v-for=&amp;quot;item in item&amp;quot;
      :key=&amp;quot;item.id&amp;quot;&amp;gt;
      &amp;lt;template v-if=&amp;quot;item.type === &#39;input&#39;&amp;quot;&amp;gt;
        &amp;lt;input&amp;gt;&amp;lt;/input&amp;gt;
      &amp;lt;/template&amp;gt;
      &amp;lt;template v-else-if=&amp;quot;item.type === &#39;select&#39;&amp;quot;&amp;gt;
        &amp;lt;select&amp;gt;&amp;lt;/select&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  import input from &#39;@/component/input&#39;
  import select from &#39;@/component/select&#39;
  export default &amp;#123;
    data()&amp;#123;
      return &amp;#123;
        item:[
          &amp;#123;
            id:&#39;1&#39;
            type:&#39;input&#39;
          &amp;#125;,
          &amp;#123;
            id:&#39;2&#39;
            type:&#39;select&#39;
          &amp;#125;
        ]
      &amp;#125;
    &amp;#125;,
    components:&amp;#123;
      input,
      select
    &amp;#125;
  &amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说明&#34;&gt;#&lt;/a&gt; 说明&lt;/h2&gt;
&lt;p&gt;从以上代码可以看出，如果说，我们有 30 个 &lt;code&gt;type&lt;/code&gt; ，那我们就必须用 &lt;code&gt;import&lt;/code&gt;  导入 30 个组件，在 &lt;code&gt;compoents&lt;/code&gt;  里面注册 30 个组件，在模板里面写 30 个 &lt;code&gt;template&lt;/code&gt; + &lt;code&gt;v-if&lt;/code&gt; ，越多代码只会越来越冗余，但是我们用 render 的方式来渲染呢？&lt;/p&gt;
&lt;p&gt;所以从中看出，常规做法的可读性极强，但是代码太过冗余，重复代码太多&lt;/p&gt;
&lt;h2 id=&#34;render使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#render使用&#34;&gt;#&lt;/a&gt; render 使用&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
    &amp;lt;div  
      v-for=&amp;quot;item in item&amp;quot;
      :key=&amp;quot;item.id&amp;quot;&amp;gt;
      &amp;lt;business-component :item=&amp;quot;item&amp;quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  import &#39;@/utils/renderHandle.js&#39;
  export default &amp;#123;
    data()&amp;#123;
      return &amp;#123;
        item:[
          &amp;#123;
            id:&#39;1&#39;
            type:&#39;input&#39;
          &amp;#125;,
          &amp;#123;
            id:&#39;2&#39;
            type:&#39;select&#39;
          &amp;#125;
        ]
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Vue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;business-component&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;context&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;item&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; component &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;@/components/&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;type&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;.vue&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;component&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;component&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;context&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;error----&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从这两部分代码可以看出，我无论有多少个组件，都不用像常规做法那样疯狂注册，疯狂导入，所以显然这里用 render 的方法来渲染是很完美的，不过其实这并不完善，因为 &lt;code&gt;vue.componet&lt;/code&gt;  方法的第二个参数可并不仅仅只有 &lt;code&gt;render&lt;/code&gt;  方法，它还可以用很多其他属性，假设说我们需要在使用的时候去添加一下其他属性呢？总不可能直接在上面的这个 &lt;code&gt;business-component&lt;/code&gt;  的注册函数里面加吧，它只是个中介而已，负责转发，所以我们需要一个玄妙的注册函数来反传回去给我们去加东西&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Vue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;business-component&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;context&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; compoentKey &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;key&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;compoentKey&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;compoentKey&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;context&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;registerFn&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Vue&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;context&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; context&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;props&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;item&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;context&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; component &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;@/components/&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;type&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;.vue&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;component&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;component&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;error----&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;error&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
    &amp;lt;div  
      v-for=&amp;quot;item in item&amp;quot;
      :key=&amp;quot;item.id&amp;quot;&amp;gt;
      &amp;lt;business-component 
        :item=&amp;quot;item&amp;quot;
        :key=&amp;quot;key&amp;quot;/&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  import &amp;#123; registerFn &amp;#125; &#39;@/utils/renderHandle.js&#39;
  export default &amp;#123;
    data()&amp;#123;
      return &amp;#123;
        item:[
          &amp;#123;
            id:&#39;1&#39;
            type:&#39;input&#39;
          &amp;#125;,
          &amp;#123;
            id:&#39;2&#39;
            type:&#39;select&#39;
          &amp;#125;
        ],
        // 唯一的key
        key:999
      &amp;#125;
    &amp;#125;,
    created()&amp;#123;
      this.register
    &amp;#125;,
    methods:&amp;#123;
      register()&amp;#123;
        registerFn(this.key,(context) =&amp;gt; &amp;#123;
          const &amp;#123;
            item
          &amp;#125; = context.props
          return &amp;#123;
            item,
            on: &amp;#123;
              test1()&amp;#123;
                console.log(&#39;我要监听了&#39;);
              &amp;#125;
            &amp;#125;,
            off: &amp;#123;
              test2()&amp;#123;
                console.log(&#39;我不监听了&#39;);
              &amp;#125;
            &amp;#125;
          &amp;#125;
        &amp;#125;)
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;结语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结语&#34;&gt;#&lt;/a&gt; 结语&lt;/h2&gt;
&lt;p&gt;是不是很简单呢，其实 &lt;code&gt;render&lt;/code&gt;  也不是不能在 &lt;code&gt;vue&lt;/code&gt;  中用的，有些场景它确实很好用&lt;/p&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="Vue2" scheme="https://aaaa8880788.github.io/tags/Vue2/" />
        <updated>2024-03-02T02:52:21.670Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3%E4%B8%ADts%E7%9A%84%E5%B7%A7%E5%A6%99%E4%BD%BF%E7%94%A8/</id>
        <title>Vue3中Ts的使用技巧</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3%E4%B8%ADts%E7%9A%84%E5%B7%A7%E5%A6%99%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;在vue3中ts的巧妙使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在vue3中ts的巧妙使用&#34;&gt;#&lt;/a&gt; 在 vue3 中 ts 的巧妙使用&lt;/h1&gt;
&lt;h1 id=&#34;技巧一取ref对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧一取ref对象&#34;&gt;#&lt;/a&gt; 技巧一 (取 ref 对象)&lt;/h1&gt;
&lt;h2 id=&#34;说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说明&#34;&gt;#&lt;/a&gt; 说明:&lt;/h2&gt;
&lt;p&gt;在获取组件的 ref 对象时，我们可以通过 &amp;lt;InstanceType&amp;lt;typeof 组件 ref&amp;gt;&amp;gt; 来给 ref 对象限制类型&lt;/p&gt;
&lt;h2 id=&#34;作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用：&lt;/h2&gt;
&lt;p&gt;在取到 ref 对象后，如果调用其组件内的方法，如果方法不存在会报错，增强代码安全性&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意&#34;&gt;#&lt;/a&gt; 注意：&lt;/h2&gt;
&lt;p&gt;子组件部分的 setup 写法如果用 script 标签方式，需要用 defineExpose 将方法暴露出去，否则父组件取不到子组件的方法 (官方文档有说，如果用 setup () 函数的方法就不用考虑)&lt;/p&gt;
&lt;h2 id=&#34;用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用法&#34;&gt;#&lt;/a&gt; 用法&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;// 父组件
&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;login&amp;quot;&amp;gt;
    &amp;lt;login-account ref=&amp;quot;loginAccountRef&amp;quot;&amp;gt; &amp;lt;/login-account&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script lang=&amp;quot;ts&amp;quot; setup&amp;gt;
import &amp;#123; ref &amp;#125; from &#39;vue&#39;
import loginAccount from &#39;./cpns/login-account.vue&#39;

// 拿到loginAccount组件的ref对象
const loginAccountRef = ref&amp;lt;InstanceType&amp;lt;typeof loginAccount&amp;gt;&amp;gt;()

&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;// 子组件
&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;哈哈&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script lang=&amp;quot;ts&amp;quot; setup&amp;gt;
// 定义方法
// 点击登录触发
const loginAction = () =&amp;gt; &amp;#123;
 	console.log(&#39;哈哈啊哈&#39;)
&amp;#125;

defineExpose(&amp;#123;
  loginAction
&amp;#125;)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;技巧二vuex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技巧二vuex&#34;&gt;#&lt;/a&gt; 技巧二（vuex）&lt;/h1&gt;
&lt;h2 id=&#34;说明-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说明-2&#34;&gt;#&lt;/a&gt; 说明:&lt;/h2&gt;
&lt;p&gt;直接使用 vuex 里的 store 对象时，我们取里面的 state 的值是 any 类型，这是我们可以用小技巧给他一些类型限制&lt;/p&gt;
&lt;h2 id=&#34;作用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用-2&#34;&gt;#&lt;/a&gt; 作用:&lt;/h2&gt;
&lt;p&gt;在调用 vuex 里面的 state 时随意乱写调用名称会报错，只有接口定义过的才能调用，增加代码安全性&lt;/p&gt;
&lt;h2 id=&#34;用法-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用法-2&#34;&gt;#&lt;/a&gt; 用法:&lt;/h2&gt;
&lt;h3 id=&#34;根模块的接口类型定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根模块的接口类型定义&#34;&gt;#&lt;/a&gt; 根模块的接口类型定义&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// store/type.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; ILoginState &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./login/type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 根 state 的类型限制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IRootState&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  password&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IRootWithModule&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  login&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; ILoginState&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IStoreType&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; IRootState &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; IRootWithModule&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;根模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#根模块&#34;&gt;#&lt;/a&gt; 根模块&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// store/index.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createStore&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Store&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; useStore &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; useVuexStore &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; login &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./login/login&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; IRootState&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; IStoreType &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; store &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;createStore&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;IRootState&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      password&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  mutations&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  getters&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  actions&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  modules&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    login&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 给 useStore 出来的实例对象 store 加 ts 类型限制&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Store&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;IStoreType&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useVuexStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; store&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;子模块的接口类型定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子模块的接口类型定义&#34;&gt;#&lt;/a&gt; 子模块的接口类型定义&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// store/login/type.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ILoginState&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  token&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  userInfo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  userMenus&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;子模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子模块&#34;&gt;#&lt;/a&gt; 子模块&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// store/login/login.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; Module &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 导入类型接口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; ILoginState &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; IRootState &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;../type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; loginModule&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; Module&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;ILoginState&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; IRootState&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  namespaced&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      token&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      userInfo&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      userMenus&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  getters&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  mutations&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  actions&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; loginModule&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;在组件中用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在组件中用法&#34;&gt;#&lt;/a&gt; 在组件中用法&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    哈哈哈
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
// 这里导入的useStore不是vuex的,而是我们自己定义的那个(我们给它加了类型限制)
import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
const store = useStore()
// 到这里我们就可以发现store的类型不是any了，而是我们定义的Store&amp;lt;IStoreType&amp;gt;类型
// 而且在下面取state的时候我们会发现有代码提示了，如果写了state里面没有的值，会报错
const userMenus = store.state.login.userMenus
console.log(userMenus)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="TypeScript" scheme="https://aaaa8880788.github.io/tags/TypeScript/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <category term="Vuex" scheme="https://aaaa8880788.github.io/tags/Vuex/" />
        <updated>2024-03-02T02:52:21.669Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3%E4%B8%AD%E5%B0%81%E8%A3%85useMapper%E5%87%BD%E6%95%B0%EF%BC%88Vuex%EF%BC%89/</id>
        <title>Vue3中封装useMapper函数（Vuex）</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3%E4%B8%AD%E5%B0%81%E8%A3%85useMapper%E5%87%BD%E6%95%B0%EF%BC%88Vuex%EF%BC%89/"/>
        <content type="html">&lt;h1 id=&#34;vue3中封装usemapper函数vuex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vue3中封装usemapper函数vuex&#34;&gt;#&lt;/a&gt; Vue3 中封装 useMapper 函数（Vuex）&lt;/h1&gt;
&lt;h1 id=&#34;作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script&amp;gt;
import &amp;#123; useStore &amp;#125; from &amp;quot;vuex&amp;quot;;
import &amp;#123; computed &amp;#125; from &amp;quot;@vue/runtime-core&amp;quot;;
export default &amp;#123;
  setup() &amp;#123;
   	//1.传统方法在vuex中拿到state
    const oldCounter = computed(() =&amp;gt; store.state.counter);
    const oldName = computed(() =&amp;gt; store.state.name);
    const oldAge = computed(() =&amp;gt; store.state.age); 
    return &amp;#123;
      oldCounter,
      oldName,
      oldAge,
    &amp;#125;;
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;script&amp;gt;
import &amp;#123; useState &amp;#125; from &amp;quot;../hooks/useState&amp;quot;;
export default &amp;#123;
  setup() &amp;#123;
    // 2.使用mapState封装的函数在vuex中拿到state
    const storeState1 = useState([&amp;quot;counter&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;age&amp;quot;]);
    return &amp;#123;
      ...storeState1,
    &amp;#125;;
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;实现代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现代码&#34;&gt;#&lt;/a&gt; 实现代码&lt;/h1&gt;
&lt;p&gt;在 src 目录下创建 hooks 文件夹，在里面创建 useMapper.js&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;computed&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; useStore &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useMapper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;mapper&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;mapFn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 拿到 store 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; store &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 获取到相应的对象的 functions:&amp;#123;name:function,age:function&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; storeMapperFns &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mapFn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mapper&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 对数据进行转换&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; storeMapper &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;storeMapperFns&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;fnKey&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; fn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; storeMapperFns&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;fnKey&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;$store&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;store&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        storeMapper&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;fnKey&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;computed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; storeMapper&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 src 目录下创建 hooks 文件夹，在里面创建 useState.js&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  src/hooks/useState&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;useMapper&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./useMapper&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; mapState &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; createNamespacedHelpers&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;mapper&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;moduleName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; mapperFn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mapState&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; moduleName &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;string&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; moduleName&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      mapperFn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createNamespacedHelpers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;moduleName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mapState&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;useMapper&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mapper&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;mapperFn&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;测试使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试使用&#34;&gt;#&lt;/a&gt; 测试使用&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;//		src/app.vue

&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;使用useState方法通过数组拿到state数据&amp;lt;/h1&amp;gt;
    &amp;lt;h2&amp;gt;counter:&amp;#123;&amp;#123;counter&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;name:&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;age:&amp;#123;&amp;#123;age&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;hr&amp;gt;
    &amp;lt;h1&amp;gt;使用useState方法通过对象拿到state数据&amp;lt;/h1&amp;gt;
    &amp;lt;h2&amp;gt;sCounter:&amp;#123;&amp;#123;sCounter&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;sName:&amp;#123;&amp;#123;sName&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;sAge:&amp;#123;&amp;#123;sAge&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;hr&amp;gt;
    &amp;lt;h1&amp;gt;使用useState方法通过对象拿到state数据&amp;lt;/h1&amp;gt;
    &amp;lt;h2&amp;gt;aCounter:&amp;#123;&amp;#123;aCounter&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;aName:&amp;#123;&amp;#123;aName&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;aAge:&amp;#123;&amp;#123;aAge&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;hr&amp;gt;
    &amp;lt;h1&amp;gt;使用传统方法拿到state数据&amp;lt;/h1&amp;gt;
    &amp;lt;h2&amp;gt;oldCounter:&amp;#123;&amp;#123;oldCounter&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;oldName:&amp;#123;&amp;#123;oldName&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;h2&amp;gt;oldAge:&amp;#123;&amp;#123;oldAge&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt;
    &amp;lt;hr&amp;gt;
    &amp;lt;button @click=&amp;quot;sub&amp;quot;&amp;gt;-1&amp;lt;/button&amp;gt;
    &amp;lt;span&amp;gt;&amp;#123;&amp;#123;counter&amp;#125;&amp;#125;&amp;lt;/span&amp;gt;
    &amp;lt;button @click=&amp;quot;add&amp;quot;&amp;gt;+1&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import &amp;#123; useState &amp;#125; from &amp;quot;../hooks/useState&amp;quot;;
import &amp;#123; useStore &amp;#125; from &amp;quot;vuex&amp;quot;;
import &amp;#123; computed &amp;#125; from &amp;quot;@vue/runtime-core&amp;quot;;
export default &amp;#123;
  setup() &amp;#123;
    // 使用mapState封装的函数拿到state
    // 使用方法一：
    const storeState1 = useState([&amp;quot;counter&amp;quot;, &amp;quot;name&amp;quot;, &amp;quot;age&amp;quot;]);
    // 使用方法二：
    const storeState2 = useState(&amp;#123;
      sCounter: (state) =&amp;gt; state.counter,
      sName: (state) =&amp;gt; state.name,
      sAge: (state) =&amp;gt; state.age,
    &amp;#125;);
    // 使用方法三：
    const storeState3 = useState(&amp;#123;
      aCounter: &amp;quot;counter&amp;quot;,
      aName: &amp;quot;name&amp;quot;,
      aAge: &amp;quot;age&amp;quot;,
    &amp;#125;);
    // 拿到store对象
    const store = useStore();
    // 传统方法拿到state
    const oldCounter = computed(() =&amp;gt; store.state.counter);
    const oldName = computed(() =&amp;gt; store.state.name);
    const oldAge = computed(() =&amp;gt; store.state.age);

    // 点击+1
    const add = () =&amp;gt; &amp;#123;
      store.commit(&amp;quot;increment&amp;quot;);
    &amp;#125;;
    // 点击-1
    const sub = () =&amp;gt; &amp;#123;
      store.commit(&amp;quot;decrement&amp;quot;);
    &amp;#125;;

    return &amp;#123;
      ...storeState1,
      ...storeState2,
      ...storeState3,
      oldCounter,
      oldName,
      oldAge,
      add,
      sub,
    &amp;#125;;
  &amp;#125;,
&amp;#125;;
&amp;lt;/script&amp;gt;

&amp;lt;style lang=&amp;quot;less&amp;quot;&amp;gt;
#app &amp;#123;
  text-align: center;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <category term="Vuex" scheme="https://aaaa8880788.github.io/tags/Vuex/" />
        <updated>2024-03-02T02:52:21.669Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E4%B8%94%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/</id>
        <title>Vue3+Ts实现选中区间且区间内高亮</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E4%B8%94%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/"/>
        <content type="html">&lt;h1 id=&#34;该案例的实现思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#该案例的实现思路&#34;&gt;#&lt;/a&gt; 该案例的实现思路&lt;/h1&gt;
&lt;p&gt;每个盒子都有自己的索引值，在你选中一个盒子之后，会在数组 a 中记录这个索引值，而这时我们需要定义一个盒子移入就触发的事件，在选中一个盒子的条件下（也就是数组 a 的 length 为 1 时）将你移入的那个盒子的索引值记录到数组 b 中，这时数组 a 和数组 b 中都有一个索引值，我们只需要将在那些索引值在这两个索引值之间的盒子高亮一个颜色就可以了，而数组 a 里面的索引值所对应的盒子设置为另一个高亮颜色，就可实现&lt;/p&gt;
&lt;h1 id=&#34;案例演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例演示&#34;&gt;#&lt;/a&gt; 案例演示&lt;/h1&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E5%8D%B4%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/image-20220506155720417.png&#34; alt=&#34;image-20220506155720417&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在点击某个格子后会高亮一个盒子，然后可以在盒子范围内选中第二个盒子即可获取选中区域&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E5%8D%B4%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/image-20220506155733632.png&#34; alt=&#34;image-20220506155733632&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E5%8D%B4%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/image-20220506155742316.png&#34; alt=&#34;image-20220506155742316&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;实现代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现代码&#34;&gt;#&lt;/a&gt; 实现代码&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;div class=&amp;quot;VueTimeSlot&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;VueTimeSlotList&amp;quot;&amp;gt;
        &amp;lt;div
          class=&amp;quot;VueTimeSlotItems&amp;quot;
          v-for=&amp;quot;(item, index) in times&amp;quot;
          :key=&amp;quot;index&amp;quot;
        &amp;gt;
          &amp;#123;&amp;#123; getItemsSection(index) &amp;#125;&amp;#125;
          &amp;lt;div
            class=&amp;quot;VueTimeSlotBox&amp;quot;
            :class=&amp;quot;&amp;#123;
              VueTimeSlotBoxSelect: BlueBox.includes(index),
              VueTimeSlotBoxItems: getItemsSection(index)
            &amp;#125;&amp;quot;
            @mouseover=&amp;quot;ItmeListOnMouseover(index)&amp;quot;
            @click=&amp;quot;ItmeListOnclick(index)&amp;quot;
          &amp;gt;&amp;lt;/div&amp;gt;
          &amp;#123;&amp;#123; index &amp;#125;&amp;#125;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; ref &amp;#125; from &#39;vue&#39;
const times = ref&amp;lt;number[]&amp;gt;([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

const BlueBox = ref&amp;lt;number[]&amp;gt;([])
const TimeItems = ref&amp;lt;number[]&amp;gt;([])
const ItmeListOnclick = (id: number) =&amp;gt; &amp;#123;
  BlueBox.value.push(id)
  if (BlueBox.value.length &amp;gt; 2) &amp;#123;
    BlueBox.value = []
    TimeItems.value = []
    BlueBox.value.push(id)
  &amp;#125;
&amp;#125;

const ItmeListOnMouseover = (id: number) =&amp;gt; &amp;#123;
  if (BlueBox.value.length == 1) &amp;#123;
    TimeItems.value[0] = id
  &amp;#125;
&amp;#125;

const getItemsSection = (id: number) =&amp;gt; &amp;#123;
  let flag = false
  if (id &amp;gt; BlueBox.value[0]) &amp;#123;
    flag = id &amp;gt; BlueBox.value[0] &amp;amp;&amp;amp; id &amp;lt; TimeItems.value[0]
  &amp;#125; else &amp;#123;
    flag = id &amp;lt; BlueBox.value[0] &amp;amp;&amp;amp; id &amp;gt; TimeItems.value[0]
  &amp;#125;
  return flag
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style lang=&amp;quot;scss&amp;quot; scoped&amp;gt;
.VueTimeSlot &amp;#123;
  .VueTimeSlotList &amp;#123;
    display: flex;
    .VueTimeSlotItems &amp;#123;
      // background-color: red;
      display: inline-block;
      padding: 30px 0px;
      &amp;amp;:last-child &amp;#123;
        .VueTimeSlotBox &amp;#123;
          border-right: 1px #ccc solid;
        &amp;#125;
      &amp;#125;
      .VueTimeSlotBox &amp;#123;
        width: 50px;
        height: 20px;
        border: 1px #ccc solid;
        border-right: none;
        cursor: pointer;
      &amp;#125;
      .VueTimeSlotBoxSelect &amp;#123;
        background-color: rgb(50, 150, 250) !important;
      &amp;#125;
      .VueTimeSlotBoxItems &amp;#123;
        background-color: rgba(50, 150, 250, 0.3);
      &amp;#125;
    &amp;#125;
  &amp;#125;
&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="TypeScript" scheme="https://aaaa8880788.github.io/tags/TypeScript/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <updated>2024-03-02T02:52:21.668Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3+Ts%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85axios/</id>
        <title>Vue3+ts封装axios</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3+Ts%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85axios/"/>
        <content type="html">&lt;h1 id=&#34;1在vue3ts项目中封装axios&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1在vue3ts项目中封装axios&#34;&gt;#&lt;/a&gt; ①在 Vue3+Ts 项目中封装 axios&lt;/h1&gt;
&lt;h1 id=&#34;说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说明&#34;&gt;#&lt;/a&gt; 说明&lt;/h1&gt;
&lt;p&gt;采用了类封装思想，包含了三种情况的拦截器封装&lt;/p&gt;
&lt;p&gt;①公共拦截器（所有实例都有的拦截器）&lt;/p&gt;
&lt;p&gt;②特有拦截器（只有在 new 实例时传入的对象中传入了拦截器）&lt;/p&gt;
&lt;p&gt;③独有拦截器（只有在调用请求的时候传入拦截器）&lt;/p&gt;
&lt;h1 id=&#34;实现代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现代码&#34;&gt;#&lt;/a&gt; 实现代码&lt;/h1&gt;
&lt;p&gt;在用 cli 脚手架创建完成项目后&lt;/p&gt;
&lt;p&gt;在 src 下面创建 network 文件夹，在里面创建 index.ts&lt;/p&gt;
&lt;p&gt;该文件是拿到 axios 请求封装实例并导出使用（网络请求出口）&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// src/network/index.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//network 的统一出口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; NWRequest &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./request&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这里是有传入特有拦截器的实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; nwRequest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  baseURL&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;VUE_APP_BASE_URL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  timeout&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;VUE_APP_TIME_OUT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  interceptors&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;在new实例时有传入拦截器的实例才有的拦截器:请求成功的拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;requestInterceptorCatch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;在new实例时有传入拦截器的实例才有的拦截器:请求失败的拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;responseInterceptor&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;在new实例时有传入拦截器的实例才有的拦截器:响应成功的拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;responseInterceptorCatch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;在new实例时有传入拦截器的实例才有的拦截器:响应失败的拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这里是没有有传入特有拦截器的实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; nwRequest1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  baseURL&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;VUE_APP_BASE_URL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  timeout&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;VUE_APP_TIME_OUT&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; nwRequest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nwRequest1 &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 src 的 network 下创建 request 文件夹，在里面创建 type.ts&lt;/p&gt;
&lt;p&gt;该文件是为了定义 ts 的限制类型接口 interface&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AxiosResponse &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequestInterceptors&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; AxiosResponse&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  requestInterceptor&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; AxiosRequestConfig&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  requestInterceptorCatch&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  responseInterceptor&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  responseInterceptorCatch&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequestConfig&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; AxiosResponse&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AxiosRequestConfig&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  interceptors&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestInterceptors&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; NWRequestInterceptors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; NWRequestConfig &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 src 的 network 下的 request 文件夹，在里面创建 index.ts&lt;/p&gt;
&lt;p&gt;该文件是 axios 主要封装类&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// src/network/request/index.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; axios &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; AxiosInstance &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; NWRequestInterceptors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; NWRequestConfig &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 定义网络请求的封装类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequest&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  instance&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosInstance&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  interceptors&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestInterceptors&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; axios&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 从 config 中取出的拦截器是对应的实例的拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 只有 new 实例的时候有传入拦截器才有&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;requestInterceptor&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;requestInterceptorCatch&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;responseInterceptor&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;responseInterceptorCatch&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 添加所有的实例都有的拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;所有的实例都有的拦截器:请求成功拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;所有的实例都有的拦截器:请求失败拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;所有的实例都有的拦截器:响应成功拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;所有的实例都有的拦截器:响应失败拦截&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 这里的作用是，如果在调用请求的时候想添加额外单独的拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;requestInterceptor&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        config &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;responseInterceptor&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;responseInterceptor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;GET&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token generic-function&#34;&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token generic class-name&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;POST&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; NWRequest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试&#34;&gt;#&lt;/a&gt; 测试&lt;/h1&gt;
&lt;p&gt;在 src 下的 main.ts 中&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createApp &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; App &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./App.vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; router &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./router&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; store &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./store&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; nwRequest &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./network&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createApp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;App&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;router&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;store&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 该请求包含公共拦截器、特有拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nwRequest&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  url&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/login&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;哈哈哈&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    password&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;123456&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nwRequest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    url&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/login&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;哈哈哈&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      password&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;123456&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 该请求包含公共拦截器、独有拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// nwRequest1.request(&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   url: &#39;/login&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   method: &#39;POST&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   data: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     name: &#39; 哈哈哈 &#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     password: &#39;123456&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   &amp;#125;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   interceptors: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     requestInterceptor: (config) =&gt; &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//       console.log (&#39; 独有拦截器：单独请求的 config&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//       return config&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;#125;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 该请求质只包含公共拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// nwRequest1.request(&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   url: &#39;/login&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   method: &#39;POST&#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   data: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     name: &#39; 哈哈哈 &#39;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     password: &#39;123456&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;#125;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;2删减版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2删减版&#34;&gt;#&lt;/a&gt; ②删减版&lt;/h1&gt;
&lt;h1 id=&#34;说明-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#说明-2&#34;&gt;#&lt;/a&gt; 说明&lt;/h1&gt;
&lt;p&gt;该部分在上面完整的基础上删减去一些类型限制，完整版里面甚至连返回的数据类型都做了限制，比较难懂&lt;/p&gt;
&lt;p&gt;①公共拦截器（所有实例都有的拦截器）&lt;/p&gt;
&lt;p&gt;②特有拦截器（只有在 new 实例时传入的对象中传入了拦截器）&lt;/p&gt;
&lt;h1 id=&#34;实现代码-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现代码-2&#34;&gt;#&lt;/a&gt; 实现代码&lt;/h1&gt;
&lt;p&gt;在用 cli 脚手架创建完成项目后&lt;/p&gt;
&lt;p&gt;在 src 下面创建 network 文件夹，在里面创建 index.ts&lt;/p&gt;
&lt;p&gt;该文件是拿到 axios 请求封装实例并导出使用（网络请求出口）&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// src/network/index.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//network 的统一出口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; NWRequest &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./request&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 这里是有传入特有拦截器的实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; nwRequest &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  baseURL&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;VUE_APP_BASE_URL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  timeout&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;env&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;VUE_APP_TIME_OUT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  interceptors&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;requestInterceptor&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 在 new 实例时有传入拦截器的实例才有的拦截器：请求成功的拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;// 携带 token 的拦截&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; localStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;geiItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;token&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;headers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Authorization &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;Bearer &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;token&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;requestInterceptorCatch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 在 new 实例时有传入拦截器的实例才有的拦截器：请求失败的拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;responseInterceptor&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 在 new 实例时有传入拦截器的实例才有的拦截器：响应成功的拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;responseInterceptorCatch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 在 new 实例时有传入拦截器的实例才有的拦截器：响应失败的拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; nwRequest &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 src 的 network 下创建 request 文件夹，在里面创建 type.ts&lt;/p&gt;
&lt;p&gt;该文件是为了定义 ts 的限制类型接口 interface&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; AxiosResponse &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequestInterceptors&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; AxiosResponse&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  requestInterceptor&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; AxiosRequestConfig&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  requestInterceptorCatch&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  responseInterceptor&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  responseInterceptorCatch&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;error&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequestConfig&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; AxiosResponse&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;AxiosRequestConfig&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  interceptors&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestInterceptors&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; NWRequestInterceptors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; NWRequestConfig &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 src 的 network 下的 request 文件夹，在里面创建 index.ts&lt;/p&gt;
&lt;p&gt;该文件是 axios 主要封装类&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; axios &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; AxiosInstance &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;axios&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; NWRequestInterceptors&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; NWRequestConfig &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 定义网络请求的封装类&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;NWRequest&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  instance&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; AxiosInstance&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  interceptors&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestInterceptors&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; axios&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; config&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 从 config 中取出的拦截器是对应的实例的拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 只有 new 实例的时候有传入拦截器才有&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;requestInterceptor&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;requestInterceptorCatch&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;responseInterceptor&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token operator&#34;&gt;?.&lt;/span&gt;responseInterceptorCatch&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 添加所有的实例都有的拦截器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 所有的实例都有的拦截器：请求成功拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 所有的实例都有的拦截器：请求失败拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;interceptors&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 所有的实例都有的拦截器：响应成功拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//console.log (&#39; 所有的实例都有的拦截器：响应失败拦截 &#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; err&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;&lt;span class=&#34;token builtin&#34;&gt;Promise&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resolve&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reject&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;instance&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;          &lt;span class=&#34;token function&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;GET&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;config&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; NWRequestConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;config&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      method&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;POST&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; NWRequest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;测试-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试-2&#34;&gt;#&lt;/a&gt; 测试&lt;/h1&gt;
&lt;p&gt;在 src 下的 main.ts 中&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; createApp &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; App &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./App.vue&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; router &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./router&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; store &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./store&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; nwRequest &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;./network&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createApp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;App&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;router&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;store&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nwRequest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    url&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/login&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    data&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      name&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;哈哈哈&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      password&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;123456&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="TypeScript" scheme="https://aaaa8880788.github.io/tags/TypeScript/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <category term="Axios" scheme="https://aaaa8880788.github.io/tags/Axios/" />
        <updated>2024-03-02T02:52:21.668Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3Element%20plus%E7%9A%84Form%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84resetFields%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</id>
        <title>Vue3中Element Plus中Form表单resetFields方法失效</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3Element%20plus%E7%9A%84Form%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84resetFields%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;h1 id=&#34;element-plus的form表单中的resetfields失效问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#element-plus的form表单中的resetfields失效问题&#34;&gt;#&lt;/a&gt; Element plus 的 Form 表单中的 resetFields 失效问题&lt;/h1&gt;
&lt;p&gt;1.el-form 标签需要绑定 model&lt;/p&gt;
&lt;p&gt;2.el-form-item 标签需要绑定 prop（注意 el-form 里面的 model 里面的子项一定要与各个 prop 相对应）&lt;/p&gt;
&lt;p&gt;上面两个条件符合就不会失效了&lt;/p&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="Element Plus" scheme="https://aaaa8880788.github.io/tags/Element-Plus/" />
        <updated>2024-03-02T02:52:21.668Z</updated>
    </entry>
    <entry>
        <id>https://aaaa8880788.github.io/vue/Vue3+Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</id>
        <title>Vue3+Element Plus组件二次封装</title>
        <link rel="alternate" href="https://aaaa8880788.github.io/vue/Vue3+Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
        <content type="html">&lt;h1 id=&#34;element-plus组件二次封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#element-plus组件二次封装&#34;&gt;#&lt;/a&gt; Element Plus 组件二次封装&lt;/h1&gt;
&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;直至今天，看了一下别人写的代码，才发现以前自己写的代码太垃圾，所以在这次做的一个后台项目中，采用他的代码风格，怎么说呢，复用性特别好，封装的很好，学到很多，所以记录一下思路，我认为这个封装思路是真的很棒，写第一个页面的时候可能会麻烦一些，但是后面只要是相似的页面，事半功倍，直接 CV 改配置项就好了，是真的顶，记录一下，学习一下，我这里用的是 vue3+ts&lt;/p&gt;
&lt;h1 id=&#34;form表单的封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#form表单的封装&#34;&gt;#&lt;/a&gt; Form 表单的封装&lt;/h1&gt;
&lt;h2 id=&#34;简述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述&#34;&gt;#&lt;/a&gt; 简述&lt;/h2&gt;
&lt;p&gt;这里是 Form 表单部分，下面是完整的思路，最后有附上完整的代码，大佬可以直接看完整的代码就能看懂了，小白们跟着我的思路估计能看懂....&lt;/p&gt;
&lt;h2 id=&#34;正常的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正常的使用&#34;&gt;#&lt;/a&gt; 正常的使用&lt;/h2&gt;
&lt;p&gt;如果我们正常使用组件库里面的组件会是这样的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153055850.png&#34; alt=&#34;image-20220506153055850&#34; /&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;p&gt;role.vue 页面组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;el-form&amp;gt;
      &amp;lt;el-form-item label=&amp;quot;用户id&amp;quot;&amp;gt;
        &amp;lt;el-input placeholder=&amp;quot;请输入用户id&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;quot;用户名&amp;quot;&amp;gt;
        &amp;lt;el-input placeholder=&amp;quot;请输入用户名&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;quot;真实姓名&amp;quot;&amp;gt;
        &amp;lt;el-input placeholder=&amp;quot;请输入真实姓名&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;quot;用户名&amp;quot;&amp;gt;
        &amp;lt;el-input placeholder=&amp;quot;请输入用户名&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;quot;电话号码&amp;quot;&amp;gt;
        &amp;lt;el-input placeholder=&amp;quot;请输入电话号码&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;quot;用户状态&amp;quot;&amp;gt;
        &amp;lt;el-select placeholder=&amp;quot;请选择用户状态&amp;quot;&amp;gt;
          &amp;lt;el-option label=&amp;quot;禁用&amp;quot; value=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/el-option&amp;gt;
          &amp;lt;el-option label=&amp;quot;启用&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;/el-option&amp;gt;
        &amp;lt;/el-select&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
      &amp;lt;el-form-item label=&amp;quot;创建时间&amp;quot;&amp;gt;
        &amp;lt;el-date-picker
          startPlaceholder=&amp;quot;开始时间&amp;quot;
          endPlaceholder=&amp;quot;结束时间&amp;quot;
          type=&amp;quot;daterange&amp;quot;
        &amp;gt;&amp;lt;/el-date-picker&amp;gt;
      &amp;lt;/el-form-item&amp;gt;
    &amp;lt;/el-form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时我们可以加点样式让他变得好看，并且布局也变一变就可以变成这样，当然样式布局可以自定义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153107353.png&#34; alt=&#34;image-20220506153107353&#34; /&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;p&gt;role.vue 页面组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;el-form labelWidth=&amp;quot;120px&amp;quot;&amp;gt;
      &amp;lt;el-row&amp;gt;
        &amp;lt;el-col :span=&amp;quot;8&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            label=&amp;quot;用户id&amp;quot;
            :style=&amp;quot;&amp;#123;
              padding: &#39;10px 20px&#39;
            &amp;#125;&amp;quot;
          &amp;gt;
            &amp;lt;el-input placeholder=&amp;quot;请输入用户id&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
        &amp;lt;el-col :span=&amp;quot;8&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            label=&amp;quot;用户名&amp;quot;
            :style=&amp;quot;&amp;#123;
              padding: &#39;10px 20px&#39;
            &amp;#125;&amp;quot;
          &amp;gt;
            &amp;lt;el-input placeholder=&amp;quot;请输入用户名&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
        &amp;lt;el-col :span=&amp;quot;8&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            label=&amp;quot;真实姓名&amp;quot;
            :style=&amp;quot;&amp;#123;
              padding: &#39;10px 20px&#39;
            &amp;#125;&amp;quot;
          &amp;gt;
            &amp;lt;el-input placeholder=&amp;quot;请输入真实姓名&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
        &amp;lt;el-col :span=&amp;quot;8&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            label=&amp;quot;电话号码&amp;quot;
            :style=&amp;quot;&amp;#123;
              padding: &#39;10px 20px&#39;
            &amp;#125;&amp;quot;
          &amp;gt;
            &amp;lt;el-input placeholder=&amp;quot;请输入电话号码&amp;quot;&amp;gt;&amp;lt;/el-input&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
        &amp;lt;el-col :span=&amp;quot;8&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            label=&amp;quot;用户状态&amp;quot;
            :style=&amp;quot;&amp;#123;
              padding: &#39;10px 20px&#39;
            &amp;#125;&amp;quot;
          &amp;gt;
            &amp;lt;el-select placeholder=&amp;quot;请选择用户状态&amp;quot;&amp;gt;
              &amp;lt;el-option label=&amp;quot;禁用&amp;quot; value=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/el-option&amp;gt;
              &amp;lt;el-option label=&amp;quot;启用&amp;quot; value=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;/el-option&amp;gt;
            &amp;lt;/el-select&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
        &amp;lt;el-col :span=&amp;quot;8&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            label=&amp;quot;创建时间&amp;quot;
            :style=&amp;quot;&amp;#123;
              padding: &#39;10px 20px&#39;
            &amp;#125;&amp;quot;
          &amp;gt;
            &amp;lt;el-date-picker
              startPlaceholder=&amp;quot;开始时间&amp;quot;
              endPlaceholder=&amp;quot;结束时间&amp;quot;
              type=&amp;quot;daterange&amp;quot;
            &amp;gt;&amp;lt;/el-date-picker&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
      &amp;lt;/el-row&amp;gt;
    &amp;lt;/el-form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.el-form-item &amp;#123;
  margin-top: 18px;
&amp;#125;
.el-select &amp;#123;
  width: 100%;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;开始封装1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始封装1&#34;&gt;#&lt;/a&gt; 开始封装①&lt;/h2&gt;
&lt;p&gt;这时我们就可以开始封装了，如果我们可以通过传配置项的方法来控制样式和 form 表单项的类型和个数的话，是不是变得很方便，下次直接传配置项用就好了？话不多说直接上图上代码&lt;/p&gt;
&lt;p&gt;可以看到效果一样，代码却简洁了，模板里面不会出现大量重复的代码了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153117544.png&#34; alt=&#34;image-20220506153117544&#34; /&gt;&lt;/p&gt;
&lt;p&gt;role.vue 页面组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;el-form :labelWidth=&amp;quot;searchFormConfig.labelWidth&amp;quot;&amp;gt;
      &amp;lt;el-row&amp;gt;
        &amp;lt;template v-for=&amp;quot;item in searchFormConfig.formItems&amp;quot; :key=&amp;quot;item.label&amp;quot;&amp;gt;
          &amp;lt;el-col :span=&amp;quot;8&amp;quot;&amp;gt;
            &amp;lt;el-form-item
              :label=&amp;quot;item.label&amp;quot;
              :style=&amp;quot;searchFormConfig.itemStyle&amp;quot;
            &amp;gt;
              &amp;lt;template
                v-if=&amp;quot;item.type === &#39;input&#39; || item.type === &#39;password&#39;&amp;quot;
              &amp;gt;
                &amp;lt;el-input 
                    :placeholder=&amp;quot;item.placeholder&amp;quot; 
                    :show-password=&amp;quot;item.type === &#39;password&#39;&amp;quot;
                &amp;gt;&amp;lt;/el-input&amp;gt;
              &amp;lt;/template&amp;gt;
              &amp;lt;template v-else-if=&amp;quot;item.type === &#39;select&#39;&amp;quot;&amp;gt;
                &amp;lt;el-select :placeholder=&amp;quot;item.placeholder&amp;quot;&amp;gt;
                  &amp;lt;el-option
                    v-for=&amp;quot;option in item.options&amp;quot;
                    :key=&amp;quot;option.value&amp;quot;
                    :label=&amp;quot;option.label&amp;quot;
                    :value=&amp;quot;option.value&amp;quot;
                  &amp;gt;&amp;lt;/el-option&amp;gt;
                &amp;lt;/el-select&amp;gt;
              &amp;lt;/template&amp;gt;
              &amp;lt;template v-else&amp;gt;
                &amp;lt;el-date-picker v-bind=&amp;quot;item.otherOptions&amp;quot;&amp;gt;&amp;lt;/el-date-picker&amp;gt;
              &amp;lt;/template&amp;gt;
            &amp;lt;/el-form-item&amp;gt;
          &amp;lt;/el-col&amp;gt;
        &amp;lt;/template&amp;gt;
      &amp;lt;/el-row&amp;gt;
    &amp;lt;/el-form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
// 定义表单配置项
const searchFormConfig = &amp;#123;
  formItems: [
    &amp;#123;
      type: &#39;input&#39;,
      label: &#39;用户id&#39;,
      placeholder: &#39;请输入用户id&#39;
    &amp;#125;,
    &amp;#123;
      type: &#39;input&#39;,
      label: &#39;用户名&#39;,
      placeholder: &#39;请输入用户名&#39;
    &amp;#125;,
    &amp;#123;
      type: &#39;input&#39;,
      label: &#39;真实姓名&#39;,
      placeholder: &#39;请输入真实姓名&#39;
    &amp;#125;,
    &amp;#123;
      type: &#39;input&#39;,
      label: &#39;电话号码&#39;,
      placeholder: &#39;请输入电话号码&#39;
    &amp;#125;,
    &amp;#123;
      type: &#39;select&#39;,
      label: &#39;用户状态&#39;,
      placeholder: &#39;请选择用户状态&#39;,
      options: [
        &amp;#123;
          label: &#39;禁用&#39;,
          value: 0
        &amp;#125;,
        &amp;#123;
          label: &#39;启用&#39;,
          value: 1
        &amp;#125;
      ]
    &amp;#125;,
    &amp;#123;
      type: &#39;datepicker&#39;,
      label: &#39;创建时间&#39;,
      otherOptions: &amp;#123;
        startPlaceholder: &#39;开始时间&#39;,
        endPlaceholder: &#39;结束时间&#39;,
        type: &#39;daterange&#39;,
        &#39;unlink-panels&#39;: true
      &amp;#125;
    &amp;#125;
  ],
  labelWidth: &#39;120px&#39;,
  itemStyle: &amp;#123;
    padding: &#39;10px 20px&#39;
  &amp;#125;,
  itemColLayout: &amp;#123;
    span: 8
  &amp;#125;
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.el-form-item &amp;#123;
  margin-top: 18px;
&amp;#125;
.el-select &amp;#123;
  width: 100%;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;开始封装2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始封装2&#34;&gt;#&lt;/a&gt; 开始封装②&lt;/h2&gt;
&lt;p&gt;这时它复用的锥形已经有了，我们可以将配置项抽出去，并给它一些类型限制，把这部分使用表单的代码抽出去，封装成 form 组件，这样之后我们在用的时候，直接用这个组件然后给它传配置项就可以了&lt;/p&gt;
&lt;p&gt;1. 配置项类型限制文件（不用 ts 的话就没有，不想限制全部给 any 类型随意，我这里是为了让代码严谨一丢丢哈哈）&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IFormType&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;password&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;select&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;datepicker&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IFormOption&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IFormItem&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IFormType &lt;span class=&#34;token comment&#34;&gt;// 输入框类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输入框标题&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  placeholder&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输入框默认显示内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 针对 select&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  options&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IFormOption&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 选择器的可选子选项&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 针对特殊属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  otherOptions&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IForm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  formItems&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IFormItem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  labelWidth&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemStyle&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemColLayout&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 配置项文件&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; IForm &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/base-ui/form/type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; searchFormConfig&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IForm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  formItems&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入用户id&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入用户名&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;真实姓名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入真实姓名&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;电话号码&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入电话号码&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;select&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户状态&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请选择用户状态&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      options&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;启用&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;禁用&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;datepicker&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;创建时间&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      otherOptions&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        startPlaceholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;开始时间&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        endPlaceholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;结束时间&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;daterange&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  labelWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;120px&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemColLayout&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    span&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemStyle&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    padding&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;10px 20px&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3.form 表单文件&lt;/p&gt;
&lt;p&gt;注意：在这里，我将 labelWidth，itemColLayout，itemStyle 设置了默认值，所以我上面的那些样式配置项可以不传，默认就是我设置的那些值，如果需要别的样式可以传入修改，不要样式可以传个空进去，这里我还加了两个插槽，增加可扩展性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;el-form ref=&amp;quot;ruleFormRef&amp;quot; :labelWidth=&amp;quot;labelWidth&amp;quot;&amp;gt;
    &amp;lt;el-row&amp;gt;
      &amp;lt;template v-for=&amp;quot;item in formItems&amp;quot; :key=&amp;quot;item.label&amp;quot;&amp;gt;
        &amp;lt;el-col v-bind=&amp;quot;itemColLayout&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            v-if=&amp;quot;!item.isHidden&amp;quot;
            :label=&amp;quot;item.label&amp;quot;
            :style=&amp;quot;itemStyle&amp;quot;
            :prop=&amp;quot;item.field&amp;quot;
          &amp;gt;
            &amp;lt;template v-if=&amp;quot;item.type === &#39;input&#39; || item.type === &#39;password&#39;&amp;quot;&amp;gt;
              &amp;lt;el-input
                :placeholder=&amp;quot;item.placeholder&amp;quot;
                :show-password=&amp;quot;item.type === &#39;password&#39;&amp;quot;
              &amp;gt;&amp;lt;/el-input&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-else-if=&amp;quot;item.type === &#39;select&#39;&amp;quot;&amp;gt;
              &amp;lt;el-select :placeholder=&amp;quot;item.placeholder&amp;quot;&amp;gt;
                &amp;lt;el-option
                  v-for=&amp;quot;option in item.options&amp;quot;
                  :key=&amp;quot;option.label&amp;quot;
                  :label=&amp;quot;option.label&amp;quot;
                  :value=&amp;quot;option.value&amp;quot;
                &amp;gt;&amp;lt;/el-option&amp;gt;
              &amp;lt;/el-select&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-if=&amp;quot;item.type === &#39;datepicker&#39;&amp;quot;&amp;gt;
              &amp;lt;el-date-picker v-bind=&amp;quot;item.otherOptions&amp;quot;&amp;gt;&amp;lt;/el-date-picker&amp;gt;
            &amp;lt;/template&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/el-row&amp;gt;
  &amp;lt;/el-form&amp;gt;
  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; defineProps, withDefaults &amp;#125; from &#39;vue&#39;
import &amp;#123; IFormItem &amp;#125; from &#39;./type&#39;
interface Prop &amp;#123;
  formItems: IFormItem[] // 表单配置项
  labelWidth?: string // 每个表单标题宽度
  itemStyle?: object // 每个表单样式
  itemColLayout?: object // 表单布局
  isHidden?: boolean // 该输入框是否隐藏
&amp;#125;
const props = withDefaults(defineProps&amp;lt;Prop&amp;gt;(), &amp;#123;
  labelWidth: &#39;120px&#39;,
  itemColLayout: () =&amp;gt; (&amp;#123;
    xl: 6, // &amp;gt;=1920px
    lg: 8, // &amp;gt;=1200px
    md: 12, // &amp;gt;=992px
    sm: 24, // &amp;gt;=768px
    xs: 24 // &amp;lt;768px
  &amp;#125;),
  itemStyle: () =&amp;gt; (&amp;#123;
    padding: &#39;10px 20px&#39;
  &amp;#125;)
&amp;#125;)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.el-form-item &amp;#123;
  margin-top: 18px;
&amp;#125;
.el-select &amp;#123;
  width: 100%;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.role.vue 页面组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;form-test v-bind=&amp;quot;searchFormConfig&amp;quot;&amp;gt;&amp;lt;/form-test&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import formTest from &#39;@/base-ui/form/form-test.vue&#39;
import &amp;#123; searchFormConfig &amp;#125; from &#39;./config/search-config-test&#39;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时已经初步封装好了，我们可以使用一下看效果，我们可以看到样式跟之前完全一样，但是页面的代码量就那么点，要用的话直接用我们封装好的 form 组件然后传入配置项就出来了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153130565.png&#34; alt=&#34;image-20220506153130565&#34; /&gt;&lt;/p&gt;
&lt;p&gt;它的可扩展性也是很强的，比如：&lt;/p&gt;
&lt;p&gt;这里我们把样式配置项全部传空值，然后配置项也传一个，它又变成原来最丑的样子了，证明我们是可以随意更改它的样式和布局，只需要通过传入配置项更改就可以了，方便&lt;/p&gt;
&lt;p&gt;配置项文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; IForm &amp;#125; from &#39;@/base-ui/form/type&#39;
export const searchFormConfig: IForm = &amp;#123;
  formItems: [
    &amp;#123;
      field: &#39;id&#39;,
      type: &#39;input&#39;,
      label: &#39;用户id&#39;,
      placeholder: &#39;请输入用户id&#39;
    &amp;#125;
  ],
  labelWidth: &#39;&#39;,
  itemColLayout: &amp;#123;&amp;#125;,
  itemStyle: &amp;#123;&amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153141995.png&#34; alt=&#34;image-20220506153141995&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其实到这里还没结束，因为这时的表单还输入不了东西，因为我们根本就没给它的输入框绑定值，所以我们要在配置项传入多一个 field 字段，它可以作为输入框绑定的值&lt;/p&gt;
&lt;h2 id=&#34;开始封装3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始封装3&#34;&gt;#&lt;/a&gt; 开始封装③&lt;/h2&gt;
&lt;p&gt;这里仅仅是给配置项中增加 field 字段（注意如果用了 ts 的还要去 type 文件里面给我们定义的 IFormItem 接口添加一个 field 字段）&lt;/p&gt;
&lt;p&gt;配置项文件&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; IForm &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/base-ui/form/type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; searchFormConfig&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IForm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  formItems&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      field&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入用户id&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      field&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入用户名&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      field&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;realname&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;真实姓名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入真实姓名&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      field&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;cellphone&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;电话号码&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请输入电话号码&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      field&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;select&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户状态&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      placeholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;请选择用户状态&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      options&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;启用&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;禁用&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      field&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;createAt&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;datepicker&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;创建时间&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      otherOptions&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        startPlaceholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;开始时间&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        endPlaceholder&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;结束时间&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;daterange&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  labelWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;120px&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemColLayout&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    span&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemStyle&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    padding&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;10px 20px&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为传入了 fied 字段，所以我们要收集所有的 field 字段，组成 formData 数据，传入表单组件，formData 里面的每个子项分别作为每个输入框绑定的值&lt;/p&gt;
&lt;p&gt;注意：这里有两个难点&lt;/p&gt;
&lt;p&gt;难点一：&lt;/p&gt;
&lt;p&gt;我们传进去的数据在里面是要做修改传出来的，而 vue 的原则是单项数据流传输，我们不能直接将数据传进去（其实事实可以这样做，但是违背了单向数据流传输原则，我们尽量不违背哈），所以我们采用 v-model 的方式将 formData 传入 form 组件，这样做的话就是双向判定了，不算违背嘿嘿&lt;/p&gt;
&lt;p&gt;难点二：因为我们传进去的 formData 的数据，并不是在 form 组件里面用的，而是要绑定到 form 组件里面的 element puls 的输入框里面的，所以我们在 form 组件里面接收到 formData 数据，然后在把 formData 它的各个子项 v-model 绑定到输入框里面，但是这样会报错，不能直接用 v-model, 这里就需要知道 v-model 是怎么实现的了，我们在这里是直接把接收到的 formData 数据绑定到输入框里面的，在 form 组件并没有定义 formData 这个变量，所以不能直接用 v-model 的方法，这了可能有点懵，举个例子&lt;/p&gt;
&lt;p&gt;（比如你将一个值 test 用 v-model 传入一个 input 的框，你输入框输入数据，你的 test 是会同步改变，也就是说，v-model 会把你修改后的值传出来赋值给你的 test，而在这里，我们将 formData 用 v-model 绑定到输入框，输入框值改变，正常来说它会将修改后的值赋值给我们传进去的 formData，但是我们不能让它直接赋值给我们的 formData，因为我们的 formData 也是从别的组件传进来的，所以我们要把修改后的值再次传出去到传进来 formData 数据的那个组件中，而不是直接就赋值，这时我们就要用到 v-model 的原始写法了，其实 v-model 是个语法糖来的）&lt;/p&gt;
&lt;p&gt;form.vue 组件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;el-form ref=&amp;quot;ruleFormRef&amp;quot; :labelWidth=&amp;quot;labelWidth&amp;quot;&amp;gt;
    &amp;lt;el-row&amp;gt;
      &amp;lt;template v-for=&amp;quot;item in formItems&amp;quot; :key=&amp;quot;item.label&amp;quot;&amp;gt;
        &amp;lt;el-col v-bind=&amp;quot;itemColLayout&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            v-if=&amp;quot;!item.isHidden&amp;quot;
            :label=&amp;quot;item.label&amp;quot;
            :style=&amp;quot;itemStyle&amp;quot;
          &amp;gt;
            &amp;lt;template v-if=&amp;quot;item.type === &#39;input&#39; || item.type === &#39;password&#39;&amp;quot;&amp;gt;
              &amp;lt;el-input
                :placeholder=&amp;quot;item.placeholder&amp;quot;
                :show-password=&amp;quot;item.type === &#39;password&#39;&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
              &amp;gt;&amp;lt;/el-input&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-else-if=&amp;quot;item.type === &#39;select&#39;&amp;quot;&amp;gt;
              &amp;lt;el-select
                :placeholder=&amp;quot;item.placeholder&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
              &amp;gt;
                &amp;lt;el-option
                  v-for=&amp;quot;option in item.options&amp;quot;
                  :key=&amp;quot;option.label&amp;quot;
                  :label=&amp;quot;option.label&amp;quot;
                  :value=&amp;quot;option.value&amp;quot;
                &amp;gt;&amp;lt;/el-option&amp;gt;
              &amp;lt;/el-select&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-if=&amp;quot;item.type === &#39;datepicker&#39;&amp;quot;&amp;gt;
              &amp;lt;el-date-picker
                v-bind=&amp;quot;item.otherOptions&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
              &amp;gt;&amp;lt;/el-date-picker&amp;gt;
            &amp;lt;/template&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/el-row&amp;gt;
  &amp;lt;/el-form&amp;gt;
  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; defineProps, withDefaults, defineEmits &amp;#125; from &#39;vue&#39;
import &amp;#123; IFormItem &amp;#125; from &#39;./type&#39;
interface Prop &amp;#123;
  formItems: IFormItem[] // 表单配置项
  labelWidth?: string // 每个表单标题宽度
  itemStyle?: object // 每个表单样式
  itemColLayout?: object // 表单布局
  isHidden?: boolean // 该输入框是否隐藏
  modelValue: object //绑定表单的每个数据
&amp;#125;
const props = withDefaults(defineProps&amp;lt;Prop&amp;gt;(), &amp;#123;
  labelWidth: &#39;120px&#39;,
  itemColLayout: () =&amp;gt; (&amp;#123;
    xl: 6, // &amp;gt;=1920px
    lg: 8, // &amp;gt;=1200px
    md: 12, // &amp;gt;=992px
    sm: 24, // &amp;gt;=768px
    xs: 24 // &amp;lt;768px
  &amp;#125;),
  itemStyle: () =&amp;gt; (&amp;#123;
    padding: &#39;10px 20px&#39;
  &amp;#125;)
&amp;#125;)
const emit = defineEmits&amp;lt;&amp;#123;
  (e: &#39;update:modelValue&#39;, value: any): void
&amp;#125;&amp;gt;()

// 输入框值改变该函数都会触发，将改变后的值传出去
const valueChange = (value: any, field: string) =&amp;gt; &amp;#123;
  emit(&#39;update:modelValue&#39;, &amp;#123; ...props.modelValue, [field]: value &amp;#125;)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.el-form-item &amp;#123;
  margin-top: 18px;
&amp;#125;
.el-select &amp;#123;
  width: 100%;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;role.vue 页面组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;form-test v-bind=&amp;quot;searchFormConfig&amp;quot; v-model=&amp;quot;formData&amp;quot;&amp;gt;&amp;lt;/form-test&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import formTest from &#39;@/base-ui/form/form-test.vue&#39;
import &amp;#123; searchFormConfig &amp;#125; from &#39;./config/search-config-test&#39;
import &amp;#123; ref &amp;#125; from &#39;vue&#39;
// 在这里取出所有的field字段组成formData数据
const formItems = searchFormConfig.formItems ?? []

let formDataInit = &amp;#123;&amp;#125;
formItems.map((item) =&amp;gt; &amp;#123;
  formDataInit[item.field] = &#39;&#39;
&amp;#125;)
let formData = ref(formDataInit)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153156166.png&#34; alt=&#34;image-20220506153156166&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这时我们发现它可以拿到数据了，很 nice，其实这差不多已经算封装好了，可以通过配置项修改里面的东西了，同时也可以拿到数据，但是我这个项目不止于此，我这其实要做表单的查询的，所以我要改装一下变成这样&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153210281.png&#34; alt=&#34;image-20220506153210281&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其实就是加了两个插槽和两个方法，我这里要实现功能就是点击重置按钮，它会重置表单数据，点击搜索按钮就可以拿到表单数据，这样我们就可以用我们拿到的表单数据去进行我们的操作拉，所以上代码&lt;/p&gt;
&lt;p&gt;role.vue 组件&lt;/p&gt;
&lt;p&gt;该部分我们传入了两个 template，一个是标题：高级检索，一个是两个按钮&lt;/p&gt;
&lt;p&gt;这里要重置按钮重置表单数据，取到表单的 ref 调用 resetFields 方法就好了，然后点击搜索按钮可以打印出 formData 数据，然后我们就可以利用该数据去做我们想要做的操作了，例如查询列表数据等&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;form-test v-bind=&amp;quot;searchFormConfig&amp;quot; v-model=&amp;quot;formData&amp;quot; ref=&amp;quot;formTestRef&amp;quot;&amp;gt;
      &amp;lt;template #header&amp;gt;
        &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
          &amp;lt;h1&amp;gt;高级检索&amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/template&amp;gt;
      &amp;lt;template #footer&amp;gt;
        &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
          &amp;lt;el-button type=&amp;quot;primary&amp;quot; :icon=&amp;quot;Refresh&amp;quot; @click=&amp;quot;resetBtnClick&amp;quot;
            &amp;gt;重置&amp;lt;/el-button
          &amp;gt;
          &amp;lt;el-button type=&amp;quot;primary&amp;quot; :icon=&amp;quot;Search&amp;quot; @click=&amp;quot;searchBtnClick&amp;quot;
            &amp;gt;搜索&amp;lt;/el-button
          &amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/form-test&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import formTest from &#39;@/base-ui/form/form-test.vue&#39;
import &amp;#123; searchFormConfig &amp;#125; from &#39;./config/search-config-test&#39;
import &amp;#123; ref &amp;#125; from &#39;vue&#39;
import &amp;#123; Search, Refresh &amp;#125; from &#39;@element-plus/icons-vue&#39;
// 在这里取出所有的field字段组成formData数据
const formItems = searchFormConfig.formItems ?? []

let formDataInit = &amp;#123;&amp;#125;
formItems.map((item) =&amp;gt; &amp;#123;
  formDataInit[item.field] = &#39;&#39;
&amp;#125;)
let formData = ref(formDataInit)

const formTestRef = ref&amp;lt;InstanceType&amp;lt;typeof formTest&amp;gt;&amp;gt;()

// 重置点击
const resetBtnClick = () =&amp;gt; &amp;#123;
  formTestRef.value?.resetForm()
&amp;#125;
// 搜索点击
const searchBtnClick = () =&amp;gt; &amp;#123;
  // 这里需要遍历搜索配置项，配置项里可以传dataType，要求数据返回什么类型的数据
  let queryInfo = &amp;#123; ...formData.value &amp;#125;
  searchFormConfig.formItems.map((item: any) =&amp;gt; &amp;#123;
    if (item.dataType === &#39;number&#39; &amp;amp;&amp;amp; queryInfo[item.field] !== &#39;&#39;) &amp;#123;
      queryInfo[item.field] = Number(queryInfo[item.field])
    &amp;#125;
  &amp;#125;)
  // 清空queryInfo中没有值的属性
  for (const i in queryInfo) &amp;#123;
    if (queryInfo[i] === &#39;&#39;) &amp;#123;
      delete queryInfo[i]
    &amp;#125;
  &amp;#125;
  console.log(queryInfo)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.header &amp;#123;
  padding-top: 20px;
&amp;#125;
.footer &amp;#123;
  text-align: right;
  padding: 0 50px 20px 0;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;form.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;el-form ref=&amp;quot;ruleFormRef&amp;quot; :labelWidth=&amp;quot;labelWidth&amp;quot; :model=&amp;quot;modelValue&amp;quot;&amp;gt;
    &amp;lt;el-row&amp;gt;
      &amp;lt;template v-for=&amp;quot;item in formItems&amp;quot; :key=&amp;quot;item.label&amp;quot;&amp;gt;
        &amp;lt;el-col v-bind=&amp;quot;itemColLayout&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            v-if=&amp;quot;!item.isHidden&amp;quot;
            :label=&amp;quot;item.label&amp;quot;
            :style=&amp;quot;itemStyle&amp;quot;
            :prop=&amp;quot;item.field&amp;quot;
          &amp;gt;
            &amp;lt;template v-if=&amp;quot;item.type === &#39;input&#39; || item.type === &#39;password&#39;&amp;quot;&amp;gt;
              &amp;lt;el-input
                :placeholder=&amp;quot;item.placeholder&amp;quot;
                :show-password=&amp;quot;item.type === &#39;password&#39;&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
              &amp;gt;&amp;lt;/el-input&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-else-if=&amp;quot;item.type === &#39;select&#39;&amp;quot;&amp;gt;
              &amp;lt;el-select
                :placeholder=&amp;quot;item.placeholder&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
              &amp;gt;
                &amp;lt;el-option
                  v-for=&amp;quot;option in item.options&amp;quot;
                  :key=&amp;quot;option.label&amp;quot;
                  :label=&amp;quot;option.label&amp;quot;
                  :value=&amp;quot;option.value&amp;quot;
                &amp;gt;&amp;lt;/el-option&amp;gt;
              &amp;lt;/el-select&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-if=&amp;quot;item.type === &#39;datepicker&#39;&amp;quot;&amp;gt;
              &amp;lt;el-date-picker
                v-bind=&amp;quot;item.otherOptions&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
              &amp;gt;&amp;lt;/el-date-picker&amp;gt;
            &amp;lt;/template&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/el-row&amp;gt;
  &amp;lt;/el-form&amp;gt;
  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; defineProps, withDefaults, defineEmits, ref, defineExpose &amp;#125; from &#39;vue&#39;
import &amp;#123; IFormItem &amp;#125; from &#39;./type&#39;
import type &amp;#123; FormInstance &amp;#125; from &#39;element-plus&#39;

interface Prop &amp;#123;
  formItems: IFormItem[] // 表单配置项
  labelWidth?: string // 每个表单标题宽度
  itemStyle?: object // 每个表单样式
  itemColLayout?: object // 表单布局
  isHidden?: boolean // 该输入框是否隐藏
  modelValue: object //绑定表单的每个数据
&amp;#125;
const props = withDefaults(defineProps&amp;lt;Prop&amp;gt;(), &amp;#123;
  labelWidth: &#39;120px&#39;,
  itemColLayout: () =&amp;gt; (&amp;#123;
    xl: 6, // &amp;gt;=1920px
    lg: 8, // &amp;gt;=1200px
    md: 12, // &amp;gt;=992px
    sm: 24, // &amp;gt;=768px
    xs: 24 // &amp;lt;768px
  &amp;#125;),
  itemStyle: () =&amp;gt; (&amp;#123;
    padding: &#39;10px 20px&#39;
  &amp;#125;)
&amp;#125;)
const emit = defineEmits&amp;lt;&amp;#123;
  (e: &#39;update:modelValue&#39;, value: any): void
&amp;#125;&amp;gt;()
const ruleFormRef = ref&amp;lt;FormInstance&amp;gt;()

// 输入框值改变该函数都会触发，将改变后的值传出去
const valueChange = (value: any, field: string) =&amp;gt; &amp;#123;
  emit(&#39;update:modelValue&#39;, &amp;#123; ...props.modelValue, [field]: value &amp;#125;)
&amp;#125;

// 表单重置方法
const resetForm = () =&amp;gt; &amp;#123;
  ruleFormRef.value?.resetFields()
&amp;#125;
defineExpose(&amp;#123;
  resetForm
&amp;#125;)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.el-form-item &amp;#123;
  margin-top: 18px;
&amp;#125;
.el-select &amp;#123;
  width: 100%;
&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1. 该组件要添加表单重置的方法&lt;/p&gt;
&lt;p&gt;2. 把 formData 的值绑定到 form 表单上：model=‘formData’&lt;/p&gt;
&lt;p&gt;3. 给 el-form-item 加上 prop 属性&lt;/p&gt;
&lt;p&gt;2，3 如果不加上的话，表单内置的重置表单方法会失效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153221867.png&#34; alt=&#34;image-20220506153221867&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153231986.png&#34; alt=&#34;image-20220506153231986&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这时我们已经封装完成了，但是我们可以发现，我们的 role 组件东西有点多了，如果我们其他组件比如，user 组件等，都要用这样类似的布局，我们这时就又要把这一堆代码给 cv 一遍，所以我们有可以把 role 里面这堆东西再封装一次&lt;/p&gt;
&lt;h2 id=&#34;开始封装4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始封装4&#34;&gt;#&lt;/a&gt; 开始封装④&lt;/h2&gt;
&lt;p&gt;page-search.vue 组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;Bu-form v-bind=&amp;quot;searchFormConfig&amp;quot; v-model=&amp;quot;formData&amp;quot; ref=&amp;quot;BuFormRef&amp;quot;&amp;gt;
    &amp;lt;template #header&amp;gt;
      &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;高级检索&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;template #footer&amp;gt;
      &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
        &amp;lt;el-button type=&amp;quot;primary&amp;quot; :icon=&amp;quot;Refresh&amp;quot; @click=&amp;quot;resetBtnClick&amp;quot;
          &amp;gt;重置&amp;lt;/el-button
        &amp;gt;
        &amp;lt;el-button type=&amp;quot;primary&amp;quot; :icon=&amp;quot;Search&amp;quot; @click=&amp;quot;searchBtnClick&amp;quot;
          &amp;gt;搜索&amp;lt;/el-button
        &amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/Bu-form&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; Search, Refresh &amp;#125; from &#39;@element-plus/icons-vue&#39;
import BuForm from &#39;@/base-ui/form/form-test.vue&#39;
import &amp;#123; defineProps, ref, defineEmits &amp;#125; from &#39;vue&#39;
import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
interface Prop &amp;#123;
  searchFormConfig: any
&amp;#125;
const props = defineProps&amp;lt;Prop&amp;gt;()
const emit = defineEmits&amp;lt;&amp;#123;
  (e: &#39;resetBtnClick&#39;): void
  (e: &#39;searchBtnClick&#39;, formData: object): void
&amp;#125;&amp;gt;()
const store = useStore()
const BuFormRef = ref&amp;lt;InstanceType&amp;lt;typeof BuForm&amp;gt;&amp;gt;()

const formItems = props.searchFormConfig?.formItems ?? []

let formDataInit = &amp;#123;&amp;#125;
formItems.map((item: any) =&amp;gt; &amp;#123;
  formDataInit[item.field] = &#39;&#39;
&amp;#125;)
let formData = ref(formDataInit)

// 重置点击
const resetBtnClick = () =&amp;gt; &amp;#123;
  BuFormRef.value?.resetForm()
  emit(&#39;resetBtnClick&#39;)
&amp;#125;
// 搜索点击
const searchBtnClick = () =&amp;gt; &amp;#123;
  // 这里需要遍历搜索配置项，配置项里可以传dataType，要求数据返回什么类型的数据
  let queryInfo = &amp;#123; ...formData.value &amp;#125;
  props.searchFormConfig.formItems.map((item: any) =&amp;gt; &amp;#123;
    if (item.dataType === &#39;number&#39; &amp;amp;&amp;amp; queryInfo[item.field] !== &#39;&#39;) &amp;#123;
      queryInfo[item.field] = Number(queryInfo[item.field])
    &amp;#125;
  &amp;#125;)
  // 清空queryInfo中没有值的属性
  for (const i in queryInfo) &amp;#123;
    if (queryInfo[i] === &#39;&#39;) &amp;#123;
      delete queryInfo[i]
    &amp;#125;
  &amp;#125;
  emit(&#39;searchBtnClick&#39;, queryInfo)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.header &amp;#123;
  padding-top: 20px;
&amp;#125;
.footer &amp;#123;
  text-align: right;
  padding: 0 50px 20px 0;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;role.vue 组件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;page-search-test
      :searchFormConfig=&amp;quot;searchFormConfig&amp;quot;
      @resetBtnClick=&amp;quot;handlerReset&amp;quot;
      @searchBtnClick=&amp;quot;handlerSearch&amp;quot;
    &amp;gt;&amp;lt;/page-search-test&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; searchFormConfig &amp;#125; from &#39;./config/search-config-test&#39;
import pageSearchTest from &#39;@/components/page-search/page-search-test.vue&#39;
const handlerReset = () =&amp;gt; &amp;#123;
  console.log(&#39;点击了重置按钮&#39;)
&amp;#125;
const handlerSearch = (queryInfo: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了搜索按钮，值为:&#39;, queryInfo)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153242943.png&#34; alt=&#34;image-20220506153242943&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里我们就可以体会到了，一样的效果，role 里面的代码是这么的少，只需要传入配置项就可以搞出这个表单，而且还能拿到表单数据，而且重点是，下个页面再用这个布局，直接用 page-search 组件就可以了，只需要传入不同的配置项，如果不同布局，再封装另一个 page-search 就是了，但是这是后台耶？搞那么华丽呼哨？不就是搜索表单，展示表单么&lt;/p&gt;
&lt;p&gt;下面附上完整全部封装代码&lt;/p&gt;
&lt;h2 id=&#34;完整封装代码5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整封装代码5&#34;&gt;#&lt;/a&gt; 完整封装代码⑤&lt;/h2&gt;
&lt;h3 id=&#34;配置项类型文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置项类型文件&#34;&gt;#&lt;/a&gt; 配置项类型文件&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// type.ts&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IFormType&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;input&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;password&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;select&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;datepicker&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IFormOption&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  value&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;number&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IFormItem&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  field&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 字段名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  type&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IFormType &lt;span class=&#34;token comment&#34;&gt;// 输入框类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  dataType&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输入框返回数据类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输入框标题&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  rules&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输入框验证规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  placeholder&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 输入框默认显示内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 针对 select&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  options&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IFormOption&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 选择器的可选子选项&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 针对特殊属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  otherOptions&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 该行是否隐藏&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  isHidden&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IForm&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  formItems&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; IFormItem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  labelWidth&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemStyle&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  itemColLayout&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;any&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;配置项文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置项文件&#34;&gt;#&lt;/a&gt; 配置项文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123; IForm &amp;#125; from &#39;@/base-ui/form/type&#39;
export const searchFormConfig: IForm = &amp;#123;
  formItems: [
    &amp;#123;
      field: &#39;id&#39;,
      type: &#39;input&#39;,
      label: &#39;用户id&#39;,
      placeholder: &#39;请输入用户id&#39;
    &amp;#125;,
    &amp;#123;
      field: &#39;name&#39;,
      type: &#39;input&#39;,
      label: &#39;用户名&#39;,
      placeholder: &#39;请输入用户名&#39;
    &amp;#125;,
    &amp;#123;
      field: &#39;realname&#39;,
      type: &#39;input&#39;,
      label: &#39;真实姓名&#39;,
      placeholder: &#39;请输入真实姓名&#39;
    &amp;#125;,
    &amp;#123;
      field: &#39;cellphone&#39;,
      type: &#39;input&#39;,
      label: &#39;电话号码&#39;,
      placeholder: &#39;请输入电话号码&#39;
    &amp;#125;,
    &amp;#123;
      field: &#39;enable&#39;,
      type: &#39;select&#39;,
      label: &#39;用户状态&#39;,
      placeholder: &#39;请选择用户状态&#39;,
      options: [
        &amp;#123; label: &#39;启用&#39;, value: 1 &amp;#125;,
        &amp;#123; label: &#39;禁用&#39;, value: 0 &amp;#125;
      ]
    &amp;#125;,
    &amp;#123;
      field: &#39;createAt&#39;,
      type: &#39;datepicker&#39;,
      label: &#39;创建时间&#39;,
      otherOptions: &amp;#123;
        startPlaceholder: &#39;开始时间&#39;,
        endPlaceholder: &#39;结束时间&#39;,
        type: &#39;daterange&#39;
      &amp;#125;
    &amp;#125;
  ]
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;form表单组件文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#form表单组件文件&#34;&gt;#&lt;/a&gt; form 表单组件文件&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;el-form
    :label-width=&amp;quot;labelWidth&amp;quot;
    ref=&amp;quot;ruleFormRef&amp;quot;
    status-icon
    :model=&amp;quot;modelValue&amp;quot;
  &amp;gt;
    &amp;lt;el-row&amp;gt;
      &amp;lt;template v-for=&amp;quot;item in formItems&amp;quot; :key=&amp;quot;item.label&amp;quot;&amp;gt;
        &amp;lt;el-col v-bind=&amp;quot;itemColLayout&amp;quot;&amp;gt;
          &amp;lt;el-form-item
            v-if=&amp;quot;!item.isHidden&amp;quot;
            :label=&amp;quot;item.label&amp;quot;
            :rules=&amp;quot;item.rules&amp;quot;
            :style=&amp;quot;itemStyle&amp;quot;
            :prop=&amp;quot;item.field&amp;quot;
          &amp;gt;
            &amp;lt;template v-if=&amp;quot;item.type === &#39;input&#39; || item.type === &#39;password&#39;&amp;quot;&amp;gt;
              &amp;lt;el-input
                :placeholder=&amp;quot;item.placeholder&amp;quot;
                :show-password=&amp;quot;item.type === &#39;password&#39;&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
                clearable
              /&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-else-if=&amp;quot;item.type === &#39;select&#39;&amp;quot;&amp;gt;
              &amp;lt;el-select
                :placeholder=&amp;quot;item.placeholder&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
                style=&amp;quot;width: 100%&amp;quot;
                clearable
              &amp;gt;
                &amp;lt;el-option
                  v-for=&amp;quot;option in item.options&amp;quot;
                  :key=&amp;quot;option.value&amp;quot;
                  :value=&amp;quot;option.value&amp;quot;
                  :label=&amp;quot;option.label&amp;quot;
                &amp;gt;
                &amp;lt;/el-option&amp;gt;
              &amp;lt;/el-select&amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-else-if=&amp;quot;item.type === &#39;datepicker&#39;&amp;quot;&amp;gt;
              &amp;lt;el-date-picker
                unlink-panels
                v-bind=&amp;quot;item.otherOptions&amp;quot;
                :model-value=&amp;quot;modelValue[`$&amp;#123;item.field&amp;#125;`]&amp;quot;
                @update:modelValue=&amp;quot;valueChange($event, item.field)&amp;quot;
              &amp;gt;&amp;lt;/el-date-picker&amp;gt;
            &amp;lt;/template&amp;gt;
          &amp;lt;/el-form-item&amp;gt;
        &amp;lt;/el-col&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/el-row&amp;gt;
  &amp;lt;/el-form&amp;gt;
  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; IFormItem &amp;#125; from &#39;./type&#39;
import &amp;#123; defineProps, withDefaults, ref, defineEmits, defineExpose &amp;#125; from &#39;vue&#39;
import type &amp;#123; FormInstance &amp;#125; from &#39;element-plus&#39;

// 定义属性
interface Props &amp;#123;
  formItems: IFormItem[] // 表单配置项
  labelWidth?: string // 每个表单标题宽度
  itemStyle?: object // 每个表单样式
  itemColLayout?: object // 表单布局
  modelValue: object //绑定表单的每个数据
  isHidden?: boolean
&amp;#125;
const props = withDefaults(defineProps&amp;lt;Props&amp;gt;(), &amp;#123;
  formItems: () =&amp;gt; [],
  labelWidth: &#39;120px&#39;,
  itemStyle: () =&amp;gt; (&amp;#123; padding: &#39;10px 20px&#39; &amp;#125;),
  itemColLayout: () =&amp;gt; (&amp;#123;
    xl: 6, // &amp;gt;=1920px
    lg: 8, // &amp;gt;=1200px
    md: 12, // &amp;gt;=992px
    sm: 24, // &amp;gt;=768px
    xs: 24 // &amp;lt;768px
  &amp;#125;)
&amp;#125;)
const emit = defineEmits&amp;lt;&amp;#123;
  (e: &#39;update:modelValue&#39;, value: any): void
&amp;#125;&amp;gt;()

const ruleFormRef = ref&amp;lt;FormInstance&amp;gt;()

// 定义方法
const valueChange = (value: any, field: string) =&amp;gt; &amp;#123;
  emit(&#39;update:modelValue&#39;, &amp;#123; ...props.modelValue, [field]: value &amp;#125;)
&amp;#125;

// 表单重置方法
const resetForm = () =&amp;gt; &amp;#123;
  ruleFormRef.value?.resetFields()
&amp;#125;
defineExpose(&amp;#123;
  resetForm
&amp;#125;)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.el-form-item &amp;#123;
  margin-top: 18px;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;page-search组件文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#page-search组件文件&#34;&gt;#&lt;/a&gt; page-search 组件文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;page-search&amp;quot;&amp;gt;
    &amp;lt;Bu-form v-bind=&amp;quot;searchFormConfig&amp;quot; v-model=&amp;quot;formData&amp;quot; ref=&amp;quot;BuFormRef&amp;quot;&amp;gt;
      &amp;lt;template #header&amp;gt;
        &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
          &amp;lt;h1&amp;gt;高级检索&amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/template&amp;gt;
      &amp;lt;template #footer&amp;gt;
        &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
          &amp;lt;el-button type=&amp;quot;primary&amp;quot; :icon=&amp;quot;Refresh&amp;quot; @click=&amp;quot;resetClick&amp;quot;
            &amp;gt;重置&amp;lt;/el-button
          &amp;gt;
          &amp;lt;el-button type=&amp;quot;primary&amp;quot; :icon=&amp;quot;Search&amp;quot; @click=&amp;quot;searchClick&amp;quot;
            &amp;gt;搜索&amp;lt;/el-button
          &amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/Bu-form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
import BuForm from &#39;@/base-ui/form/form.vue&#39;
import &amp;#123; Search, Refresh &amp;#125; from &#39;@element-plus/icons-vue&#39;
import &amp;#123; ref, defineProps, defineEmits &amp;#125; from &#39;vue&#39;
import &amp;#123; IForm &amp;#125; from &#39;@/base-ui/form/type&#39;

// 定义属性
interface Props &amp;#123;
  searchFormConfig: IForm
&amp;#125;
const props = defineProps&amp;lt;Props&amp;gt;()
const emit = defineEmits&amp;lt;&amp;#123;
  (e: &#39;resetBtnClick&#39;): void
  (e: &#39;searchBtnClick&#39;, formData: object): void
&amp;#125;&amp;gt;()
const store = useStore()
const BuFormRef = ref&amp;lt;InstanceType&amp;lt;typeof BuForm&amp;gt;&amp;gt;()

// 1.从接收到的搜索配置中取出各个field,组成表单的数据formData
const formItems = props.searchFormConfig?.formItems ?? []
let formDataInit = &amp;#123;&amp;#125;
formItems.map((item) =&amp;gt; &amp;#123;
  formDataInit[item.field] = &#39;&#39;
&amp;#125;)
let formData = ref(formDataInit)

// 2.重置与搜索功能
// 重置按钮触发
const resetClick = () =&amp;gt; &amp;#123;
  BuFormRef.value?.resetForm()
  emit(&#39;resetBtnClick&#39;)
&amp;#125;
// 搜索按钮触发
const searchClick = () =&amp;gt; &amp;#123;
  // 这里需要遍历搜索配置项，配置项里可以传dataType，要求数据返回什么类型的数据
  let queryInfo = &amp;#123; ...formData.value &amp;#125;
  props.searchFormConfig.formItems.map((item) =&amp;gt; &amp;#123;
    if (item.dataType === &#39;number&#39; &amp;amp;&amp;amp; queryInfo[item.field] !== &#39;&#39;) &amp;#123;
      queryInfo[item.field] = Number(queryInfo[item.field])
    &amp;#125;
  &amp;#125;)
  // 清空queryInfo中没有值的属性
  for (const i in queryInfo) &amp;#123;
    if (queryInfo[i] === &#39;&#39;) &amp;#123;
      delete queryInfo[i]
    &amp;#125;
  &amp;#125;
  emit(&#39;searchBtnClick&#39;, queryInfo)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.header &amp;#123;
  padding-top: 20px;
&amp;#125;
.footer &amp;#123;
  text-align: right;
  padding: 0 50px 20px 0;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;role页面组件文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#role页面组件文件&#34;&gt;#&lt;/a&gt; role 页面组件文件&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;role&amp;quot;&amp;gt;
    &amp;lt;page-search
      :searchFormConfig=&amp;quot;searchFormConfig&amp;quot;
      @resetBtnClick=&amp;quot;handlerReset&amp;quot;
      @searchBtnClick=&amp;quot;handlerSearch&amp;quot;
    &amp;gt;&amp;lt;/page-search&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; searchFormConfig &amp;#125; from &#39;./config/search-config-test&#39;
import pageSearch from &#39;@/components/page-search/page-search.vue&#39;
const handlerReset = () =&amp;gt; &amp;#123;
  console.log(&#39;点击了重置按钮&#39;)
&amp;#125;
const handlerSearch = (queryInfo: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了搜索按钮，值为:&#39;, queryInfo)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;结语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结语&#34;&gt;#&lt;/a&gt; 结语&lt;/h2&gt;
&lt;p&gt;写了这么多，终于写完了，这里是属于 Form 表单部分的封装全部过程，能写到这其实我挺有成就感的哈哈哈哈，因为我刚学会的时候思路有了，但是敲出来有点困难，不过这个过程是我又捋了一遍，然后自己敲出来的，感觉其实也不难，已经掌握了这种封装思路与方法了哈哈，其他组件其实也可以利用这种思路，封装出来，在页面上的使用直接传配置项调用就完事，开发每个相似的页面效率简直是牛逼&lt;/p&gt;
&lt;h1 id=&#34;table表格的封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#table表格的封装&#34;&gt;#&lt;/a&gt; Table 表格的封装&lt;/h1&gt;
&lt;h2 id=&#34;简述-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简述-2&#34;&gt;#&lt;/a&gt; 简述&lt;/h2&gt;
&lt;p&gt;再来折磨一遍，这里是 table 表单的封装，其实跟上面的差不多，有点小区别，会用到添加动态插槽，这里就不墨迹了，直接上用配置项封装前的正常使用&lt;/p&gt;
&lt;h2 id=&#34;正常使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正常使用&#34;&gt;#&lt;/a&gt; 正常使用&lt;/h2&gt;
&lt;p&gt;user.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;el-table style=&amp;quot;width: 100%&amp;quot; :data=&amp;quot;dataList&amp;quot; border&amp;gt;
      &amp;lt;!-- 1.传入showSelectColumn时展示的全选列 --&amp;gt;
      &amp;lt;template v-if=&amp;quot;contentTableConfig.showSelectColumn&amp;quot;&amp;gt;
        &amp;lt;el-table-column type=&amp;quot;selection&amp;quot; /&amp;gt;
      &amp;lt;/template&amp;gt;
      &amp;lt;!-- 2.传入showIndexColumn时展示的序号列 --&amp;gt;
      &amp;lt;template v-if=&amp;quot;contentTableConfig.showIndexColumn&amp;quot;&amp;gt;
        &amp;lt;el-table-column type=&amp;quot;index&amp;quot; label=&amp;quot;序号&amp;quot; /&amp;gt;
      &amp;lt;/template&amp;gt;
      &amp;lt;!-- 3.propList里面的所有列 --&amp;gt;
      &amp;lt;template v-for=&amp;quot;item in contentTableConfig.propList&amp;quot; :key=&amp;quot;item.prop&amp;quot;&amp;gt;
        &amp;lt;el-table-column v-bind=&amp;quot;item&amp;quot; show-overflow-tooltip&amp;gt;
          &amp;lt;!-- 传有slotName时展示的插槽列 --&amp;gt;
          &amp;lt;template #default=&amp;quot;scope&amp;quot; v-if=&amp;quot;item.slotName&amp;quot;&amp;gt;
            &amp;lt;template v-if=&amp;quot;item.slotName === &#39;handler&#39;&amp;quot;&amp;gt;
              &amp;lt;el-button size=&amp;quot;small&amp;quot; :icon=&amp;quot;Edit&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;编辑&amp;lt;/el-button&amp;gt;
              &amp;lt;el-button size=&amp;quot;small&amp;quot; :icon=&amp;quot;Delete&amp;quot; type=&amp;quot;text&amp;quot;
                &amp;gt;删除&amp;lt;/el-button
              &amp;gt;
            &amp;lt;/template&amp;gt;
            &amp;lt;template v-if=&amp;quot;item.slotName === &#39;status&#39;&amp;quot;&amp;gt;
              &amp;lt;el-button&amp;gt;&amp;#123;&amp;#123;
                scope.row.status === 0 ? &#39;禁用&#39; : &#39;启用&#39;
              &amp;#125;&amp;#125;&amp;lt;/el-button&amp;gt;
            &amp;lt;/template&amp;gt;
          &amp;lt;/template&amp;gt;
        &amp;lt;/el-table-column&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/el-table&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; Delete, Edit &amp;#125; from &#39;@element-plus/icons-vue&#39;
import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
import &amp;#123; computed &amp;#125; from &#39;vue&#39;
const store = useStore()
// 这里是网络请求数据
const getPageData = () =&amp;gt; &amp;#123;
  store.dispatch(`main/getPageListAction`, &amp;#123;
    queryInfo: &amp;#123;
      offset: 0,
      size: 10
    &amp;#125;,
    pageName: &#39;users&#39;
  &amp;#125;)
&amp;#125;
// 页面加载时第一次调用获取表单数据
getPageData()
const dataList = computed(() =&amp;gt; store.getters[`main/pageListData`](&#39;users&#39;))

// 表格配置项
const contentTableConfig = &amp;#123;
  // 表格配置
  propList: [
    &amp;#123; prop: &#39;id&#39;, label: &#39;用户id&#39;, minWidth: &#39;100&#39;, align: &#39;center&#39; &amp;#125;,
    &amp;#123; prop: &#39;name&#39;, label: &#39;用户名&#39;, minWidth: &#39;100&#39;, align: &#39;center&#39; &amp;#125;,
    &amp;#123; prop: &#39;realname&#39;, label: &#39;真实姓名&#39;, minWidth: &#39;100&#39;, align: &#39;center&#39; &amp;#125;,
    &amp;#123; prop: &#39;cellphone&#39;, label: &#39;手机号码&#39;, minWidth: &#39;100&#39;, align: &#39;center&#39; &amp;#125;,
    &amp;#123;
      prop: &#39;enable&#39;,
      label: &#39;状态&#39;,
      minWidth: &#39;100&#39;,
      slotName: &#39;status&#39;,
      align: &#39;center&#39;
    &amp;#125;,
    &amp;#123;
      label: &#39;操作&#39;,
      minWidth: &#39;120&#39;,
      slotName: &#39;handler&#39;,
      align: &#39;center&#39;
    &amp;#125;
  ],
  // 表格具有序号列
  showIndexColumn: true,
  // 表格具有可选列
  showSelectColumn: true
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153259867.png&#34; alt=&#34;image-20220506153259867&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从上面可以看出，主页面的代码有多冗余，看到就头疼 + 裂开，所以开始一层封装&lt;/p&gt;
&lt;h2 id=&#34;开始封装1-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始封装1-2&#34;&gt;#&lt;/a&gt; 开始封装①&lt;/h2&gt;
&lt;p&gt;配置项类型文件&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ITbaleOption&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  prop&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  minWidth&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  slotName&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ITable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  propList&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; ITbaleOption&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showIndexColumn&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showSelectColumn&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  childrenProps&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; object&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;配置项文件&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; ITable &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/base-ui/table/type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; contentTableConfig&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; ITable &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 表格配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  propList&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;realname&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;真实姓名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;cellphone&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;手机号码&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;状态&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; slotName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;status&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;操作&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;120&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      slotName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;handler&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 表格具有序号列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showIndexColumn&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 表格具有可选列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showSelectColumn&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;table.vue 文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;el-table style=&amp;quot;width: 100%&amp;quot; :data=&amp;quot;listData&amp;quot; border&amp;gt;
    &amp;lt;!-- 1.传入showSelectColumn时展示的全选列 --&amp;gt;
    &amp;lt;template v-if=&amp;quot;showSelectColumn&amp;quot;&amp;gt;
      &amp;lt;el-table-column type=&amp;quot;selection&amp;quot; /&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 2.传入showIndexColumn时展示的序号列 --&amp;gt;
    &amp;lt;template v-if=&amp;quot;showIndexColumn&amp;quot;&amp;gt;
      &amp;lt;el-table-column type=&amp;quot;index&amp;quot; label=&amp;quot;序号&amp;quot; /&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 3.propList里面的所有列 --&amp;gt;
    &amp;lt;template v-for=&amp;quot;item in propList&amp;quot; :key=&amp;quot;item.prop&amp;quot;&amp;gt;
      &amp;lt;el-table-column v-bind=&amp;quot;item&amp;quot; show-overflow-tooltip&amp;gt;
        &amp;lt;!-- 传有slotName时展示的插槽列 --&amp;gt;
        &amp;lt;template #default=&amp;quot;scope&amp;quot; v-if=&amp;quot;item.slotName&amp;quot;&amp;gt;
          &amp;lt;template v-if=&amp;quot;item.slotName === &#39;handler&#39;&amp;quot;&amp;gt;
            &amp;lt;el-button size=&amp;quot;small&amp;quot; :icon=&amp;quot;Edit&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;编辑&amp;lt;/el-button&amp;gt;
            &amp;lt;el-button size=&amp;quot;small&amp;quot; :icon=&amp;quot;Delete&amp;quot; type=&amp;quot;text&amp;quot;&amp;gt;删除&amp;lt;/el-button&amp;gt;
          &amp;lt;/template&amp;gt;
          &amp;lt;template v-if=&amp;quot;item.slotName === &#39;status&#39;&amp;quot;&amp;gt;
            &amp;lt;el-button&amp;gt;&amp;#123;&amp;#123;
              scope.row.status === 0 ? &#39;禁用&#39; : &#39;启用&#39;
            &amp;#125;&amp;#125;&amp;lt;/el-button&amp;gt;
          &amp;lt;/template&amp;gt;
        &amp;lt;/template&amp;gt;
      &amp;lt;/el-table-column&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/el-table&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; Delete, Edit &amp;#125; from &#39;@element-plus/icons-vue&#39;
import &amp;#123; defineProps, withDefaults, defineEmits &amp;#125; from &#39;vue&#39;
import &amp;#123; ITbaleOption &amp;#125; from &#39;./type&#39;
interface Props &amp;#123;
  listData: any[] //表单数据
  propList: ITbaleOption[] //表单配置项
  showIndexColumn?: boolean //是否显示索引列
  showSelectColumn?: boolean //是否显示全选列
  childrenProps?: object // 是否有子数据，树形数据才用得到
&amp;#125;
const props = withDefaults(defineProps&amp;lt;Props&amp;gt;(), &amp;#123;
  showIndexColumn: false,
  showSelectColumn: false,
  childrenProps: () =&amp;gt; (&amp;#123;&amp;#125;)
&amp;#125;)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;user.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;table-test v-bind=&amp;quot;contentTableConfig&amp;quot; :listData=&amp;quot;dataList&amp;quot;&amp;gt;&amp;lt;/table-test&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
// 导入表单配置项
import &amp;#123; contentTableConfig &amp;#125; from &#39;./config/table-config&#39;
import tableTest from &#39;@/base-ui/table/table-test.vue&#39;
import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
import &amp;#123; computed &amp;#125; from &#39;vue&#39;
const store = useStore()

// 这里是网络请求数据
const getPageData = () =&amp;gt; &amp;#123;
  store.dispatch(`main/getPageListAction`, &amp;#123;
    queryInfo: &amp;#123;
      offset: 0,
      size: 10
    &amp;#125;,
    pageName: &#39;users&#39;
  &amp;#125;)
&amp;#125;
// 页面加载时第一次调用获取表单数据
getPageData()
const dataList = computed(() =&amp;gt; store.getters[`main/pageListData`](&#39;users&#39;))
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153312738.png&#34; alt=&#34;image-20220506153312738&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到，代码抽出去了，但是我们可以发现，里面的插槽其实不能给它写死，应该是动态决定的，所以我们可以这样做&lt;/p&gt;
&lt;p&gt;在拥有 slotName 部分的插槽列部分放入一个具名插槽，再将默认插槽列中的 scope.row 发回给具名插槽&lt;/p&gt;
&lt;p&gt;table.vue（为了可扩展性，我依旧在里面加了两个插槽，一个顶部一个底部）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;el-table style=&amp;quot;width: 100%&amp;quot; :data=&amp;quot;listData&amp;quot; border&amp;gt;
    &amp;lt;!-- 1.传入showSelectColumn时展示的全选列 --&amp;gt;
    &amp;lt;template v-if=&amp;quot;showSelectColumn&amp;quot;&amp;gt;
      &amp;lt;el-table-column type=&amp;quot;selection&amp;quot; /&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 2.传入showIndexColumn时展示的序号列 --&amp;gt;
    &amp;lt;template v-if=&amp;quot;showIndexColumn&amp;quot;&amp;gt;
      &amp;lt;el-table-column type=&amp;quot;index&amp;quot; label=&amp;quot;序号&amp;quot; /&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 3.propList里面的所有列 --&amp;gt;
    &amp;lt;template v-for=&amp;quot;item in propList&amp;quot; :key=&amp;quot;item.prop&amp;quot;&amp;gt;
      &amp;lt;el-table-column v-bind=&amp;quot;item&amp;quot; show-overflow-tooltip&amp;gt;
        &amp;lt;!-- 传有slotName时展示的插槽列 --&amp;gt;
        &amp;lt;template #default=&amp;quot;scope&amp;quot; v-if=&amp;quot;item.slotName&amp;quot;&amp;gt;
          &amp;lt;slot :name=&amp;quot;item.slotName&amp;quot; :row=&amp;quot;scope.row&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
        &amp;lt;/template&amp;gt;
      &amp;lt;/el-table-column&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/el-table&amp;gt;
  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; defineProps, withDefaults, defineEmits &amp;#125; from &#39;vue&#39;
import &amp;#123; ITbaleOption &amp;#125; from &#39;./type&#39;
interface Props &amp;#123;
  listData: any[] //表单数据
  propList: ITbaleOption[] //表单配置项
  showIndexColumn?: boolean //是否显示索引列
  showSelectColumn?: boolean //是否显示全选列
  childrenProps?: object // 是否有子数据，树形数据才用得到
&amp;#125;
const props = withDefaults(defineProps&amp;lt;Props&amp;gt;(), &amp;#123;
  showIndexColumn: false,
  showSelectColumn: false,
  childrenProps: () =&amp;gt; (&amp;#123;&amp;#125;)
&amp;#125;)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在 user.vue 中放入具名插槽，传进去 table 组件里，同时传入一些内容到可扩展插槽里面&lt;/p&gt;
&lt;p&gt;user.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
      &amp;lt;table-test v-bind=&amp;quot;contentTableConfig&amp;quot; :listData=&amp;quot;dataList&amp;quot;&amp;gt;
        &amp;lt;!-- 1.header中的插槽 --&amp;gt;
        &amp;lt;template #header&amp;gt;
          &amp;lt;div class=&amp;quot;header-default&amp;quot;&amp;gt;
            &amp;lt;!-- 传入标题（位于左侧） --&amp;gt;
            &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;用户列表&amp;lt;/div&amp;gt;
            &amp;lt;!-- 传入处理内容（位于右侧） --&amp;gt;
            &amp;lt;div class=&amp;quot;handler&amp;quot;&amp;gt;
              &amp;lt;el-button type=&amp;quot;primary&amp;quot; @click=&amp;quot;addUserBtnClick&amp;quot;
                &amp;gt;新建用户&amp;lt;/el-button
              &amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/template&amp;gt;
        &amp;lt;!-- 2.该user页面独有部分 --&amp;gt;
        &amp;lt;template #status=&amp;quot;scope&amp;quot;&amp;gt;
          &amp;lt;el-button&amp;gt;&amp;#123;&amp;#123; scope.row.status === 0 ? &#39;禁用&#39; : &#39;启用&#39; &amp;#125;&amp;#125;&amp;lt;/el-button&amp;gt;
        &amp;lt;/template&amp;gt;
        &amp;lt;!-- 3.每个页面都会有的部分 --&amp;gt;
        &amp;lt;template #handler=&amp;quot;scope&amp;quot;&amp;gt;
          &amp;lt;el-button
            size=&amp;quot;small&amp;quot;
            :icon=&amp;quot;Edit&amp;quot;
            type=&amp;quot;text&amp;quot;
            @click=&amp;quot;handleEditClick(scope.row)&amp;quot;
            &amp;gt;编辑&amp;lt;/el-button
          &amp;gt;
          &amp;lt;el-button
            size=&amp;quot;small&amp;quot;
            :icon=&amp;quot;Delete&amp;quot;
            type=&amp;quot;text&amp;quot;
            @click=&amp;quot;deleteBtnClick(scope.row)&amp;quot;
            &amp;gt;删除&amp;lt;/el-button
          &amp;gt;
        &amp;lt;/template&amp;gt;
        &amp;lt;!-- 4.footer插槽 --&amp;gt;
        &amp;lt;template #footer&amp;gt;
          &amp;lt;!-- 只有总条数&amp;gt;0才会有分页器 --&amp;gt;
          &amp;lt;div class=&amp;quot;footer-default&amp;quot;&amp;gt;
            &amp;lt;el-pagination
              :page-sizes=&amp;quot;[100, 200, 300, 400]&amp;quot;
              layout=&amp;quot;total, sizes, prev, pager, next, jumper&amp;quot;
              :total=&amp;quot;400&amp;quot;
            /&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/template&amp;gt;
      &amp;lt;/table-test&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
// 导入表单配置项
import &amp;#123; contentTableConfig &amp;#125; from &#39;./config/table-config&#39;
import &amp;#123; Delete, Edit &amp;#125; from &#39;@element-plus/icons-vue&#39;
import tableTest from &#39;@/base-ui/table/table-test.vue&#39;
import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
import &amp;#123; computed &amp;#125; from &#39;vue&#39;
const store = useStore()

// 这里是网络请求数据
const getPageData = () =&amp;gt; &amp;#123;
  store.dispatch(`main/getPageListAction`, &amp;#123;
    queryInfo: &amp;#123;
      offset: 0,
      size: 10
    &amp;#125;,
    pageName: &#39;users&#39;
  &amp;#125;)
&amp;#125;
// 页面加载时第一次调用获取表单数据
getPageData()
const dataList = computed(() =&amp;gt; store.getters[`main/pageListData`](&#39;users&#39;))

// 点击编辑按钮触发事件
const handleEditClick = (row: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了编辑按钮，数据为：&#39;, row)
&amp;#125;
// 点击删除按钮触发事件
const deleteBtnClick = (row: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了删除按钮，数据为：&#39;, row)
&amp;#125;
// 点击新建用户触发事件
const addUserBtnClick = () =&amp;gt; &amp;#123;
  console.log(&#39;点击了新建用户&#39;)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.content &amp;#123;
  border-top: 20px solid #dedee1;
  padding: 40px;
&amp;#125;
.header-default &amp;#123;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  .title &amp;#123;
    font-size: 22px;
    font-weight: 700;
  &amp;#125;
&amp;#125;
.footer-default &amp;#123;
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153326944.png&#34; alt=&#34;image-20220506153326944&#34; /&gt;&lt;/p&gt;
&lt;p&gt;显然此时封装已经满足需求了，但是我们发现主页面的代码页还是比较冗余，如果不用到插槽的话还好，要用到插槽的话，就要在主页面写入很多插槽，多个页面都这样的话页裂开，所以我们要像之前一样把这坨代码再封一层&lt;/p&gt;
&lt;h2 id=&#34;开始封装2-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始封装2-2&#34;&gt;#&lt;/a&gt; 开始封装②&lt;/h2&gt;
&lt;p&gt;page-table.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;table-test v-bind=&amp;quot;contentTableConfig&amp;quot; :listData=&amp;quot;dataList&amp;quot;&amp;gt;
    &amp;lt;!-- 1.header中的插槽 --&amp;gt;
    &amp;lt;template #header&amp;gt;
      &amp;lt;div class=&amp;quot;header-default&amp;quot;&amp;gt;
        &amp;lt;!-- 传入标题（位于左侧） --&amp;gt;
        &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;&amp;#123;&amp;#123; pageNameInChinese &amp;#125;&amp;#125;列表&amp;lt;/div&amp;gt;
        &amp;lt;!-- 传入处理内容（位于右侧） --&amp;gt;
        &amp;lt;div class=&amp;quot;handler&amp;quot;&amp;gt;
          &amp;lt;el-button type=&amp;quot;primary&amp;quot; @click=&amp;quot;addUserBtnClick&amp;quot;
            &amp;gt;新建&amp;#123;&amp;#123; pageNameInChinese &amp;#125;&amp;#125;&amp;lt;/el-button
          &amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 2.该user页面独有部分 --&amp;gt;
    &amp;lt;template #status=&amp;quot;scope&amp;quot;&amp;gt;
      &amp;lt;el-button&amp;gt;&amp;#123;&amp;#123; scope.row.status === 0 ? &#39;禁用&#39; : &#39;启用&#39; &amp;#125;&amp;#125;&amp;lt;/el-button&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 3.每个页面都会有的部分 --&amp;gt;
    &amp;lt;template #handler=&amp;quot;scope&amp;quot;&amp;gt;
      &amp;lt;el-button
        size=&amp;quot;small&amp;quot;
        :icon=&amp;quot;Edit&amp;quot;
        type=&amp;quot;text&amp;quot;
        @click=&amp;quot;handleEditClick(scope.row)&amp;quot;
        &amp;gt;编辑&amp;lt;/el-button
      &amp;gt;
      &amp;lt;el-button
        size=&amp;quot;small&amp;quot;
        :icon=&amp;quot;Delete&amp;quot;
        type=&amp;quot;text&amp;quot;
        @click=&amp;quot;deleteBtnClick(scope.row)&amp;quot;
        &amp;gt;删除&amp;lt;/el-button
      &amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 4.footer插槽 --&amp;gt;
    &amp;lt;template #footer&amp;gt;
      &amp;lt;!-- 只有总条数&amp;gt;0才会有分页器 --&amp;gt;
      &amp;lt;div class=&amp;quot;footer-default&amp;quot;&amp;gt;
        &amp;lt;el-pagination
          :page-sizes=&amp;quot;[100, 200, 300, 400]&amp;quot;
          layout=&amp;quot;total, sizes, prev, pager, next, jumper&amp;quot;
          :total=&amp;quot;400&amp;quot;
        /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/table-test&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; Delete, Edit &amp;#125; from &#39;@element-plus/icons-vue&#39;
import tableTest from &#39;@/base-ui/table/table-test.vue&#39;
import type &amp;#123; ITable &amp;#125; from &#39;@/base-ui/table/type&#39;

import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
import &amp;#123; defineProps, computed &amp;#125; from &#39;vue&#39;

// 定义属性
interface Props &amp;#123;
  contentTableConfig: ITable //表单配置接收
  pageName: string //表单名字接收
&amp;#125;
const props = defineProps&amp;lt;Props&amp;gt;()

const store = useStore()

// 这里是网络请求数据
const getPageData = () =&amp;gt; &amp;#123;
  store.dispatch(`main/getPageListAction`, &amp;#123;
    queryInfo: &amp;#123;
      offset: 0,
      size: 10
    &amp;#125;,
    pageName: props.pageName
  &amp;#125;)
&amp;#125;
// 页面加载时第一次调用获取表单数据
getPageData()
const dataList = computed(() =&amp;gt;
  store.getters[`main/pageListData`](props.pageName)
)

// 1.获取页面中文名称
const pageNameTransform = (pageName: string): string =&amp;gt; &amp;#123;
  switch (pageName) &amp;#123;
    case &#39;users&#39;:
      return &#39;用户&#39;
    default:
      return &#39;&#39;
  &amp;#125;
&amp;#125;
const pageNameInChinese = pageNameTransform(props.pageName)

// 点击编辑按钮触发事件
const handleEditClick = (row: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了编辑按钮，数据为：&#39;, row)
&amp;#125;
// 点击删除按钮触发事件
const deleteBtnClick = (row: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了删除按钮，数据为：&#39;, row)
&amp;#125;
// 点击新建用户触发事件
const addUserBtnClick = () =&amp;gt; &amp;#123;
  console.log(&#39;点击了新建用户&#39;)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.header-default &amp;#123;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  .title &amp;#123;
    font-size: 22px;
    font-weight: 700;
  &amp;#125;
&amp;#125;
.footer-default &amp;#123;
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
&amp;#125;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;user.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
      &amp;lt;page-table
        :contentTableConfig=&amp;quot;contentTableConfig&amp;quot;
        pageName=&amp;quot;users&amp;quot;
      &amp;gt;&amp;lt;/page-table&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
// 导入表单配置项
import &amp;#123; contentTableConfig &amp;#125; from &#39;./config/table-config&#39;
import pageTable from &#39;@/components/page-table/page-table-test.vue&#39;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.content &amp;#123;
  border-top: 20px solid #dedee1;
  padding: 40px;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153337789.png&#34; alt=&#34;image-20220506153337789&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图中可以看出效果其实是一样的，主页面的代码少了，只需要传入配置项和 pageName（控制网络请求数据）就可以生成一个表格，但是我们可以发现，如果多个页面复用的话，其实操作列的插槽是公有的，但是状态列却是私有的，别的页面不一定有状态页，所以状态列内容插入的位置应该在主页面 user 里面而不该在封装的组件里面，而且编辑新建逻辑也是页面独有，应该在主页面执行&lt;/p&gt;
&lt;h2 id=&#34;开始封装3-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开始封装3-2&#34;&gt;#&lt;/a&gt; 开始封装③&lt;/h2&gt;
&lt;p&gt;user.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
      &amp;lt;page-table
        :contentTableConfig=&amp;quot;contentTableConfig&amp;quot;
        pageName=&amp;quot;users&amp;quot;
        @editBtnClick=&amp;quot;handleEditClick&amp;quot;
        @createBtnClick=&amp;quot;handleCreateClick&amp;quot;
      &amp;gt;
        &amp;lt;template #status=&amp;quot;scope&amp;quot;&amp;gt;
          &amp;lt;el-button&amp;gt;&amp;#123;&amp;#123; scope.row.status === 0 ? &#39;禁用&#39; : &#39;启用&#39; &amp;#125;&amp;#125;&amp;lt;/el-button&amp;gt;
        &amp;lt;/template&amp;gt;
      &amp;lt;/page-table&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
// 导入表单配置项
import &amp;#123; contentTableConfig &amp;#125; from &#39;./config/table-config&#39;
import pageTable from &#39;@/components/page-table/page-table-test.vue&#39;

const handleEditClick = (row: any, pageNameInChinese: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了编辑按钮，数据为：&#39;, row, pageNameInChinese)
&amp;#125;

const handleCreateClick = (pageNameInChinese: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了新建用户，数据为：&#39;, pageNameInChinese)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.content &amp;#123;
  border-top: 20px solid #dedee1;
  padding: 40px;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;page-table.vue&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;table-test v-bind=&amp;quot;contentTableConfig&amp;quot; :listData=&amp;quot;dataList&amp;quot;&amp;gt;
    &amp;lt;!-- 1.header中的插槽 --&amp;gt;
    &amp;lt;template #header&amp;gt;
      &amp;lt;div class=&amp;quot;header-default&amp;quot;&amp;gt;
        &amp;lt;!-- 传入标题（位于左侧） --&amp;gt;
        &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;&amp;#123;&amp;#123; pageNameInChinese &amp;#125;&amp;#125;列表&amp;lt;/div&amp;gt;
        &amp;lt;!-- 传入处理内容（位于右侧） --&amp;gt;
        &amp;lt;div class=&amp;quot;handler&amp;quot;&amp;gt;
          &amp;lt;el-button type=&amp;quot;primary&amp;quot; @click=&amp;quot;addUserBtnClick&amp;quot;
            &amp;gt;新建&amp;#123;&amp;#123; pageNameInChinese &amp;#125;&amp;#125;&amp;lt;/el-button
          &amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 2.该user页面独有部分 --&amp;gt;
    &amp;lt;template
      v-for=&amp;quot;item in otherPropSlots&amp;quot;
      :key=&amp;quot;item.prop&amp;quot;
      #[item.slotName]=&amp;quot;scope&amp;quot;
    &amp;gt;
      &amp;lt;template v-if=&amp;quot;item.slotName&amp;quot;&amp;gt;
        &amp;lt;slot :name=&amp;quot;item.slotName&amp;quot; :row=&amp;quot;scope.row&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 3.每个页面都会有的部分 --&amp;gt;
    &amp;lt;template #handler=&amp;quot;scope&amp;quot;&amp;gt;
      &amp;lt;el-button
        size=&amp;quot;small&amp;quot;
        :icon=&amp;quot;Edit&amp;quot;
        type=&amp;quot;text&amp;quot;
        @click=&amp;quot;handleEditClick(scope.row)&amp;quot;
        &amp;gt;编辑&amp;lt;/el-button
      &amp;gt;
      &amp;lt;el-button
        size=&amp;quot;small&amp;quot;
        :icon=&amp;quot;Delete&amp;quot;
        type=&amp;quot;text&amp;quot;
        @click=&amp;quot;deleteBtnClick(scope.row)&amp;quot;
        &amp;gt;删除&amp;lt;/el-button
      &amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 4.footer插槽 --&amp;gt;
    &amp;lt;template #footer&amp;gt;
      &amp;lt;!-- 只有总条数&amp;gt;0才会有分页器 --&amp;gt;
      &amp;lt;div class=&amp;quot;footer-default&amp;quot;&amp;gt;
        &amp;lt;el-pagination
          :page-sizes=&amp;quot;[100, 200, 300, 400]&amp;quot;
          layout=&amp;quot;total, sizes, prev, pager, next, jumper&amp;quot;
          :total=&amp;quot;400&amp;quot;
        /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/table-test&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; Delete, Edit &amp;#125; from &#39;@element-plus/icons-vue&#39;
import tableTest from &#39;@/base-ui/table/table-test.vue&#39;
import type &amp;#123; ITable &amp;#125; from &#39;@/base-ui/table/type&#39;

import &amp;#123; useStore &amp;#125; from &#39;@/store&#39;
import &amp;#123; defineProps, computed, defineEmits &amp;#125; from &#39;vue&#39;

// 定义属性
interface Props &amp;#123;
  contentTableConfig: ITable //表单配置接收
  pageName: string //表单名字接收
&amp;#125;
const props = defineProps&amp;lt;Props&amp;gt;()
const emit = defineEmits&amp;lt;&amp;#123;
  (e: &#39;createBtnClick&#39;, pageNameInChinese: string): void
  (e: &#39;editBtnClick&#39;, rowData: any, pageNameInChinese: string): void
&amp;#125;&amp;gt;()

const store = useStore()

// 这里是网络请求数据
const getPageData = () =&amp;gt; &amp;#123;
  store.dispatch(`main/getPageListAction`, &amp;#123;
    queryInfo: &amp;#123;
      offset: 0,
      size: 10
    &amp;#125;,
    pageName: props.pageName
  &amp;#125;)
&amp;#125;
// 页面加载时第一次调用获取表单数据
getPageData()
const dataList = computed(() =&amp;gt;
  store.getters[`main/pageListData`](props.pageName)
)

// 1.获取页面中文名称
const pageNameTransform = (pageName: string): string =&amp;gt; &amp;#123;
  switch (pageName) &amp;#123;
    case &#39;users&#39;:
      return &#39;用户&#39;
    default:
      return &#39;&#39;
  &amp;#125;
&amp;#125;
const pageNameInChinese = pageNameTransform(props.pageName)

// 2.属于动态插槽的配置项筛选
const otherPropSlots: any = props.contentTableConfig?.propList.filter(
  (item: any) =&amp;gt; &amp;#123;
    if (item.slotName === &#39;handler&#39;) return false
    return item.slotName
  &amp;#125;
)

// 点击编辑按钮触发事件
const handleEditClick = (row: any) =&amp;gt; &amp;#123;
  emit(&#39;editBtnClick&#39;, row, pageNameInChinese)
&amp;#125;
// 点击删除按钮触发事件
const deleteBtnClick = (row: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了删除按钮，数据为：&#39;, row)
&amp;#125;
// 点击新建用户触发事件
const addUserBtnClick = () =&amp;gt; &amp;#123;
  emit(&#39;createBtnClick&#39;, pageNameInChinese)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.header-default &amp;#123;
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  .title &amp;#123;
    font-size: 22px;
    font-weight: 700;
  &amp;#125;
&amp;#125;
.footer-default &amp;#123;
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153348571.png&#34; alt=&#34;image-20220506153348571&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这时我们已经把独有私有的插槽区分开了，而且编辑和新建的逻辑也在主页面中执行，封装完毕，下面附上完整代码&lt;/p&gt;
&lt;h2 id=&#34;完整封装代码4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完整封装代码4&#34;&gt;#&lt;/a&gt; 完整封装代码④&lt;/h2&gt;
&lt;h3 id=&#34;配置项类型文件-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置项类型文件-2&#34;&gt;#&lt;/a&gt; 配置项类型文件&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ITbaleOption&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  prop&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  minWidth&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  slotName&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  align&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;string&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ITable&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  propList&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; ITbaleOption&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showIndexColumn&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showSelectColumn&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;boolean&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  childrenProps&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; object&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;配置项文件-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置项文件-2&#34;&gt;#&lt;/a&gt; 配置项文件&lt;/h3&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;figcaption data-lang=&#34;typescript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; ITable &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;@/base-ui/table/type&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; contentTableConfig&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; ITable &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 表格配置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  propList&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; align&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;center&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; align&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;center&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;realname&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;真实姓名&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; align&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;center&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;cellphone&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;手机号码&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; align&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;center&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      prop&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;enable&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;状态&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;100&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      slotName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;status&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      align&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;center&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      label&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;操作&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      minWidth&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;120&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      slotName&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;handler&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      align&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;center&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 表格具有序号列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showIndexColumn&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 表格具有可选列&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  showSelectColumn&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;table表单组件文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#table表单组件文件&#34;&gt;#&lt;/a&gt; table 表单组件文件&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;el-table style=&amp;quot;width: 100%&amp;quot; :data=&amp;quot;listData&amp;quot; border&amp;gt;
    &amp;lt;!-- 1.传入showSelectColumn时展示的全选列 --&amp;gt;
    &amp;lt;template v-if=&amp;quot;showSelectColumn&amp;quot;&amp;gt;
      &amp;lt;el-table-column type=&amp;quot;selection&amp;quot; /&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 2.传入showIndexColumn时展示的序号列 --&amp;gt;
    &amp;lt;template v-if=&amp;quot;showIndexColumn&amp;quot;&amp;gt;
      &amp;lt;el-table-column type=&amp;quot;index&amp;quot; label=&amp;quot;序号&amp;quot; /&amp;gt;
    &amp;lt;/template&amp;gt;
    &amp;lt;!-- 3.propList里面的所有列 --&amp;gt;
    &amp;lt;template v-for=&amp;quot;item in propList&amp;quot; :key=&amp;quot;item.prop&amp;quot;&amp;gt;
      &amp;lt;el-table-column v-bind=&amp;quot;item&amp;quot; show-overflow-tooltip&amp;gt;
        &amp;lt;!-- 传有slotName时展示的插槽列 --&amp;gt;
        &amp;lt;template #default=&amp;quot;scope&amp;quot; v-if=&amp;quot;item.slotName&amp;quot;&amp;gt;
          &amp;lt;slot :name=&amp;quot;item.slotName&amp;quot; :row=&amp;quot;scope.row&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
        &amp;lt;/template&amp;gt;
      &amp;lt;/el-table-column&amp;gt;
    &amp;lt;/template&amp;gt;
  &amp;lt;/el-table&amp;gt;
  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt; &amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
import &amp;#123; defineProps, withDefaults, defineEmits &amp;#125; from &#39;vue&#39;
import &amp;#123; ITbaleOption &amp;#125; from &#39;./type&#39;
interface Props &amp;#123;
  listData: any[] //表单数据
  propList: ITbaleOption[] //表单配置项
  showIndexColumn?: boolean //是否显示索引列
  showSelectColumn?: boolean //是否显示全选列
  childrenProps?: object // 是否有子数据，树形数据才用得到
&amp;#125;
const props = withDefaults(defineProps&amp;lt;Props&amp;gt;(), &amp;#123;
  showIndexColumn: false,
  showSelectColumn: false,
  childrenProps: () =&amp;gt; (&amp;#123;&amp;#125;)
&amp;#125;)
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;page-table组件文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#page-table组件文件&#34;&gt;#&lt;/a&gt; page-table 组件文件&lt;/h3&gt;
&lt;h3 id=&#34;user页面组件文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#user页面组件文件&#34;&gt;#&lt;/a&gt; user 页面组件文件&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-vue&#34;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
      &amp;lt;page-table
        :contentTableConfig=&amp;quot;contentTableConfig&amp;quot;
        pageName=&amp;quot;users&amp;quot;
        @editBtnClick=&amp;quot;handleEditClick&amp;quot;
        @createBtnClick=&amp;quot;handleCreateClick&amp;quot;
      &amp;gt;
        &amp;lt;template #status=&amp;quot;scope&amp;quot;&amp;gt;
          &amp;lt;el-button&amp;gt;&amp;#123;&amp;#123; scope.row.status === 0 ? &#39;禁用&#39; : &#39;启用&#39; &amp;#125;&amp;#125;&amp;lt;/el-button&amp;gt;
        &amp;lt;/template&amp;gt;
      &amp;lt;/page-table&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script setup lang=&amp;quot;ts&amp;quot;&amp;gt;
// 导入表单配置项
import &amp;#123; contentTableConfig &amp;#125; from &#39;./config/table-config&#39;
import pageTable from &#39;@/components/page-table/page-table-test.vue&#39;

const handleEditClick = (row: any, pageNameInChinese: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了编辑按钮，数据为：&#39;, row, pageNameInChinese)
&amp;#125;

const handleCreateClick = (pageNameInChinese: any) =&amp;gt; &amp;#123;
  console.log(&#39;点击了新建用户，数据为：&#39;, pageNameInChinese)
&amp;#125;
&amp;lt;/script&amp;gt;

&amp;lt;style scoped lang=&amp;quot;less&amp;quot;&amp;gt;
.content &amp;#123;
  border-top: 20px solid #dedee1;
  padding: 40px;
&amp;#125;
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;结语-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结语-2&#34;&gt;#&lt;/a&gt; 结语&lt;/h1&gt;
&lt;p&gt;刚学会的代码思路与写法，花了一天整理，主要还是自己记录一下，颇有收获，感觉大佬分享使我进步～虽然还是很菜....&lt;/p&gt;
</content>
        <category term="Vue" scheme="https://aaaa8880788.github.io/categories/vue/" />
        <category term="TypeScript" scheme="https://aaaa8880788.github.io/tags/TypeScript/" />
        <category term="Vue3" scheme="https://aaaa8880788.github.io/tags/Vue3/" />
        <category term="Element Plus" scheme="https://aaaa8880788.github.io/tags/Element-Plus/" />
        <updated>2024-03-02T02:52:21.667Z</updated>
    </entry>
</feed>
