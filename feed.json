{
    "version": "https://jsonfeed.org/version/1",
    "title": "键盘敲烂，月薪过万，冲！",
    "subtitle": "",
    "icon": "https://aaaa8880788.github.io/images/favicon.ico",
    "description": "每天进步一点点~",
    "home_page_url": "https://aaaa8880788.github.io",
    "items": [
        {
            "id": "https://aaaa8880788.github.io/bywork-explore/172%E5%8F%B7%E5%8D%A1%E6%B3%A8%E5%86%8C%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/",
            "url": "https://aaaa8880788.github.io/bywork-explore/172%E5%8F%B7%E5%8D%A1%E6%B3%A8%E5%86%8C%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/",
            "title": "172号卡注册及使用流程",
            "date_published": "2024-03-02T02:58:40.610Z",
            "content_html": "<h1 id=\"172号卡注册及使用流程\"><a class=\"anchor\" href=\"#172号卡注册及使用流程\">#</a> 172 号卡注册及使用流程</h1>\n<h2 id=\"副业探索姬卖流量卡起步慢但长期来看月入过万似乎不难\"><a class=\"anchor\" href=\"#副业探索姬卖流量卡起步慢但长期来看月入过万似乎不难\">#</a> 【副业探索姬】卖流量卡，起步慢，但长期来看，月入过万似乎不难</h2>\n<p>很多朋友问在哪里办便宜的流量卡，不如自己做代理商，自己办自己拿佣金。172 分销佣金很高，100 到 200 都有。</p>\n<p>现在的流量卡代理已经不再是之前的物联卡了，且都是正规运营商授权的。你可能会好奇这些正规卡是从哪里来的，这里来简单介绍一下。</p>\n<p>这些卡主要来自于当地省厅运营商，因为当地人口激活数量不足，为了提高当地激活数据，提高当地归属地手机卡的激活量，这些正规运营商会在网上专属渠道推广这些办卡渠道。这些卡都经过运营商的授权和认证，因此是非常安全可靠的。</p>\n<p>现在代理的流量卡都是正规号码卡，它们有 11 位号码，可以打电话和发短信，属于运营商正规的号段手机卡。这些卡都是可以登录中国电信、中国联通、中国移动的 APP。与物联卡不同，这些卡的归属地比较特别，大部分卡的归属地都不是当地，而是在重庆、海南、河南等地。这是因为当地省级部门为了提高当地的 GDP，需要提供当地移动用户的号卡激活率，而运营商号卡的新用户也是属于当地政府的考察指标之一。为了达成这个目标，省级部门和当地运营商联合推出了一些优惠政策卡，例如常见的大王卡，也被称为互联网卡。这些卡早期只能在当地门店办理激活，但随着互联网的发展，宣发渠道逐渐增多，现在可以通过网上办理。流量卡代理就是通过开通后台进行分销，推广流量卡并赚取佣金。</p>\n<p>做流量卡代理是几乎没有门槛的事情，硬件门槛就是你需要一部手机，需要配置的入门级门槛，拥有一个市场营销推广的头脑。</p>\n<h2 id=\"第一步注册成为一级代理\"><a class=\"anchor\" href=\"#第一步注册成为一级代理\">#</a> 第一步。注册成为一级代理</h2>\n<p>注册链接: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYW9rYS5sb3QtbWwuY29tL2xvZ2luLmh0bWw=\">https://haoka.lot-ml.com/login.html</span> 推荐人手机号：15015911600</p>\n<p>账号自己设置，可以是文字也可以是号码，登录是使用账号登录。一定要记得住的就行。 店铺名称不是账号，店铺名字可在店铺内设置并且可以随意更改，不用担心名字不好听。</p>\n<p><strong>平台可以自己发展下级代理，注册和登陆都是这个网站，注册以后请保存好方便登录，只要是填你的推荐人号码注册就是你的代理。</strong></p>\n<p>免费注册，不需要订单量，没有任何要求，一单也结算（平台结算），只要你不虚假宣传。172 号卡平台注册必须实名，不实名无商品。佣金平台结算，完全自由，非常安全！</p>\n<p>因为提现需要验证手机号，要保证注册当前后台的手机号，自己是在用的。</p>\n<p><strong>不想收到上架通知短信，可以在系统管理，短信通知设置关闭。</strong></p>\n<p><img data-src=\"https://yesmore.cc/article/llk/1.JPEG\" alt=\"img\" /></p>\n<h2 id=\"第二步设置店铺\"><a class=\"anchor\" href=\"#第二步设置店铺\">#</a> <strong>第二步。设置店铺</strong></h2>\n<p>点击左侧，系统管理→首页为订单数据→个人中心，可设置店铺名称及佣金提现渠道绑定。</p>\n<p><strong>店铺二维码</strong>保存分享别人办卡就行了。</p>\n<p>或者在商品管理上方点击号卡店铺，会自动复制店铺链接。然后百度草料二维码，将网址放进去可根据自己喜好设计二维码。</p>\n<p><img data-src=\"https://yesmore.cc/article/llk/2.PNG\" alt=\"img\" /></p>\n<p>可单独使用<strong>商品海报</strong>，也可以复制<strong>商品链接</strong>发给顾客办卡。</p>\n<h2 id=\"第三步拉代理注册\"><a class=\"anchor\" href=\"#第三步拉代理注册\">#</a> 第三步。拉代理注册</h2>\n<p>注册链接也是登陆链接，把注册链接发给别人注册时，推荐人手机号填你的号码即可成为你的下级。 如果你的代理没有实名，则他看不见商品，若<strong>没有实名的代理忘记密码</strong>，可以找到该代理后台账户，重置密码。实名以后的可以自己找回密码。</p>\n<p><img data-src=\"https://yesmore.cc/article/llk/3.PNG\" alt=\"img\" /></p>\n<h2 id=\"第四步设置下级佣金\"><a class=\"anchor\" href=\"#第四步设置下级佣金\">#</a> <strong>第四步。设置下级佣金</strong></h2>\n<p>首先你得有一个下级，先打开产品自动分佣设置，然后在商品管理→商品列表最右边批量分佣，例如你的佣金 135，你可以设置 125 给下级。每一个商品需要批量分佣设置一次。后续系统根据你设置的，自动为新注册代理设置，有新上架商品就再给新上架的批量分佣一次。</p>\n<p><img data-src=\"https://yesmore.cc/article/llk/4.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://yesmore.cc/article/llk/5.png\" alt=\"img\" /></p>\n<p>自动上架以后就不需要再管了，但是如果你想单独设置某个人的佣金，可以在代理商列表找到他，重新设置一次，设置一个点一次确定。不受批量影响。</p>\n<p>不推荐按百分比自动设置佣金。</p>\n<p>下面是单独设置佣金的地方：</p>\n<p><img data-src=\"https://yesmore.cc/article/llk/6.png\" alt=\"img\" /></p>\n<p>佣金设置有两点值得注意，那就是设置好以后的代理，是不受后续佣金设置影响的，举例，你给代理甲设置了佣金 100，给乙代理设置 90，甲的佣金不受影响继续 100。<strong>假如你有一千个代理，本来想设置 100，结果不小心设置成了 10，那只有一千个代理挨改。而且以后这张卡自动上架也会一直是 10，所以千万别设置错了。担心自己手残的，可以开启百分比佣金自动上架。</strong></p>\n<p>还有一点就是，已经下架的卡，重新上架以后，以前设置过的代理会自动上，但是下架期间新来的不会上，需要重新设置一遍。</p>\n<h2 id=\"第五步佣金提现\"><a class=\"anchor\" href=\"#第五步佣金提现\">#</a> <strong>第五步。佣金提现</strong></h2>\n<p>172 采用激活先显示佣金的政策，用冻结表示。但不代表冻结金额就是你实际能提现的金额。只是拟发放。如果顾客在次月 25 号开始结算审核时，已经注销卡，或者更改套餐，单停、三无（不用流量，不发短信、不打电话）等则不会结算。换句话说，只要卡不出问题，冻结金额都会发。点击左侧财务管理，可见收入明细，以及提现。</p>\n<p><strong>说人话就是，显示的佣金不一定能全拿到，不显示不代表拿不到，佣金结算是按运营商数据为准，后台数据更新有延迟或者不更新都没事。</strong></p>\n<p><img data-src=\"https://yesmore.cc/article/llk/7.png\" alt=\"img\" /></p>\n<p>点保存以后就不要点什么其他的了，不要去点那什么同意点了没用，直接等着打款，时间一个星期内都正常，超过一个星期也正常。</p>\n<p><strong>重点讲一下单停</strong>：单停代表系统检测到该卡可能存在违规操作，为了避免电信诈骗，单独停用该卡的语音通话（原本就有通话功能的卡）。这种情况下一般会发短信告知，一定要提醒顾客联系 APP 客服，或者根据短信提示操作复机。由于大部分流量卡都是只用来上网，不注意短信的时候很可能没发现自己的号码已经单停，如果能联系顾客，尽量提醒顾客注意短信，且不要频繁更换手机，一旦单停及时解除，前期卡容易单停，涉及佣金结算，一定要注意。结算佣金以后就不用管了。</p>\n<p><strong>有的卡不考核单停除外</strong></p>\n<blockquote>\n<p><strong>最后悄咪咪的小提示，自己实名开的代理店铺，也可以自己下单一张流量卡，也会有佣金哦</strong>。</p>\n</blockquote>\n",
            "tags": [
                "bywork-explore",
                "bywork-explore"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/",
            "url": "https://aaaa8880788.github.io/web-interview/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/",
            "title": "2022最新前端手撕代码",
            "date_published": "2024-03-02T02:52:21.689Z",
            "content_html": "<h1 id=\"前端面试之手撕代码\"><a class=\"anchor\" href=\"#前端面试之手撕代码\">#</a> 前端面试之手撕代码</h1>\n<h2 id=\"1防抖函数\"><a class=\"anchor\" href=\"#1防抖函数\">#</a> 1. 防抖函数</h2>\n<p>防抖原理：事件触发后，会在规定时间后执行，若在规定时间内再次触发，则刷新时间重新计时，直到事件执行成功</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span>delay</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">funtion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        timer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">clearTimeOut</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      \ttimer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    timer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2节流函数\"><a class=\"anchor\" href=\"#2节流函数\">#</a> 2. 节流函数</h2>\n<p>节流原理：在规定事件内事件只能被触发一次</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span>delay<span class=\"token operator\">=</span><span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> lastTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">funtion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">const</span> nowTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nowTime<span class=\"token operator\">-</span>lastTime <span class=\"token operator\">></span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            lastTime <span class=\"token operator\">=</span> nowTime</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">let</span> lastTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> nowTime <span class=\"token operator\">=</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nowTime <span class=\"token operator\">-</span> lastTime <span class=\"token operator\">></span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3数组扁平化\"><a class=\"anchor\" href=\"#3数组扁平化\">#</a> 3. 数组扁平化</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组扁平化测试</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 输出 [1,2,3,4,5,6,7]</span></pre></td></tr></table></figure>",
            "tags": [
                "前端面试",
                "前端面试"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://aaaa8880788.github.io/web-interview/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "2022最新前端八股文汇总",
            "date_published": "2024-03-02T02:52:21.681Z",
            "content_html": "<h1 id=\"2022年最新前端面试题\"><a class=\"anchor\" href=\"#2022年最新前端面试题\">#</a> 2022 年最新前端面试题</h1>\n<h2 id=\"html-css\"><a class=\"anchor\" href=\"#html-css\">#</a> HTML &amp;&amp; CSS</h2>\n<h3 id=\"html5-新特性-语义化\"><a class=\"anchor\" href=\"#html5-新特性-语义化\">#</a> HTML5 新特性、语义化</h3>\n<ol>\n<li>\n<p><strong>概念</strong>：</p>\n<p>HTML5 的语义化指的是 <code>合理正确的使用语义化的标签来创建页面结构</code> 。【正确的标签做正确的事】</p>\n</li>\n<li>\n<p><strong>语义化标签</strong>：</p>\n<p>header nav main article section aside footer</p>\n</li>\n<li>\n<p><strong>语义化的优点</strong>:</p>\n<ul>\n<li>在 <code>没CSS样式的情况下，页面整体也会呈现很好的结构效果</code></li>\n<li><code>代码结构清晰</code> ，易于阅读，</li>\n<li><code>利于开发和维护</code>  方便其他设备解析（如屏幕阅读器）根据语义渲染网页。</li>\n<li><code>有利于搜索引擎优化（SEO）</code> ，搜索引擎爬虫会根据不同的标签来赋予不同的权重</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"html5新特性有哪些\"><a class=\"anchor\" href=\"#html5新特性有哪些\">#</a> HTML5 新特性有哪些</h3>\n<ul>\n<li>语义化标签</li>\n<li>音视频处理 API (audio,video)</li>\n<li>canvas / webGL</li>\n<li>拖拽释放 (Drag and drop) API</li>\n<li>history API</li>\n<li>requestAnimationFrame</li>\n<li>地理位置 (Geolocation) API</li>\n<li>webSocket</li>\n<li>web 存储 localStorage、SessionStorage</li>\n<li>表单控件，calendar、date、time、email、url、search</li>\n</ul>\n<h3 id=\"css-选择器及优先级\"><a class=\"anchor\" href=\"#css-选择器及优先级\">#</a> CSS 选择器及优先级</h3>\n<p><strong>选择器</strong></p>\n<ul>\n<li>id 选择器 (#myid)</li>\n<li>类选择器 (.myclass)</li>\n<li>属性选择器 (a [rel=&quot;external&quot;])</li>\n<li>伪类选择器 (a:hover, li:nth-child)</li>\n<li>标签选择器 (div, h1,p)</li>\n<li>相邻选择器（h1 + p）</li>\n<li>子选择器 (ul&gt; li)</li>\n<li>后代选择器 (li a)</li>\n<li>通配符选择器 (*)</li>\n</ul>\n<p><strong>优先级：</strong></p>\n<ul>\n<li><code>!important</code></li>\n<li>内联样式（1000）</li>\n<li>ID 选择器（0100）</li>\n<li>类选择器 / 属性选择器 / 伪类选择器（0010）</li>\n<li>元素选择器 / 伪元素选择器（0001）</li>\n<li>关系选择器 / 通配符选择器（0000）</li>\n</ul>\n<p>带！important 标记的样式属性优先级最高； 样式表的来源相同时：<br />\n <code>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p>\n<h3 id=\"渐进增强与优雅降级的理解及区别\"><a class=\"anchor\" href=\"#渐进增强与优雅降级的理解及区别\">#</a> 渐进增强与优雅降级的理解及区别</h3>\n<p><strong>渐进增强（Progressive Enhancement）：</strong><br />\n一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p>\n<p><strong>优雅降级（Graceful Degradation）：</strong><br />\n一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。<br />\n<strong>两者区别</strong><br />\n 1、广义：<br />\n其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级<br />\n 2、狭义：<br />\n渐进增强一般说的是使用 CSS3 技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现 html 标签的语义，以便在 js/css 的加载失败 / 被禁用时，也不影响用户的相应功能。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 例子 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.transition</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 渐进增强写法 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.transition</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 优雅降级写法 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"常见的兼容性问题\"><a class=\"anchor\" href=\"#常见的兼容性问题\">#</a> 常见的兼容性问题</h3>\n<ol>\n<li margin:0;padding:0;=\"\">\n<p>不同浏览器的标签默认的 margin 和 padding 不一样。*</p>\n</li>\n<li>\n<p>IE6 双边距 bug：块属性标签 float 后，又有横行的 margin 情况下，在 IE6 显示 margin 比设置的大。hack：display:inline; 将其转化为行内属性。</p>\n</li>\n<li>\n<p>设置较小高度标签（一般小于 10px），在 IE6，IE7 中高度超出自己设置高度。hack：给超出高度的标签设置 overflow:hidden; 或者设置行高 line-height 小于你设置的高度。</p>\n</li>\n<li>\n<p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示，可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</p>\n</li>\n<li>\n<p>超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不再具有 hover 和 active 了。解决方法是改变 CSS 属性的排列顺序：L-V-H-A (love hate): a:link {} a:visited {} a:hover {} a:active {}</p>\n</li>\n</ol>\n<h3 id=\"css3新特性\"><a class=\"anchor\" href=\"#css3新特性\">#</a> CSS3 新特性</h3>\n<ul>\n<li>过渡</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 所有属性从原始值到制定值的一个过渡，运动曲线 ease, 运动时间 0.5 秒 */</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>transition：all<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span>5s</pre></td></tr></table></figure><ul>\n<li>动画</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//animation：动画名称，一个周期花费时间，运动曲线（默认 ease），动画延迟（默认 0），播放次数（默认 1），是否反向播放动画（默认 normal），是否暂停动画（默认 running）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 执行一次 logo2-line 动画，运动时间 2 秒，运动曲线为 linear*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">animation</span><span class=\"token operator\">:</span> logo2<span class=\"token operator\">-</span>line 2s linear<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>形状转换</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//transform: 适用于 2D 或 3D 转换的元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//transform-origin：转换元素的位置（围绕那个点进行转换）。默认 (x,y,z)：(50%,50%,0)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>30px<span class=\"token punctuation\">,</span>30px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>选择器:nth-of-type ()</p>\n</li>\n<li>\n<p>阴影<br />\n文字阴影: text-shadow: 2px 2px 2px #000;(水平阴影，垂直阴影，模糊距离，阴影颜色) 盒子阴影: box-shadow: 10px 10px 5px #999</p>\n</li>\n<li>\n<p>边框 border-image: url (border.png);</p>\n</li>\n<li>\n<p>背景</p>\n</li>\n<li>\n<p>文字</p>\n</li>\n<li>\n<p>渐变</p>\n</li>\n<li>\n<p>Filter（滤镜）</p>\n</li>\n<li>\n<p>弹性布局、栅格布局、多列布局</p>\n</li>\n<li>\n<p>媒体查询</p>\n</li>\n</ul>\n<h3 id=\"position-属性的值有哪些及其区别\"><a class=\"anchor\" href=\"#position-属性的值有哪些及其区别\">#</a> position 属性的值有哪些及其区别</h3>\n<p><strong>固定定位 fixed</strong>： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。</p>\n<p><strong>相对定位 relative</strong>： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素 “相对于” 它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</p>\n<p><strong>绝对定位 absolute</strong>： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于 body。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。</p>\n<p><strong>粘性定位 sticky</strong>： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。</p>\n<p><strong>默认定位 Static</strong>： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。</p>\n<h3 id=\"box-sizing属性\"><a class=\"anchor\" href=\"#box-sizing属性\">#</a> box-sizing 属性</h3>\n<p>box-sizing 规定两个并排的带边框的框，语法为 box-sizing：content-box/border-box/inherit</p>\n<p><strong>content-box</strong>：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。【标准盒子模型】</p>\n<p><strong>border-box</strong>：为元素设定的宽度和高度决定了元素的边框盒。【IE 盒子模型】</p>\n<p><strong>inherit</strong>：继承父元素的 box-sizing 值。</p>\n<h3 id=\"css-盒子模型\"><a class=\"anchor\" href=\"#css-盒子模型\">#</a> CSS 盒子模型</h3>\n<p>CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。<br />\n在标准的盒子模型中， <code>width 指 content 部分的宽度</code> 。<br />\n在 IE 盒子模型中， <code>width 表示 content+padding+border 这三个部分的宽度</code> 。</p>\n<p>故在计算盒子的宽度时存在差异：</p>\n<p><strong>标准盒模型：</strong> 一个块的总宽度 = width+margin (左右)+padding (左右)+border (左右)</p>\n<p><strong>怪异盒模型：</strong> 一个块的总宽度 = width+margin（左右）（既 width 已经包含了 padding 和 border 值）</p>\n<h3 id=\"bfc块级格式上下文\"><a class=\"anchor\" href=\"#bfc块级格式上下文\">#</a> BFC（块级格式上下文）</h3>\n<p><strong>BFC 的概念</strong></p>\n<p><code>BFC</code>  是  <code>Block Formatting Context </code> 的缩写，即块级格式化上下文。 <code>BFC</code>  是 CSS 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。</p>\n<p><strong>BFC 的原理布局规则</strong></p>\n<ul>\n<li>内部的 Box 会在 <code>垂直方向</code> ，一个接一个地放置 *</li>\n<li>Box <code>垂直方向的距离由margin决定</code> 。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 *</li>\n<li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触 (对于从左往右的格式化，否则相反</li>\n<li>BFC 的区域 <code>不会与float box重叠</code>  *</li>\n<li>BFC 是一个独立容器，容器里面的 <code>子元素不会影响到外面的元素</code>  *</li>\n<li>计算 BFC 的高度时， <code>浮动元素也参与计算高度</code>  *</li>\n<li>元素的类型和 <code>display属性，决定了这个Box的类型</code> 。不同类型的 Box 会参与不同的 <code>Formatting Context</code> 。</li>\n</ul>\n<p><strong>如何创建 BFC？</strong></p>\n<ul>\n<li>根元素，即 HTML 元素</li>\n<li>float 的值不为 none</li>\n<li>position 为 absolute 或 fixed*</li>\n<li>display 的值为 inline-block、table-cell、table-caption*</li>\n<li>overflow 的值不为 visible*</li>\n</ul>\n<p><strong>BFC 的使用场景</strong></p>\n<ul>\n<li>去除边距重叠现象 *</li>\n<li>清除浮动（让父元素的高度包含子浮动元素）*</li>\n<li>避免某元素被浮动元素覆盖</li>\n<li>避免多列布局由于宽度计算四舍五入而自动换行</li>\n</ul>\n<h3 id=\"让一个元素水平垂直居中\"><a class=\"anchor\" href=\"#让一个元素水平垂直居中\">#</a> 让一个元素水平垂直居中</h3>\n<ul>\n<li>\n<p><strong>水平居中</strong></p>\n<ul>\n<li>\n<p>对于 行内元素 :  <code>text-align: center</code> ;</p>\n</li>\n<li>\n<p>对于确定宽度的块级元素：</p>\n<p>（1）width 和 margin 实现。 <code>margin: 0 auto</code> ;</p>\n<p>（2）绝对定位和 margin-left: margin-left: (父 width - 子 width）/2, 前提是父元素 position: relative</p>\n</li>\n<li>\n<p>对于宽度未知的块级元素</p>\n<p>（1） <code>table标签配合margin左右auto实现水平居中</code> 。使用 table 标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右 margin 为 auto。</p>\n<p>（2）inline-block 实现水平居中方法。display：inline-block 和 text-align:center 实现水平居中。</p>\n<p>（3） <code>绝对定位+transform</code> ，translateX 可以移动本身元素的 50%。</p>\n<p>（4）flex 布局使用 <code>justify-content:center</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>垂直居中</strong></p>\n<ol>\n<li>利用  <code>line-height</code>  实现居中，这种方法适合纯文字类</li>\n<li>通过设置父容器 相对定位 ，子级设置  <code>绝对定位</code> ，标签通过 margin 实现自适应居中</li>\n<li>弹性布局 flex : 父级设置 display: flex; 子级设置 margin 为 auto 实现自适应居中</li>\n<li>父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现</li>\n<li><code>table 布局</code> ，父级通过转换成表格形式， <code>然后子级设置 vertical-align 实现</code> 。（需要注意的是：vertical-align: middle 使用的前提条件是内联元素以及 display 值为 table-cell 的元素）。</li>\n</ol>\n</li>\n</ul>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA4MzQ4NTI0NTMwMTA2Mzgx\"># 图解 CSS 水平垂直居中常见面试方法</span></p>\n<h3 id=\"隐藏页面中某个元素的方法\"><a class=\"anchor\" href=\"#隐藏页面中某个元素的方法\">#</a> 隐藏页面中某个元素的方法</h3>\n<p>1. <code>opacity：0</code> ，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如 click 事件，那么点击该区域，也能触发点击事件的</p>\n<p>2. <code>visibility：hidden</code> ，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p>\n<p>3. <code>display：none</code> ，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流 + 重绘）</p>\n<blockquote>\n<p>该问题会引出 回流和重绘</p>\n</blockquote>\n<h3 id=\"用css实现三角符号\"><a class=\"anchor\" href=\"#用css实现三角符号\">#</a> 用 CSS 实现三角符号</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 记忆口诀：盒子宽高均为零，三面边框皆透明。 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">div:after</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 100px solid #ff0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"页面布局\"><a class=\"anchor\" href=\"#页面布局\">#</a> 页面布局</h3>\n<h4 id=\"1flex-布局\"><a class=\"anchor\" href=\"#1flex-布局\">#</a> 1.Flex 布局</h4>\n<p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>Flex 是 Flexible Box 的缩写，意为 &quot;弹性布局&quot;, 用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。</p>\n<p>容器的属性：</p>\n<ul>\n<li>flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;</li>\n<li>flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;</li>\n<li flex-flow:=\"\" ||=\"\" ;=\"\">flex-flow： .box</li>\n<li>justify-content：对其方式，水平主轴对齐方式</li>\n<li>align-items：对齐方式，竖直轴线方向</li>\n<li>align-content</li>\n</ul>\n<p>项目的属性（元素的属性）：</p>\n<ul>\n<li>order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0</li>\n<li>flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大</li>\n<li>*flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小</li>\n<li>flex-basis 属性：定义了在分配多余的空间，项目占据的空间。</li>\n<li>*flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</li>\n<li>align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖</li>\n<li>align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局</li>\n</ul>\n<h4 id=\"2rem-布局\"><a class=\"anchor\" href=\"#2rem-布局\">#</a> 2.Rem 布局</h4>\n<p>首先 Rem 相对于根 (html) 的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;, 那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。</p>\n<p><strong>优点</strong>：可以快速适用移动端布局，字体，图片高度</p>\n<p><strong>缺点</strong>：</p>\n<p>①目前 ie 不支持，对 pc 页面来讲使用次数不多；<br />\n②数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；<br />\n③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。</p>\n<h4 id=\"3百分比布局\"><a class=\"anchor\" href=\"#3百分比布局\">#</a> 3. 百分比布局</h4>\n<p>通过百分比单位 &quot;%&quot; 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。</p>\n<p><strong>缺点</strong>：</p>\n<p>（1）计算困难<br />\n（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。</p>\n<h4 id=\"4浮动布局\"><a class=\"anchor\" href=\"#4浮动布局\">#</a> 4. 浮动布局</h4>\n<p>浮动布局：当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。</p>\n<p><strong>优点</strong></p>\n<p>这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与 inline-block 还是有一些区别的，第一个就是关于横向排序的时候，float 可以设置方向而 inline-block 方向是固定的；还有一个就是 inline-block 在使用时有时会有空白间隙的问题</p>\n<p><strong>缺点</strong></p>\n<p>最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素， <code>会造成父级元素高度塌陷</code> 。</p>\n<h3 id=\"如何使用rem或viewport进行移动端适配\"><a class=\"anchor\" href=\"#如何使用rem或viewport进行移动端适配\">#</a> 如何使用 rem 或 viewport 进行移动端适配</h3>\n<p><strong>rem 适配原理：</strong></p>\n<p>改变了一个元素在不同设备上占据的 css 像素的个数</p>\n<p>rem 适配的优缺点</p>\n<ul>\n<li>优点：没有破坏完美视口</li>\n<li>缺点：px 值转换 rem 太过于复杂 (下面我们使用 less 来解决这个问题)</li>\n</ul>\n<p><strong>viewport 适配的原理</strong></p>\n<p>viewport 适配方案中，每一个元素在不同设备上占据的 css 像素的个数是一样的。但是 css 像素和物理像素的比例是不一样的，等比的</p>\n<p>viewport 适配的优缺点</p>\n<ul>\n<li>在我们设计图上所量取的大小即为我们可以设置的像素大小，即所量即所设</li>\n<li>缺点破坏完美视口</li>\n</ul>\n<h3 id=\"清除浮动的方式\"><a class=\"anchor\" href=\"#清除浮动的方式\">#</a> 清除浮动的方式</h3>\n<ul>\n<li>添加额外标签</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    //添加额外标签并且添加clear属性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    //也可以加一个br标签</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>父级添加 overflow 属性，或者设置高度</li>\n<li>建立伪类选择器清除浮动</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 css 中添加:after 伪元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">:</span>after<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 设置添加子元素的内容是空 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/* 设置添加子元素为块级元素 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/* 设置添加的子元素的高度 0 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/* 设置添加子元素看不见 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/* 设置 clear：both */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">clear</span><span class=\"token operator\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"css预处理器sass-less-stylus的区别\"><a class=\"anchor\" href=\"#css预处理器sass-less-stylus的区别\">#</a> CSS 预处理器 Sass、Less、Stylus 的区别</h3>\n<p>什么事 CSS 预处理器？</p>\n<p>CSS 预处理器是一种语言用来为 CSS 增加一些变成的特性，无需考虑浏览器兼容问题，例如你可以在 CSS 中使用变量，简单的程序逻辑、函数等在编程语言中的一些基本技巧，可以让 CSS 更加简洁，适应性更强，代码更直观等诸多好处<br />\n基本语法区别</p>\n<p>Sass 是以.sass 为扩展名，Less 是以.less 为扩展名，Stylus 是以.styl 为扩展名<br />\n变量的区别</p>\n<p>Sass 变量必须是以 <code>$</code>  开头的，然后变量和值之间使用冒号（：）隔开，和 css 属性是一样的。<br />\nLess 变量是以 <code>@</code> 开头的，其余 sass 都是一样的。<br />\nStylus 对变量是没有任何设定的，可以是以 $ 开头或者任意字符，而且变量之间可以冒号，空格隔开，但是在 stylus 中不能用 @开头<br />\n三种预处理器都有：嵌套、运算符、颜色函数、导入、继承、混入。Stylus 还有一些高级特性。例如循环、判断等</p>\n<h2 id=\"javascript篇\"><a class=\"anchor\" href=\"#javascript篇\">#</a> JavaScript 篇</h2>\n<h3 id=\"1js的数据类型关于数据类型相关的\"><a class=\"anchor\" href=\"#1js的数据类型关于数据类型相关的\">#</a> 1.js 的数据类型（关于数据类型相关的）</h3>\n<h4 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> <strong>基本数据类型</strong></h4>\n<blockquote>\n<p>ES5 的 5 种：<em><strong>*Null，undefined，Boolean，Number，String， ES6 新增：Symbol 表示独一无二的值 ES10 新增：BigInt 表示任意大的整数 *</strong></em></p>\n</blockquote>\n<p><strong>一种引用数据类型</strong>：（本质上是由一组无序的键值对组成）</p>\n<blockquote>\n<p><strong>引用数据类型</strong>: <strong>Object</strong>。包含 Object、Array、 function、Date、RegExp。 JavaScript 不支持创建任何自定义类型的数据，也就是说 JavaScript 中所有值的类型都是上面 8 中之一。</p>\n</blockquote>\n<h4 id=\"null-和-undefined-的区别\"><a class=\"anchor\" href=\"#null-和-undefined-的区别\">#</a> null 和 undefined 的区别？</h4>\n<blockquote>\n<p>相同：</p>\n<p>在 if 语句中 null 和 undefined 都会转为 false 两者用相等运算符比较也是相等</p>\n<p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</p>\n<p>不同：</p>\n<p>undefined 代表的含义是未定义，</p>\n<p>定义了形参，没有传实参，显示 undefined</p>\n<p>一般变量声明了但还没有定义的时候会返回 undefined</p>\n<p>对象属性名不存在时，显示 undefined</p>\n<p>函数没有写返回值，即没有写 return，拿到的是 undefined</p>\n<p>null 代表的含义是空对象。也作为对象原型链的终点</p>\n<p>null 主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>\n</blockquote>\n<h4 id=\"es10新增bigint-表示任意大的整数\"><a class=\"anchor\" href=\"#es10新增bigint-表示任意大的整数\">#</a> ES10 新增：BigInt 表示任意大的整数</h4>\n<blockquote>\n<p>BigInt 数据类型的目的是比 Number 数据类型支持的范围更大的整数值。在对大整数执行数学运算时，以任意精度表示整数的能力尤为重要。使用 BigInt，整数溢出将不再是问题。</p>\n<p>此外，可以安全地使用更加准确时间戳，大整数 ID 等，而无需使用变通方法。 BigInt 目前是第 3 阶段提案， 一旦添加到规范中，它就是 JS 第二个数字数据类型，也将是 JS 第 8 种基本数据类型：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">要创建BigInt，只需在整数的末尾追加n即可。比较</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740995n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// → 9007199254740995n</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9007199254740995</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// → 9007199254740996</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">或者，可以调用BigInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>构造函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9007199254740995\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// → 9007199254740995n</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 注意最后一位的数字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9007199254740992</span> <span class=\"token operator\">===</span> <span class=\"token number\">9007199254740993</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// → true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999999999999999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// → 10000000000000000</span></pre></td></tr></table></figure><h4 id=\"数据类型存储以及堆栈内存是什么\"><a class=\"anchor\" href=\"#数据类型存储以及堆栈内存是什么\">#</a> 数据类型存储以及堆栈内存是什么</h4>\n<blockquote>\n<p>基本数据类型：直接存储在栈内存中，占据空间小，大小固定，属于被频繁使用的数据。指的是保存在栈内存中的简单数据段；number string 布尔</p>\n<p>引用数据类型：同时存储在栈内存与堆内存中，占据空间大，大小不固定。</p>\n<p>引用数据：类型将指针存在栈中，将值存在堆中。 当我们把对象值赋值给另外一个变量时，复制的是对象的指针，指向同一块内存地址，意思是，变量中保存的实际上只是一个指针，这个指针指向内存堆中实际的值，数组 对象</p>\n</blockquote>\n<h4 id=\"堆heap和栈stack有什么区别存储机制\"><a class=\"anchor\" href=\"#堆heap和栈stack有什么区别存储机制\">#</a> 堆 (<strong>heap</strong>) 和栈 (<strong>stack</strong>) 有什么区别存储机制</h4>\n<blockquote>\n<p>栈： 是一种连续储存的数据结构，具有先进后出后进先出的性质。</p>\n<p>通常的操作有入栈（压栈），出栈和栈顶元素。想要读取栈中的某个元素，就是将其之间的所有元素出栈才能完成。</p>\n<p>堆：  是一种非连续的树形储存数据结构，具有队列优先，先进先出； 每个节点有一个值，整棵树是经过排序的。特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。常用来实现优先队列，存取随意。</p>\n</blockquote>\n<h3 id=\"2js数据类型判断条件分支\"><a class=\"anchor\" href=\"#2js数据类型判断条件分支\">#</a> 2.js 数据类型判断，条件分支</h3>\n<h4 id=\"if语句和逻辑运算\"><a class=\"anchor\" href=\"#if语句和逻辑运算\">#</a> <strong>if 语句和逻辑运算</strong></h4>\n<blockquote>\n<p>所有基本类型中<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1Cb29sZWFuJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\"> Boolean</span> 值是 false 的只有 6 个，分别是 : 0 NaN ' ' null undefined false 引用类型 Boolean 值全是 true.</p>\n<p>if 条件是单个值时，如果是 truly 值，条件成立， 如果是 falsely 值，条件不成立</p>\n</blockquote>\n<h4 id=\"逻辑运算符以及他们的运算规则\"><a class=\"anchor\" href=\"#逻辑运算符以及他们的运算规则\">#</a> 逻辑运算符以及他们的运算规则？</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span> 逻辑与    两边都是<span class=\"token boolean\">true</span>，才返回<span class=\"token boolean\">true</span>，否则返回<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">||</span> 逻辑或    两边只要有一个是<span class=\"token boolean\">true</span>，就返回<span class=\"token boolean\">true</span>，否则返回<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ！ 逻辑非   用来取一个布尔值相反的值</pre></td></tr></table></figure><h4 id=\"js中的数据类型检测方案\"><a class=\"anchor\" href=\"#js中的数据类型检测方案\">#</a> JS 中的数据类型检测方案</h4>\n<h5 id=\"1typeof\"><a class=\"anchor\" href=\"#1typeof\">#</a> 1.typeof</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'mc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Symbol<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>优点：能够快速区分基本数据类型</p>\n<p>缺点：不能将 Object、Array 和 Null 区分，都返回 object</p>\n<h5 id=\"2instanceof\"><a class=\"anchor\" href=\"#2instanceof\">#</a> 2.instanceof</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>优点：能够区分 Array、Object 和 Function，适合用于判断自定义的类实例对象</p>\n<p>缺点：Number，Boolean，String 基本数据类型不能判断</p>\n<h5 id=\"3objectprototypetostringcall\"><a class=\"anchor\" href=\"#3objectprototypetostringcall\">#</a> 3.Object.prototype.toString.call()</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//[object Number]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//[object Boolean]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//[object String]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//[object Array]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//[object Object]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[object Function]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[object Undefined]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[object Null]</span></pre></td></tr></table></figure><p>优点：精准判断数据类型</p>\n<p>缺点：写法繁琐不容易记，推荐进行封装后使用</p>\n<h5 id=\"instanceof-的作用\"><a class=\"anchor\" href=\"#instanceof-的作用\">#</a> instanceof 的作用</h5>\n<p>用于判断一个引用类型是否属于某构造函数；</p>\n<p>还可以在继承关系中用来判断一个实例是否属于它的父类型。</p>\n<h5 id=\"instanceof-和-typeof-的区别\"><a class=\"anchor\" href=\"#instanceof-和-typeof-的区别\">#</a> instanceof 和 typeof 的区别：</h5>\n<p>typeof 在对值类型 number、string、boolean 、null 、 undefined、 以及引用类型的 function 的反应是精准的；但是，对于对象 {} 、数组 [] 、null 都会返回 object</p>\n<p>为了弥补这一点，instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型。</p>\n<h4 id=\"js数据类型转换\"><a class=\"anchor\" href=\"#js数据类型转换\">#</a> js 数据类型转换</h4>\n<blockquote>\n<p>在 JavaScript 中类型转换有三种情况：</p>\n<p>转换为数字（调用 Number (),parseInt (),parseFloat () 方法）</p>\n<p>转换为字符串（调用.toString () 或 String () 方法）</p>\n<p>转换为布尔值（调用 Boolean () 方法） 还有隐式转换 注意：null、undefined 没有.toString 方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>转换为数字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：可以把任意值转换成数字，如果要转换的字符串中有不是数字的值，则会返回<span class=\"token number\">NaN</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123s'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span>radix<span class=\"token punctuation\">)</span>：解析一个字符串并返回指定基数的十进制整数，radix是<span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">36</span>之间的整数，表示被解析字符串的基数。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2，第二个参数表示这个字符串是 10 进制的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// NaN\t第二个参数表示这个字符串是 2 进制的</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a123'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// NaN  如果第一个字符不是数字或者符号就返回 NaN</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123a'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>：解析一个参数并返回一个浮点数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123a'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//123</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123a.01'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//123</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123.01'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//123.01</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123.01.1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//123.01</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>隐式转换</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> str <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token comment\">//122</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>str<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token comment\">// '1231'</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">+</span>str<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token comment\">// 124</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>转换为字符串</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  ⚠️注意：<span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span>不能调用</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//'123'</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//''</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token boolean\">true</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//'true'</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 都能转</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//'123'</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//'true'</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//''</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">//'null'</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">//'undefined'</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">//'[object Object]'</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>隐式转换：当<span class=\"token operator\">+</span>两边有一个是字符串，另一个是其它类型时，会先把其它类型转换为字符串再进行字符串拼接，返回字符串</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>a<span class=\"token operator\">+</span><span class=\"token string\">''</span> <span class=\"token comment\">// '1'</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>转换为布尔值</pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">(</span>空字符串<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span>会转成<span class=\"token boolean\">false</span>，其它都是<span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>条件语句</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">let</span> a</pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">//...   // 这里 a 为 undefined，会转为 false，所以该条件语句内部不会执行</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>隐式转换 <span class=\"token operator\">!</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'111'</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>str<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre> </pre></td></tr><tr><td data-num=\"89\"></td><td><pre> </pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>和<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>的valueOf和toString的返回结果？</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>valueOf：返回指定对象的原始值</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>对象                  返回值 </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>Array               返回数组对象本身。</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>Boolean             布尔值。</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>Date                存储的时间是从 <span class=\"token number\">1970</span> 年 <span class=\"token number\">1</span> 月 <span class=\"token number\">1</span> 日午夜开始计的毫秒数 <span class=\"token constant\">UTC</span>。</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Function            函数本身。</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>Number              数字值。</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Object              对象本身。这是默认情况。</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>String              字符串值。</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    Math 和 Error 对象没有 valueOf 方法。</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token function\">toString：返回一个表示对象的字符串。默认情况下，toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，</pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 返回 <span class=\"token string\">\"[object type]\"</span>，其中 type 是对象的类型。</pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token function\">​</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//&#123;&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//'[object Object]'</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//[]</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//''</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>​</pre></td></tr></table></figure><h4 id=\"数据类型相比较objected-is-和\"><a class=\"anchor\" href=\"#数据类型相比较objected-is-和\">#</a> 数据类型相比较 objected .is <mark>和</mark> =</h4>\n<blockquote>\n<p>=== 属于严格判断，直接判断两者类型是否相同，如果两边的类型不一致时，不会做强制类型准换，不同则返回 false 如果相同再比较大小，不会进行任何隐式转换对于引用类型来说，比较的都是引用内存地址，所以 === 这种方式的比较，除非两者存储的内存地址相同才相等，反之 false</p>\n<p>== 二等表示值相等。判断操作符两边对象或值是否相等类型可以不同，如果两边的类型不一致，则会进行强制类型转化后再进行比较，使用 Number () 转换成 Number 类型在进行判断。例外规则，null==undefined，null/undefined 进行运算时不进行隐式类型转换。通常把值转为 Boolean 值，进行条件判断。Boolean (null)=<mark>Boolean(undefined)&gt;false</mark>=false 结果为 true</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> () 在 === 基础上特别处理了 NaN,-0,+0, 保证 - 0 与 + 0 不相等，但 NaN 与 NaN 相等</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">==</span>操作符的强制类型转换规则</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">null</span> 和 <span class=\"token keyword\">undefined</span> 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>如果一个操作值为 <span class=\"token number\">NaN</span> ，则相等比较返回 <span class=\"token boolean\">false</span>（ <span class=\"token number\">NaN</span> 本身也不等于 <span class=\"token number\">NaN</span> ）。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回<span class=\"token boolean\">true</span>，否则，返回 <span class=\"token boolean\">false</span>。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">'1'</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">'1'</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">+</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">+</span><span class=\"token number\">0</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">0</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//true</span></pre></td></tr></table></figure><h4 id=\"typeof-null-的结果是什么为什么\"><a class=\"anchor\" href=\"#typeof-null-的结果是什么为什么\">#</a> typeof null 的结果是什么，为什么？</h4>\n<blockquote>\n<p>typeof null 的结果是 Object。</p>\n<p><strong>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签 (1-3 bits)</strong> 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">000</span><span class=\"token operator\">:</span> object   <span class=\"token operator\">-</span> 当前存储的数据指向一个对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token number\">1</span><span class=\"token operator\">:</span> int      <span class=\"token operator\">-</span> 当前存储的数据是一个 <span class=\"token number\">31</span> 位的有符号整数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">010</span><span class=\"token operator\">:</span> double   <span class=\"token operator\">-</span> 当前存储的数据指向一个双精度的浮点数。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">100</span><span class=\"token operator\">:</span> string   <span class=\"token operator\">-</span> 当前存储的数据指向一个字符串。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">110</span><span class=\"token operator\">:</span> boolean  <span class=\"token operator\">-</span> 当前存储的数据是布尔值。</pre></td></tr></table></figure><blockquote>\n<p>有两种特殊数据类型：</p>\n<ul>\n<li>undefined 的值是 (-2) 30 (一个超出整数范围的数字)；</li>\n<li>null 的值是机器码 NULL 指针 (null 指针的值全是 0)</li>\n</ul>\n<p>那也就是说 null 的类型标签也是 000，和 Object 的类型标签一样，所以会被判定为 Object。</p>\n</blockquote>\n<h3 id=\"3事件的故事\"><a class=\"anchor\" href=\"#3事件的故事\">#</a> 3. 事件的故事</h3>\n<h4 id=\"什么是事件\"><a class=\"anchor\" href=\"#什么是事件\">#</a> <strong>什么是事件？</strong></h4>\n<blockquote>\n<p>事件是文档和浏览器窗口中发生的特定的交互瞬间，事件就发生了。</p>\n<p>一是直接在标签内直接添加执行语句，</p>\n<p>二是定义执行函数。</p>\n<p>addeventlistener 监听事件</p>\n<p>事件类型分两种：事件捕获、事件冒泡。</p>\n<p>事件捕获就是：网景公司提出的事件流叫事件捕获流，由外往内，从事件发生的顶点开始，逐级往下查找，一直到目标元素。</p>\n<p>事件冒泡：IE 提出的事件流叫做事件冒泡就是由内往外，从具体的目标节点元素触发，逐级向上传递，直到根节点。</p>\n<p>什么是事件流？</p>\n<p>事件流就是，页面接受事件的先后顺序就形成了事件流。</p>\n<p>自定义事件</p>\n<p>自定义事件，就是自己定义事件类型，自己定义事件处理函数。</p>\n</blockquote>\n<h4 id=\"事件委托\"><a class=\"anchor\" href=\"#事件委托\">#</a> 事件委托</h4>\n<blockquote>\n<p>事件委托，又名事件代理。事件委托就是利用事件冒泡，就是把子元素的事件都绑定到父元素上。如果子元素阻止了事件冒泡，那么委托也就没法实现了</p>\n<p>阻止事件冒泡</p>\n<p>event.stopPropagation () 修饰符</p>\n<p>addEventListener (‘click', 函数名，true/false) 默认值为 false（即 使用事件冒泡）true 事件捕获</p>\n<p>好处：提高性能，减少了事件绑定，从而减少内存占用</p>\n<p>应用场景 在 vue 中事件委托：</p>\n<p>我们经常遇到 vue 中 v-for 一个列表，列表的每一项都绑定了 @click 处理事件。我们都知道绑定这么多监听，从性能方面来说是不太好的。那我们我们可以通过把每个 item 的 click 事件委托给父元素的形式来实现</p>\n</blockquote>\n<h4 id=\"javascript-的作用域和作用域链\"><a class=\"anchor\" href=\"#javascript-的作用域和作用域链\">#</a> Javascript 的作用域和作用域链</h4>\n<blockquote>\n<p><strong>作用域：</strong> <strong><em>* 作用域是定义变量的区域，它有一套访问变量的规则 *</em>，这套规则来管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找。简单说：函数内部局部作用域，函数外面全局作用域。</strong></p>\n</blockquote>\n<blockquote>\n<p>作用域就是一个变量可以使用的范围，主要分为全局作用域和函数作用域</p>\n<p>全局作用域就是 Js 中最外层的作用域，在哪里都可以访问</p>\n<p>函数作用域是 js 通过函数创建的一个独立作用域，只能在函数内部访问，函数可以嵌套，所以作用域也可以嵌套</p>\n<p>Es6 中新增了块级作用域（由大括号包裹，比如：if (){},for (){} 等）</p>\n</blockquote>\n<h4 id=\"防抖节流\"><a class=\"anchor\" href=\"#防抖节流\">#</a> 防抖节流</h4>\n<blockquote>\n<p>防抖：<strong>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</strong></p>\n<p>节流：<strong>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。两种方式可以实现，分别是时间戳版和定时器版。</strong></p>\n</blockquote>\n<h4 id=\"鼠标事件-mouseenter与mouseover区别\"><a class=\"anchor\" href=\"#鼠标事件-mouseenter与mouseover区别\">#</a> 鼠标事件 mouseenter 与 mouseover 区别</h4>\n<blockquote>\n<p>mouseenter： 鼠标进入被绑定事件监听元素节点时触发一次，再次触发是鼠标移出被绑定元素，再次进入时。而当鼠标进入被绑定元素节点触发一次后没有移出，即使鼠标动了也不再触发。</p>\n<p>mouseover： 鼠标进入被绑定事件监听元素节点时触发一次，如果目标元素包含子元素，鼠标移入子元素或鼠标从子元素移出到目标元素上也会触发。</p>\n<p>mouseenter 不支持事件冒泡 mouseover 会冒泡</p>\n</blockquote>\n<h3 id=\"4引用数据类型-object\"><a class=\"anchor\" href=\"#4引用数据类型-object\">#</a> 4. 引用数据类型 object</h3>\n<h4 id=\"object的方法\"><a class=\"anchor\" href=\"#object的方法\">#</a> object 的方法</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 是一种判断两个值是否相同的方法。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>语法：Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>参数：value1：要比较的第一个值。value2：要比较的第二个值。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>返回值：一个布尔表达式，指示两个参数是否具有相同的值。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法用于将所有可枚举的自身属性从一个或多个源对象复制到目标对象。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语法：Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>参数：target：目标对象——应用源属性的对象，修改后返回。sources：源对象——包含你要应用的属性的对象。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>返回值：修改后的目标对象。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">ES8</span>的Object<span class=\"token punctuation\">.</span>entries是把对象转成键值对数组， <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> 对的数组。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>语法：Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>参数：obj：要返回其自己的可枚举字符串键属性 <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> 对的对象。返回值：给定对象自己的可枚举字符串键属性 <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> 对的数组。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Object<span class=\"token punctuation\">.</span>fromEntries则相反，是把键值对数组转为对象</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法返回给定对象自己的可枚举属性值的数组，其顺序与 <span class=\"token keyword\">for</span><span class=\"token operator\">...</span><span class=\"token keyword\">in</span> 循环提供的顺序相同。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>语法：Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>参数：obj：要返回其可枚举自身属性值的对象。返回值：包含给定对象自己的可枚举属性值的数组。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法返回一个布尔值，指示对象是否具有指定的属性作为它自己的属性。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>如果指定的属性是对象的直接属性，则该方法返回 <span class=\"token boolean\">true</span> — 即使值为 <span class=\"token keyword\">null</span> 或未定义。如果该属性是继承的或根本没有声明，则返回 <span class=\"token boolean\">false</span>。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">语法：hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>参数：prop：要测试的属性的字符串名称或符号。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>返回值：如果对象将指定的属性作为自己的属性，则返回<span class=\"token boolean\">true</span>；否则为<span class=\"token boolean\">false</span>。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法用于返回给定对象自己的可枚举属性名称的数组，以与普通循环相同的顺序迭代。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>语法：Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>参数：obj：要返回可枚举自身属性的对象。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>返回值：表示给定对象的所有可枚举属性的字符串数组。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法返回一个表示对象的字符串。当对象将被表示为文本值或以期望字符串的方式引用对象时，将自动调用此方法 <span class=\"token function\">id。默认情况下，toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法由从 Object 继承的每个对象继承。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token function\">语法：toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>返回值：表示对象的字符串。</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法冻结一个对象，这意味着它不能再被更改。冻结对象可防止向其添加新属性，防止删除现有属性，防止更改现有属性的可枚举性、可配置性或可写性，并防止更改现有属性的值。它还可以防止其原型被更改。</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>语法：Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>参数：obj：要冻结的对象。返回值：传递给函数的对象。</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 （请打开浏览器控制台以查看运行结果。）</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>语法：<span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>参数：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>proto：新创建对象的原型对象。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>propertiesObject</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>可选。需要传入一个对象，该对象的属性类型参照Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>的第二个参数。如果该参数被指定且不为 <span class=\"token keyword\">undefined</span><span class=\"token function\">，该传入对象的自有可枚举属性</span><span class=\"token punctuation\">(</span>即其自身定义的属性，而不是其原型链上的枚举属性<span class=\"token punctuation\">)</span>将为新创建的对象添加指定的属性值和对应的属性描述符。</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>返回值</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>一个新对象，带着指定的原型对象和属性。</pre></td></tr></table></figure><h4 id=\"对象和面向对象\"><a class=\"anchor\" href=\"#对象和面向对象\">#</a> 对象和面向对象</h4>\n<blockquote>\n<p>对象：属性和方法的集合叫做对象（万物皆对象）。</p>\n<p>面向对象：首先就是找对象，如果该对象不具备所需要的方法或属性，那就给它添加。 面向对象是一种编程思维的改变。通过原型的方式来实现面向对象编程。</p>\n<p>创建对象的方式 (4 种)：new Object、字面量、构造函数、原型。</p>\n</blockquote>\n<h4 id=\"什么是深拷贝浅拷贝浅拷贝-赋值的区别如何实现\"><a class=\"anchor\" href=\"#什么是深拷贝浅拷贝浅拷贝-赋值的区别如何实现\">#</a> 什么是深拷贝，浅拷贝，浅拷贝 赋值的区别，如何实现</h4>\n<blockquote>\n<p>深拷贝和浅拷贝是针对复杂数据类型来说的，浅拷贝只拷贝一层，而深拷贝是层层拷贝。</p>\n<p>1. 浅拷贝：</p>\n<p>将原对象或原数组的引用直接赋给新对象，新数组，新对象只是对原对象的一个引用，而不复制对象本身，新旧对象还是共享同一块内存</p>\n<p>如果属性是一个基本数据类型，拷贝就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，</p>\n<p>2. 深拷贝：</p>\n<p>创建一个新的对象和数组，将原对象的各项属性的 “值”（数组的所有元素）拷贝过来，是 “值” 而不是 “引用”</p>\n<p>深拷贝就是把一个对象，从内存中完整的拷贝出来，从堆内存中开辟了新区域，用来存新对象，并且修改新对象不会影响原对象</p>\n<p>3、赋值：</p>\n<p>当我们把一个对象赋值给一个新的变量时，赋的是该对象在栈中的内存地址，而不是堆中的数据。也就是两个对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>浅拷贝的实现方式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token number\">1</span>、object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">2</span>、lodash 里面的 _<span class=\"token punctuation\">.</span>clone </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token number\">3</span>、<span class=\"token operator\">...</span>扩展运算符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token number\">4</span>、 <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>concat </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">5</span>、 <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>clice</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    深拷贝的实现方式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">1</span>、 <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">2</span>、递归操作</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">3</span>、cloneDeep</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">4</span>、Jquery<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"5数组\"><a class=\"anchor\" href=\"#5数组\">#</a> 5. 数组</h3>\n<h4 id=\"数组的方法\"><a class=\"anchor\" href=\"#数组的方法\">#</a> 数组的方法</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token function\">、sort</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：sort 排序 如果下面参数的正反 控制 升序和降序 ，返回的是从新排序的原数组</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token function\">、splice</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：向数组的指定index处插入 返回的是被删除掉的元素的集合，会改变原有数组；截取类 没有参数，返回空数组，原数组不变；一个参数，从该参数表示的索引位开始截取，直至数组结束，返回截取的 数组，原数组改变；两个参数，第一个参数表示开始截取的索引位，第二个参数表示截取的长度，返回截取的 数组，原数组改变；三个或者更多参数，第三个及以后的参数表示要从截取位插入的值。会改变原数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token function\">、pop</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：从尾部删除一个元素 返回被删除掉的元素，改变原有数组。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span><span class=\"token function\">、push</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：向数组的末尾追加 返回值是添加数据后数组的新长度，改变原有数组。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span><span class=\"token function\">、unshift</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：向数组的开头添加 返回值是添加数据后数组的新长度，改变原有数组。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span><span class=\"token function\">、shift</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：从头部删除一个元素 返回被删除掉的元素，改变原有数组。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7</span><span class=\"token function\">、reverse</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>： 原数组倒序  它的返回值是倒序之后的原数组</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">8</span><span class=\"token function\">、concat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：数组合并。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9</span><span class=\"token function\">、slice</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：数组元素的截取，返回一个新数组，新数组是截取的元素，可以为负值。从数组中截取，如果不传参，会返回原数组。如果只传入一个参数，会从头部开始删除，直到数组结束，原数组不会改变；传入两个参数，第一个是开始截取的索引，第二个是结束截取的索引，不包含结束截取的这一项，原数组不会改变。最多可以接受两个参数。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">10</span><span class=\"token function\">、join</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：讲数组进行分割成为字符串  这能分割一层在套一层就分隔不了了</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">11</span><span class=\"token function\">、toString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：数组转字符串；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">12</span><span class=\"token function\">、toLocaleString</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：将数组转换为本地数组。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">13</span><span class=\"token function\">、forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：数组进行遍历；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">14</span><span class=\"token function\">、map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：没有<span class=\"token keyword\">return</span>时，对数组的遍历。有<span class=\"token keyword\">return</span><span class=\"token function\">时，返回一个新数组，该新数组的元素是经过过滤</span><span class=\"token punctuation\">(</span>逻辑处理<span class=\"token punctuation\">)</span>过的函数。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">15</span><span class=\"token function\">、filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：对数组中的每一运行给定的函数，会返回满足该函数的项组成的数组。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">16</span><span class=\"token function\">、every</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：当数组中每一个元素在callback上被返回<span class=\"token boolean\">true</span>时就返回<span class=\"token boolean\">true</span>。（注：every其实类似filter，只不过它的功能是判断是不是数组中的所有元素都符合条件，并且返回的是布尔值）。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">17</span><span class=\"token function\">、some</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：当数组中有一个元素在callback上被返回<span class=\"token boolean\">true</span>时就返回<span class=\"token boolean\">true</span>。（注：every其实类似filter，只不过它的功能是判断是不是数组中的所有元素都符合条件，并且返回的是布尔值）。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">18</span><span class=\"token function\">、reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：回调函数中有<span class=\"token number\">4</span>个参数。prev（之前计算过的值），next（之前计算过的下一个的值），index，arr。把数组列表计算成一个</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">19.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 判断是否是数组</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">20.</span> indexOf  找索如果找到了就会返回当前的一个下标，若果没找到就会反回<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">21.</span> lastIndexOf 它是从最后一个值向前查找的 找索如果找到了就会返回当前的一个下标，若果没找到就会反回<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">22.</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 填充单个值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">23.</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 来源是类数组    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">24</span><span class=\"token punctuation\">.</span>fill填充方法 可以传入<span class=\"token number\">3</span>各参数 可以填充数组里的值也就是替换 如果一个值全部都替换掉 ，    第一个参数就是值 第二个参数 从起始第几个 第三个参数就是最后一个</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>find  查找这一组数 符合条件的第一个数 给他返回出来</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 查找这一组数 符合条件的第一数的下标 给他返回出来     没有返回 <span class=\"token operator\">-</span><span class=\"token number\">1</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>keys 属性名  values属性值  entries属性和属性值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>forEach 循环便利 有<span class=\"token number\">3</span>个参数 无法使用 <span class=\"token keyword\">break</span> <span class=\"token keyword\">continue</span> ， 参数一就是每个元素 参数二就是每个下标 参数三就是每个一项包扩下标和元素</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>### 改变数组本身的api</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">1.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pop()</span><span class=\"token template-punctuation string\">`</span></span>  尾部弹出一个元素</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">2.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">push()</span><span class=\"token template-punctuation string\">`</span></span> 尾部插入一个元素</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">3.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">shift()</span><span class=\"token template-punctuation string\">`</span></span>  头部弹出一个元素</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">4.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">unshift()</span><span class=\"token template-punctuation string\">`</span></span>  头部插入一个元素</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">5.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">sort([func])</span><span class=\"token template-punctuation string\">`</span></span> 对数组进行排序<span class=\"token punctuation\">,</span>func有<span class=\"token number\">2</span>各参数，其返回值小于<span class=\"token number\">0</span>，那么参数<span class=\"token number\">1</span>被排列到参数<span class=\"token number\">2</span>之前，反之参数<span class=\"token number\">2</span>排在参数<span class=\"token number\">1</span>之前</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">6.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">reverse()</span><span class=\"token template-punctuation string\">`</span></span> 原位反转数组中的元素</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">7.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">splice(pos,deleteCount,...item)</span><span class=\"token template-punctuation string\">`</span></span>  返回修改后的数组，从pos开始删除deleteCount个元素，并在当前位置插入items</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">8.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">copyWithin(pos[, start[, end]])</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token function\">复制从start到end</span><span class=\"token punctuation\">(</span>不包括end<span class=\"token punctuation\">)</span>的元素，到pos开始的索引，返回改变后的数组，浅拷贝</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">9.</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">arr.fill(value[, start[, end]])</span><span class=\"token template-punctuation string\">`</span></span> 从start到end默认到数组最后一个位置，不包括end，填充val，返回填充后的数组</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>其他数组api不改变原数组</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>map 映射关系的数组  map 主要就是有返回值可以<span class=\"token keyword\">return</span> 数组   判断的会返回boolean </pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token number\">1</span><span class=\"token function\">、map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法返回一个新数组，新数组中的元素为原始数组中的每个元素调用函数处理后得到的值。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token number\">2</span><span class=\"token function\">、map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法按照原始数组元素顺序依次处理元素。</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>注意：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>不会对空数组进行检测。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>不会改变原始数组。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 函数的作用是对数组中的每一个元素进行处理，返回新的元素。</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>filter 满足条件的都能返回 是一个数组</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>some返回boolean 循环数组 只要有一个成员通过了就会返回 <span class=\"token boolean\">true</span> 反而 <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>every返回boolean 循环数组 只有全部成员通过了就会返回 <span class=\"token boolean\">true</span> 反而 <span class=\"token boolean\">false</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 累加器 把上一次计算的值，给下一次计算进行相加</pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">set</span> 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">delete</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">delete</span> 可以删除数组中的一向</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token operator\">**</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">**</span> 用于确定传递的值是否是一个 <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Array</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>developer<span class=\"token punctuation\">.</span>mozilla<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>zh<span class=\"token operator\">-</span><span class=\"token constant\">CN</span><span class=\"token operator\">/</span>docs<span class=\"token operator\">/</span>Web<span class=\"token operator\">/</span>JavaScript<span class=\"token operator\">/</span>Reference<span class=\"token operator\">/</span>Global_Objects<span class=\"token operator\">/</span>Array<span class=\"token punctuation\">)</span>。</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>flat  扁平化 将嵌套的数组 “拉平”，变成一维数组。该方法返回一个新数组，对原数据没有影响。<span class=\"token comment\">// 参数写的就是代表要扁平到第几层</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre> </pre></td></tr><tr><td data-num=\"63\"></td><td><pre> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre> </pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">//1、every()</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">var</span> main <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 输出:true</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre> </pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">//2、some()</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">var</span> main <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 输出:true</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre> </pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">//3、reducer()</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 输出：100</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre> </pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 4、filter  返回满足要求的数组项组成的新数组</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">var</span> result3 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span> item <span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//[6,7,12,20,64,35]</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre> </pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">// 5、map  返回每次函数调用的结果组成的数组</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token keyword\">var</span> result4 <span class=\"token operator\">=</span> arr4<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result4<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">/*[ '&lt;span>1&lt;/span>',</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  '&lt;span>2&lt;/span>', ]*/</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre> </pre></td></tr><tr><td data-num=\"98\"></td><td><pre> </pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token constant\">ES6</span>数组的常用方法：</pre></td></tr><tr><td data-num=\"100\"></td><td><pre> </pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token number\">1</span>、Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：将对象或字符串转成数组，注意得有length。</pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token number\">2</span>、Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>： 将一组值转换为数组。</pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token number\">3</span><span class=\"token function\">、copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token function\">target，start</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token function\">，end</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>：数组内数据的复制替换</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\ttarget：从该位置开始替换数据；</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\tstart：从该位置开始读取数据，默认为<span class=\"token number\">0</span>；</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\tend：到该位置停止数据的读取，默认为数组的长度</pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token number\">4</span><span class=\"token function\">、find</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：用于找出第一个符合条件的数组成员。</pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token number\">5</span><span class=\"token function\">、findIndex</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<span class=\"token operator\">-</span><span class=\"token number\">1</span>。</pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token number\">6</span><span class=\"token function\">、fill</span><span class=\"token punctuation\">(</span>value，start，end<span class=\"token punctuation\">)</span>：使用给定值，填充一个数组。</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tvalue：填充的值；</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tstart：开始填充的位置；</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\tend：填充结束的位置。</pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token number\">7</span><span class=\"token function\">、keys</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：对键名的遍历。</pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token number\">8</span><span class=\"token function\">、values</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：对键值的遍历。</pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token number\">9</span><span class=\"token function\">、entries</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：对键值对的遍历。</pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token number\">10</span><span class=\"token function\">、includes</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：数组原型的方法<span class=\"token punctuation\">,</span>查找一个数值是否在数组中，只能判断一些简单类型的数据，对于复杂类型的数据无法判断。该方法接受两个参数，分别是查询的数据和初始的查询索引值。</pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token number\">11</span><span class=\"token function\">、flat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：用于数组扁平，数组去除未定义。可以去除空项。</pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token number\">12</span><span class=\"token function\">、flatMap</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：对原数组的每个成员执行一个函数。</pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token number\">13</span><span class=\"token function\">、Map</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：是一组键值对的结构，具有极快的查找速度。</pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token number\">14</span><span class=\"token function\">、Set</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。</pre></td></tr><tr><td data-num=\"121\"></td><td><pre> </pre></td></tr><tr><td data-num=\"122\"></td><td><pre> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">//1、Array.from()  --   Array.of()</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token keyword\">var</span>  arrayLink <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token string-property property\">\"0\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token string-property property\">\"1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token string-property property\">\"2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLink<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 输出: [a,b,c]</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdefg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 输出:[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 输出: [1, 2, 3, 4, 5]</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre> </pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token comment\">//2、copyWithin()</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token keyword\">var</span> main <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出:[4,5,3,4,5]</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre> </pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token comment\">//3、find()</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token keyword\">var</span> main <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span>  n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出:-5</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre> </pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token comment\">//4、fill()</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出:[\"a\",7,\"c\",\"d\"]  </span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre> </pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token comment\">//5、keys()  values()  entries()</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span>elem<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"160\"></td><td><pre> </pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token comment\">//6、includes()</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">223</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span><span class=\"token number\">67</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 输出:true</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre> </pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token comment\">//7、Map</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Michael'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Tracy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">85</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Michael'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 95</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token comment\">// 初始化 Map 需要一个二维数组，或者直接初始化一个空 Map。Map 具有以下方法：</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空 Map</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加新的 key-value</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否存在 key 'Adam': true</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 67</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除 key 'Adam'</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token comment\">// 由于一个 key 只能对应一个 value，所以，多次对一个 key 放入 value，后面的值会把前面的值冲掉：</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\tm<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 88</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre> </pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token comment\">//8、Set</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t<span class=\"token comment\">// 要创建一个 Set，需要提供一个 Array 作为输入，或者直接创建一个空 Set：</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空 Set</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t<span class=\"token keyword\">var</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 含 1, 2, 3</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token comment\">// 重复元素在 Set 中自动被过滤：</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\ts<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123;1, 2, 3, \"3\"&#125;  注意：数字 3 和字符串 '3' 是不同的元素</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token comment\">// 通过 add (key) 方法可以添加元素到 Set 中，可以重复添加，但不会有效果：</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\ts<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\ts<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 仍然是 Set &#123;1, 2, 3, 4&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t<span class=\"token comment\">// 通过 delete (key) 方法可以删除元素：</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\ts<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123;1, 2, 3&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\ts<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\ts<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set &#123;1, 2&#125;</span></pre></td></tr></table></figure><h3 id=\"6字符串\"><a class=\"anchor\" href=\"#6字符串\">#</a> 6. 字符串</h3>\n<h4 id=\"字符串的方法\"><a class=\"anchor\" href=\"#字符串的方法\">#</a> 字符串的方法</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token function\">、chartAt</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：返回在指定位置的字符；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token function\">、concat</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：返回新的字符串<span class=\"token operator\">**</span>，将一个或多个字符串与原字符串连接合并</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span><span class=\"token function\">、indexOf</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：检索字符串，返回第一次出现的索引，没有出现则为<span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span><span class=\"token function\">、lastIndexOf</span><span class=\"token punctuation\">(</span>searchValue<span class=\"token punctuation\">[</span> fromIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> 返回从字符串尾部开始第一次出现的索引，没有则<span class=\"token operator\">-</span><span class=\"token number\">1</span>，fromIndex的值相对于从尾部开始的索引</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span><span class=\"token function\">、split</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：返回一个以指定分隔符出现位置分隔而成的一个数组，数组元素不包含分隔符</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">6</span><span class=\"token function\">、substr</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：从起始索引号提取字符串中指定数目的字符；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">7</span><span class=\"token function\">、substring</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：提取字符串中两个指定的索引号之间的字符；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">8</span><span class=\"token function\">、toLowerCase</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：字符串转小写；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">9</span><span class=\"token function\">、toUpperCase</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：字符串转大写；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">10</span><span class=\"token function\">、valueOf</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：返回某个字符串对象的原始值； </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">11</span><span class=\"token function\">、trim</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：删除字符串两边的空格；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">12</span>、trimeState 取出开始的空格</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">13</span>、trimeEnd  去除末尾空格</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">14</span><span class=\"token function\">、includes</span><span class=\"token punctuation\">(</span>searchString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>返回boolean，判断一个字符串是否包含在另一个字符串中，从postition索引开始搜寻，默认<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">15</span><span class=\"token function\">、slice</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>：提取字符串片段，并在新的字符串中返回被提取的部分；</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">16</span><span class=\"token function\">、search</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span>返回首次匹配到的索引，没有则<span class=\"token operator\">-</span><span class=\"token number\">1</span>，执行正则表达式和 String 对象之间的一个搜索匹配</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">17</span><span class=\"token function\">、toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>返回一个表示调用对象的字符串，该方法返回指定对象的字符串形式</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">18</span><span class=\"token function\">、trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>返回去掉两端空白后的新字符串 还有trimend trimstart</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">19</span><span class=\"token function\">、replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 把指定的字符串替换成为别的字符</pre></td></tr></table></figure><h4 id=\"超长字符串存储到栈内存中\"><a class=\"anchor\" href=\"#超长字符串存储到栈内存中\">#</a> <strong>超长字符串存储到栈内存中</strong></h4>\n<blockquote>\n<p>字符串属于基础类型，所以会觉得字符串是存在栈内存中的，但是要知道，V8 默认栈内存是 984Kib，那如果一个超长字符串 &gt; 984Kib 能装的进栈内存吗？</p>\n<p>字符串的内容存于堆内存中，指针存于栈内存中，且相同的字符串指向同一个堆内存地址</p>\n<p>新增或者修改字符串后，如果是一个之前不存在的字符串，则新开辟内存空间，如果是已有的，则直接使用已有的内存空间</p>\n<p>当我们新建一个字符串时，V8 会从内存中查找一下是否已经有存在的一样的字符串，找到的话直接复用。如果找不到的话，则开辟一块新的内存空间来存这个字符串，并把地址赋给变量。</p>\n</blockquote>\n<h3 id=\"7javascript函数\"><a class=\"anchor\" href=\"#7javascript函数\">#</a> 7.javascript 函数</h3>\n<h4 id=\"声明函数的几种方式\"><a class=\"anchor\" href=\"#声明函数的几种方式\">#</a> <strong>声明函数的几种方式</strong></h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数声明</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span>，参数<span class=\"token number\">2</span>，<span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 要执行的语句 &#125; </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>函数表达式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func2</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 函数表达式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">func3</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token function\">func4</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 命名式函数表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> func5<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span>n2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 立即执行的函数表达式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 作为返回值的函数表达式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Function构造器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> 变量名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"参数2\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"参数n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"函数体\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>立即执行函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> func5<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n1<span class=\"token punctuation\">,</span>n2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 立即执行的函数表达式 ()()</span></pre></td></tr></table></figure><h4 id=\"函数声明与函数表达式的区别\"><a class=\"anchor\" href=\"#函数声明与函数表达式的区别\">#</a> <strong>函数声明与函数表达式的区别</strong></h4>\n<blockquote>\n<p>函数声明会将那个函数提升到最前面（即使你写代码的时候在代码块最后才写这个函数），成为全局函数。</p>\n<p>函数声明要指定函数名，而函数表达式不用，可以用作匿名函数。</p>\n</blockquote>\n<h4 id=\"函数调用的几种方式\"><a class=\"anchor\" href=\"#函数调用的几种方式\">#</a> <strong>函数调用的几种方式</strong></h4>\n<blockquote>\n<p>1. 直接调用 函数名加上括号 （）</p>\n<p>2. 函数表达式 变量名（）</p>\n</blockquote>\n<h4 id=\"函数的长度\"><a class=\"anchor\" href=\"#函数的长度\">#</a> <strong>函数的长度</strong></h4>\n<blockquote>\n<p>函数的 <code>length</code>  属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后， <code>length</code>  属性将失真。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun6</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun4<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun5<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fun6<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr></table></figure><h4 id=\"立即执行函数iife和使用场景\"><a class=\"anchor\" href=\"#立即执行函数iife和使用场景\">#</a> 立即执行函数（iife）和使用场景</h4>\n<blockquote>\n<p>立即执行函数：(function (){ })( ) 返回值可以为基本数据类型，也能返会任何类型的值。</p>\n<p>写法原因：因为在 javascript 里，括号内部不能包含语句，当解析器对代码进行解释的时候，先碰到了 ()， 然后碰到 function 关键字就会自动将 () 里面的代码识别为函数表达式而不是函数声明。</p>\n<p>作用：立即执行函数会形成一个单独的作用域，我们可以封装一些临时变量或者局部变量，避免污染全局变量。</p>\n<p>使用场景： ①代码在页面加载完成之后，不得不执行一些设置工作，比如时间处理器，创建对象等等。 ②所有的这些工作只需要执行一次，比如只需要显示一个时间。</p>\n<p>③需要一些临时的变量，但是初始化过程结束之后，就再也不会被用到，我们可以用立即执行函数 —— 去将我们所有的代码包裹在它的局部作用域中， 不会让任何变量泄露成全局变量。</p>\n</blockquote>\n<h4 id=\"arguments-的对象是什么\"><a class=\"anchor\" href=\"#arguments-的对象是什么\">#</a> arguments 的对象是什么？</h4>\n<blockquote>\n<p>arguments 当我们不知道有多少个参数传进来的时候就用 arguments 来接收，是一个类似于数组的对象，他有 length 属性，可以 arguments [i] 来访问对象中的元素， 但是它不能用数组的一些方法。 例如 push、pop、slice 等。arguments 虽然不是一个数组，但是它可以转成一个真正的数组。</p>\n<p>取之可以用 展开运算符来 数组和类数组类数组： ①拥有 length 属性，其它属性 (索引) 为非负整数；箭头函数里没有 arguments ②不具有数组所具有的方法； ③类数组是一个普通对象，而真实的数组是 Array 类型。</p>\n<p>常见的类数组：arguments，document.querySelectorAll 得到的列表，jQuery 对象 ($(&quot;div&quot;))；</p>\n</blockquote>\n<h4 id=\"this指向的问题高频\"><a class=\"anchor\" href=\"#this指向的问题高频\">#</a> this 指向的问题（高频）</h4>\n<blockquote>\n<p>在全局的环境下 this 是指向 window 的</p>\n<p>普通函数调用直接调用中的 this 会指向 window， 严格模式下 this 会指向 undefined，自执行函数 this 指向 window，定时器中的 this 指向 window</p>\n<p>在对象里调用的 this，指向调用函数的那个对象，</p>\n<p>在构造函数以及类中的 this，构造函数配合 new 使用，而 new 关键字会将构造函数中的 this 指向实例化对象，所以构造函数中的 this 指向 当前实例化的对象</p>\n<p>方法中的 this 谁调用就指向谁。</p>\n<p>箭头函数没有自己的 this，箭头函数的 this 在定义的时候，会继承自外层第一个普通函数的 this</p>\n</blockquote>\n<h4 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h4>\n<blockquote>\n<p>1、闭包的概念就是：只有权利访问另一个函数作用域中的变量，一般就是函数包裹着函数。</p>\n<p>3、闭包可以重用一个变量，且保证这个变量不会被污染的一种机制。这些变量的值始终保持在内存中，不会被垃圾回收机制处理</p>\n<p>4、闭包的缺点：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n<p>5、为什么要用闭包：使用场景：防抖、节流、函数套函数避免全局污染</p>\n</blockquote>\n<pre><code>闭包原理\n函数执行分成两个阶段(预编译阶段和执行阶段)。\n​\n    1.在预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个“闭包”对象并保存对应变量值，\n      如果已存在“闭包”，则只需要增加对应属性值即可。\n    2.执行完后，函数执行上下文会被销毁，函数对“闭包”对象的引用也会被销毁，但其内部函数还持用该“闭包”的引用，\n      所以内部函数可以继续使用“外部函数”中的变量\n​\n利用了函数作用域链的特性，一个函数内部定义的函数会将包含外部函数的活动对象添加到它的作用域链中，函数执行完毕，其执行作用域链销毁，\n但因内部函数的作用域链仍然在引用这个活动对象，所以其活动对象不会被销毁，直到内部函数被烧毁后才被销毁。\n</code></pre>\n<h4 id=\"call-apply-bind封装与区别\"><a class=\"anchor\" href=\"#call-apply-bind封装与区别\">#</a> call、apply、bind 封装与区别</h4>\n<blockquote>\n<p>都是来改变 this 指向和函数的调⽤，实际上 call 与 apply 的功能是相同的，只是两者的传参方式不一样，</p>\n<p>call ⽅法跟的是⼀个参数列表，</p>\n<p>apply 跟⼀个 数组作为参数，call ⽅法和 apply 使⽤后就直接调⽤</p>\n<p>bind 传参后不会立即执行，而是返回一个改变了 this 指向的函数，这个函数可以继续传参，且执行，需要类似于 bind ()() 两个括号才能调⽤。</p>\n<ul>\n<li>call 的性能要比 apply 好一点（尤其是当函数传递参数超过 3 个的时候）后期开发 call 多多一点</li>\n<li>call 用扩展运算符就可以吧 apply 来代替了</li>\n<li>**bind 返回的函数可以作为构造函数吗？** 答案：不能</li>\n</ul>\n</blockquote>\n<h4 id=\"函数柯里化卡瑞化-加里化\"><a class=\"anchor\" href=\"#函数柯里化卡瑞化-加里化\">#</a> 函数柯里化（卡瑞化、加里化）？</h4>\n<blockquote>\n<p>概念：把接受多个参数的函数变换成接受一个单一参数 (最初函数的第一个参数) 的函数，并且返回接受余下的参数而且返回结果的新函数的技术。 容易理解的概念：Currying 概念其实很简单，只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数（主要是利用闭包实现的）。</p>\n<p>特点：</p>\n<p>①接收单一参数，将更多的参数通过回调函数来搞定；</p>\n<p>②返回一个新函数，用于处理所有的想要传入的参数；</p>\n<p>③需要利用 call/apply 与 arguments 对象收集参数；</p>\n<p>④返回的这个函数正是用来处理收集起来的参数。</p>\n<p>作用：能进行部分传值，而传统函数调用则需要预先确定所有实参。如果你在代码某一处只获取了部分实参，然后在另一处确定另一部分实参，这个时候柯里化和偏应用就能派上用场。</p>\n<p>用途：我认为函数柯里化是对闭包的一种应用形式，延迟计算、参数复用、动态生成函数 (都是闭包的用途)。</p>\n</blockquote>\n<h4 id=\"柯里化函数例子\"><a class=\"anchor\" href=\"#柯里化函数例子\">#</a> 柯里化函数例子</h4>\n<blockquote>\n<p>柯里化函数：把一个多参数的函数转化为单参数函数的方法。并且返回接受余下的参数而且返回结果的新函数的技术。</p>\n<p>我的理解就是将一个接受多个参数的函数，转化为接收一个参数，并且不改变输出结果的一种办法。我觉得这就是 js 的柯里化函数</p>\n<p>这样做有什么好处，我得理解是在需要的情况下生成一个中间工具，简化代码，并且清晰代码。</p>\n</blockquote>\n<pre><code>// 简单的相加函数\nvar add = function (x,y) &#123;\n    return x + y\n&#125;\n// 调用：\nadd(1,2)\n​\n// 柯里化以后\nvar add = function (x) &#123; //柯里化函数(闭包)\n    return function (y) &#123;\n        return x + y\n    &#125;\n&#125;\nadd(1)(2)\n</code></pre>\n<h4 id=\"什么是高阶函数\"><a class=\"anchor\" href=\"#什么是高阶函数\">#</a> 什么是高阶函数？</h4>\n<blockquote>\n<p>高阶函数只是，将函数作为参数 ， 函数的返回值是函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">higherOrderFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">param<span class=\"token punctuation\">,</span>callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"8构造函数\"><a class=\"anchor\" href=\"#8构造函数\">#</a> 8. 构造函数</h3>\n<h4 id=\"new的原理\"><a class=\"anchor\" href=\"#new的原理\">#</a> new 的原理</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span>实际上是在堆内存中开辟一个空间。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ①创建一个空对象，构造函数中的<span class=\"token keyword\">this</span>指向这个空对象；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ②这个新对象被执行<span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span> 原型 <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>连接；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ③执行构造函数方法，属性和方法被添加到<span class=\"token keyword\">this</span>引用的对象中；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ④如果构造函数中没有返回其它对象，那么返回<span class=\"token keyword\">this</span>，即创建的这个的新对象，否则，返回构造函数中返回的对象。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 创建的新对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>constructor<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token comment\">// 执行 [[原型]] 连接，target 是 constructor 的实例</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    target<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 执行构造函数，将属性或方法添加到创建的空对象上</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token comment\">// 如果构造函数执行的结构返回的是一个对象，那么返回这个对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token comment\">// 如果构造函数返回的不是一个对象，返回创建的对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>自己理解的<span class=\"token keyword\">new</span>：         </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">new</span>实际上是在堆内存中开辟一个新的空间。首先创建一个空对象obj，然后呢，</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">把这个空对象的原型</span><span class=\"token punctuation\">(</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token function\">和构造函数的原型对象</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token function\">连接</span><span class=\"token punctuation\">(</span>说白了就是等于<span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    然后执行函数中的代码，就是为这个新对象添加属性和方法。最后进行判断其返回值，如果构造函数返回的是一个对象，</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    那就返回这个对象，如果不是，那就返回我们创建的对象。</pre></td></tr></table></figure><h4 id=\"封装一个通用的事件绑定函数\"><a class=\"anchor\" href=\"#封装一个通用的事件绑定函数\">#</a> 封装一个通用的事件绑定函数</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>需要点击每个a，来。弹出他们的内容</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div3\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">></span>a1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">></span>a2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">></span>a3<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">></span>a4<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">'btn1'</span><span class=\"token operator\">></span>加载更多<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 封装通用的事件绑定函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bindEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取父元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> fu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">bindEvent</span><span class=\"token punctuation\">(</span>fu<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//console.log (event.target) // 获取触发的元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> target<span class=\"token operator\">=</span>event<span class=\"token punctuation\">.</span>target</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 阻止默认行为</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 过滤符合条件的子元素，主要是过滤掉 加载更多 </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"9作用域js的机制\"><a class=\"anchor\" href=\"#9作用域js的机制\">#</a> 9. 作用域，js 的机制</h3>\n<h4 id=\"垃圾回收机制和内存机制\"><a class=\"anchor\" href=\"#垃圾回收机制和内存机制\">#</a> 垃圾回收机制和内存机制</h4>\n<blockquote>\n<p>垃圾回收</p>\n<p>浏览器的 js 具有自动垃圾回收机制，垃圾回收机制也就是自动内存管理机制，垃圾收集器会定期的找出那些不在继续使用的变量，然后释放内存。但是这个过程不是实时的，因为 GC 开销比较大并且时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p>\n<p>内存泄露</p>\n<p>如果 那些不再使用的变量，它们所占用的内存 不去清除的话就会造成内存泄漏</p>\n<p>内存泄露其实就是我们的程序中已经动态分配的堆内存，由于某些原因没有得到释放，造成系统内存的浪费导致程序运行速度减慢甚至系统崩溃等严重后果。</p>\n<p>比如说：</p>\n<p>1、闭包：在闭包中引入闭包外部的变量时，当闭包结束时此对象无法被垃圾回收（GC）。</p>\n<p>2、DOM：当原有的 DOM 被移除时，子结点引用没有被移除则无法回收</p>\n<p>3、Times 计时器泄露</p>\n</blockquote>\n<h4 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h4>\n<blockquote>\n<p>1、作用域</p>\n<p>作用域就是一个变量可以使用的范围，主要分为全局作用域和函数作用域</p>\n<p>全局作用域就是 Js 中最外层的作用域</p>\n<p>函数作用域是 js 通过函数创建的一个独立作用域，函数可以嵌套，所以作用域也可以嵌套</p>\n<p>Es6 中新增了块级作用域（由大括号包裹，比如：if (){},for (){} 等）</p>\n<p>2、自由变量</p>\n<p>当前作用域外的变量都是自由变量，一个变量在当前作用域没有定义，但是被使用了，就会向上级作用域，一层一层依次查找，直至找到为止，如果全局作用域都没有找到这个变量就会报错。这个自由变量查找的过程就是作用域链。</p>\n<p>3、变量提升</p>\n<p>每个 var 声明的变量，function 声明的函数存在变量提升。let const 不存在变量提升</p>\n<p>在 js 中声明之前未定义，会在 js 的最上方会形成一个预解析池，用来存储声明了但没有先定义的变量名</p>\n<p>4、作用域链：</p>\n<p>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和 函数 ， 简单来说：内部函数访问外部函数的变量这种链式查找的机制被称为作用域链</p>\n</blockquote>\n<h4 id=\"谈谈js的运行机制\"><a class=\"anchor\" href=\"#谈谈js的运行机制\">#</a> 谈谈 JS 的运行机制</h4>\n<blockquote>\n<ol>\n<li>js 单线程</li>\n</ol>\n<p>JavaScript 语言的一大特点就是单线程，即同一时间只能做一件事情。</p>\n<ol start=\"2\">\n<li>js 事件循环</li>\n</ol>\n<p>js 代码执行过程中会有很多任务，这些任务总的分成两类：</p>\n<p>同步任务</p>\n<p>异步任务</p>\n<p>需要注意的是除了同步任务和异步任务，任务还可以更加细分为 macrotask (宏任务) 和 microtask (微任务)，js 引擎会优先执行微任务</p>\n</blockquote>\n<pre><code>微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\n​\n宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲\n染等。\n</code></pre>\n<blockquote>\n<p>首先 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。</p>\n<p>在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务</p>\n<p>当同步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。</p>\n<p>任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。</p>\n<p>当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>process<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>第一轮：主线程开始执行，遇到 setTimeout，将 setTimeout 的回调函数丢到宏任务队列中，在往下执行 new Promise 立即执行，输出 2，then 的回调函数丢到微任务队列中，再继续执行，遇到 process.nextTick，同样将回调函数扔到为任务队列，再继续执行，输出 5，当所有同步任务执行完成后看有没有可以执行的微任务，发现有 then 函数和 nextTick 两个微任务，先执行哪个呢？process.nextTick 指定的异步任务总是发生在所有异步任务之前，因此先执行 process.nextTick 输出 4 然后执行 then 函数输出 3，第一轮执行结束。</p>\n<p>第二轮：从宏任务队列开始，发现 setTimeout 回调，输出 1 执行完毕，因此结果是 25431</p>\n</blockquote>\n<h4 id=\"js延迟加载的方式\"><a class=\"anchor\" href=\"#js延迟加载的方式\">#</a> JS 延迟加载的方式</h4>\n<blockquote>\n<p>JavaScript 是单线程（js 不走完下面不会走是因为同步）会阻塞 DOM 的解析，因此也就会阻塞 DOM 的加载。所以有时候我们希望延迟 JS 的加载来提高页面的加载速度。</p>\n<p>1. 把 JS 放在页面的最底部</p>\n<p>2.script 标签的 defer 属性：脚本会立即下载但延迟到整个页面加载完毕再执行。该属性对于内联脚本无作用 (即没有 「src」 属性的脚本）。</p>\n<p>3. 是在外部 JS 加载完成后，浏览器空闲时，Load 事件触发前执行，标记为 async 的脚本并不保证按照指定他们的先后顺序执行， 该属性对于内联脚本无作用 (即没有 「src」 属性的脚本）。</p>\n<p>4. 动态创建 script 标签，监听 dom 加载完毕再引入 js 文件</p>\n</blockquote>\n<h4 id=\"script标签的defer属性与async属性\"><a class=\"anchor\" href=\"#script标签的defer属性与async属性\">#</a> script 标签的 defer 属性与 async 属性</h4>\n<blockquote>\n<p>两者都是异步加载 js 文件，不过 async 是加载完立刻执行，而 defer 是在 dom 解析完再执行</p>\n</blockquote>\n<h4 id=\"宏任务和微任务\"><a class=\"anchor\" href=\"#宏任务和微任务\">#</a> 宏任务和微任务</h4>\n<blockquote>\n<p>js 中的一个机制，就是遇到宏任务，先将宏任务放入 eventqueue，然后在执行微任务。</p>\n<p>宏任务：setTimeout,setInterval,Ajax,DOM 事件</p>\n<p>微任务：Promise async/await</p>\n<p>想明白这个机制 就要理解 js 单线程。因为 JS 是单线程语言，只能同时做一件事儿。js 任务需要排队顺序执行，如果一个任务时间过长，后边的任务也会等着。假如，我们在请求一个网址时，图片加载很慢，网页总不能一直卡不出来，</p>\n<p>这个时候就可以用异步来解决了，异步的特点不会阻塞代码的执行，解决了单线程等待的这个问题</p>\n<p>在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务</p>\n<p>异步和单线程是相辅相成的，js 是一门单线程语言，所以需要异步来辅助</p>\n</blockquote>\n<h4 id=\"js预解析变量提升它导致了什么问题\"><a class=\"anchor\" href=\"#js预解析变量提升它导致了什么问题\">#</a> JS 预解析（变量提升），它导致了什么问题？</h4>\n<blockquote>\n<p>JS 代码在执行前，浏览器会对 js 代码进行扫描，默认的把所有带 var 和 function 声明的变量进行提前的声明或者定义，遵循先解析后使用的原则。 变量提升的表现是，在变量或函数声明之前访问变量或调用函数而不会报错。</p>\n<p>原因 JavaScript 引擎在代码执行前有一个解析的过程（预编译），创建执行上下文，初始化一些代码执行时需要用到的对象。 当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性， 它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</p>\n<p>首先要知道，JS 在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</p>\n<p>1. 在解析阶段 JS 会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来， 变量先赋值为 undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似， 不过函数执行上下文会多出 this、arguments 和函数的参数。</p>\n<p>全局上下文：变量定义，函数声明 函数上下文：变量定义，函数声明，this，arguments</p>\n<p>2. 在执行阶段，就是按照代码的顺序依次执行。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>那为什么会进行变量提升呢？主要有以下两个原因：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>、提高性能</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>、容错性更好</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>（<span class=\"token number\">1</span>）提高性能 在<span class=\"token constant\">JS</span>代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>并且因为代码压缩的原因，代码执行也更快了。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>（<span class=\"token number\">2</span>）容错性更好 变量提升可以在一定程度上提高<span class=\"token constant\">JS</span>的容错性，看下面的代码：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">var</span> a</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>如果没有变量提升，这段代码就会报错导致的问题</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello nanjiu'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>相当于覆盖了外层的tmp，所以打印结果为<span class=\"token keyword\">undefined</span>。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello nan jiu'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tmp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来<span class=\"token number\">13</span>。</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>总结      </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>声明提升还可以提高<span class=\"token constant\">JS</span>代码的容错性，使一些不规范的代码也可以正常执行</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>函数是一等公民，当函数声明与变量声明冲突时，变量提升时函数优先级更高，会忽略同名的变量声明</pre></td></tr></table></figure></blockquote>\n<h4 id=\"服务端渲染\"><a class=\"anchor\" href=\"#服务端渲染\">#</a> 服务端渲染</h4>\n<blockquote>\n<p>解释：服务端渲染的模式下，当用户第一次请求页面时，由服务器把需要的组件或页面渲染成 HTML 字符串，然后把它返回给客户端。客户端拿到手的，是可以直接渲染然后呈现给用户的 HTML 内容，不需要为了生成 DOM 内容自己再去跑一遍 JS 代码。使用服务端渲染的网站，可以说是 “所见即所得”，页面上呈现的内容，我们在 html 源文件里也能找到。有了服务端渲染，当请求用户页面时，返回的 body 里已经有了首屏的 html 结构，之后结合 css 显示出来。</p>\n<p>优点：<br />\n①首屏渲染快 (关键性问题)：相比于加载单页应用，我只需要加载当前页面的内容，而不需要像 React 或者 Vue 一样加载全部的 js 文件；<br />\n②SEO (搜索引擎) 优化：不同爬虫工作原理类似，只会爬取源码，不会执行网站的任何脚本<br />\n③可以生成缓存片段、节能；</p>\n<p>缺点：用户体验较差，不容易维护、通常前端改了部分 html 或者 css，后端也需要改；</p>\n<p>使用场景：vue 全家桶或者 react 全家桶，都是推荐通过服务端渲染来实现路由的。</p>\n</blockquote>\n<h4 id=\"event-loop-event-queue\"><a class=\"anchor\" href=\"#event-loop-event-queue\">#</a> Event Loop Event Queue</h4>\n<blockquote>\n<p>在 js 中我们经常需要同时执行很多件任务，例如，定时器，事件。异步数据，而 js 是单线程的原因不能同时进行很多件事情，必须等上一件任务执行完了才会执行下一个，需要通过 Event Loop 来处理很多任务的执行</p>\n<p>因为 js 是单线程的，代码执行的时候，将不同的函数执行上下文压入到栈中进行有序的执行，<br />\n在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，就是将它挂起，继续执行栈中其他的任务<br />\n当同步任务执行完了，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。<br />\n任务队列分为的宏任务队列和微任务队列，当前的执行栈中执行完，js 引擎会首先判断微任务队列是否有任务可以执行有的话，放到栈中执行。<br />\n当微任务队列中的任务执行完了再去判断宏任务中的队列。</p>\n<p>为什么会有任务队列呢？<br />\n还是因为 javascript 单线程的原因，单线程，就意味着一个任务一个任务的执行，<br />\n执行完当前任务，执行下一个任务，这样也会遇到一个问题，就比如说，要向服务端通信，加载大量数据，如果是同步执行，<br />\njs 主线程就得等着这个通信完成，然后才能渲染数据，为了高效率的利用 cpu, 就有了同步任务和异步任务之分。</p>\n</blockquote>\n<h4 id=\"同步和异步的区别各举一个js中同步和异步的案例\"><a class=\"anchor\" href=\"#同步和异步的区别各举一个js中同步和异步的案例\">#</a> 同步和异步的区别？各举一个 Js 中同步和异步的案例？</h4>\n<blockquote>\n<p>同步：上一件事情没有完成，继续处理上一件事情，只有上一件事情完成了，才会做下一件事情</p>\n<p>异步： 规划要做一件事情，如果是异步事情，不是当前立马去执行这件事情，需要等一定的时间，这样的话，我们不会等着他执行，而是继续执行下面的操作</p>\n<p>对于写程序，同步往往会阻塞，没有数据过来，我就等着，异步则不会阻塞，没数据来我干别的事，有数据来去处理这些数据。</p>\n<p>同步案例：for 循环语句，alert (),console.log () 等 js 大部分都是同步编程</p>\n<p>异步案例：所有定时器，ajax 异步请求，所有的事件绑定都是异步；</p>\n<p>举例子</p>\n<p>同步，就是实时处理（如打电话），比如服务器一接收客户端请求，马上响应，这样客户端可以在最短的时间内得到结果，但是如果多个客户端，或者一个客户端发出的请求很频繁，服务器无法同步处理，就会造成涌塞。</p>\n<p>同步如打电话，通信双方不能断（我们是同时进行，同步），你一句我一句，这样的好处是，对方想表达的信息我马上能收到，但是，我在打着电话，我无法做别的事情。</p>\n<p>异步，就是分时处理（如收发短信），服务器接收到客户端请求后并不是立即处理，而是等待服务器比较空闲的时候加以处理，可以避免涌塞。</p>\n</blockquote>\n<h3 id=\"10bom浏览器对象模型\"><a class=\"anchor\" href=\"#10bom浏览器对象模型\">#</a> 10.BOM 浏览器对象模型</h3>\n<h4 id=\"js操作bom\"><a class=\"anchor\" href=\"#js操作bom\">#</a> js 操作 BOM</h4>\n<blockquote>\n<p>浏览器对象模型（BOM ：Browser Object Model）是 JavaScript 的组成之一，它提供了独立于内容与浏览器窗口进行交互的对象，使用浏览器对象模型可以实现与 HTML 的交互。它的作用是将相关的元素组织包装起来，提供给程序设计人员使用，从而降低开发人员的劳动量，提高设计 Web 页面的能力。</p>\n<p>window : alert() , prompt() , confirm() , setInterval() , clearInterval() , setTimeout() , clearTimeout() ;</p>\n<p>history : go (参数) , back () , foward () ;</p>\n<p>location : herf 属性.</p>\n<p>1、window.location.href = ' 你所要跳转到的页面 '; 2、window.open (' 你所要跳转到的页面’); 3、window.history.back (-1): 返回上一页 4、window.history.go (-1/1): 返回上一页或下一页五、 5、history.go (&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2JhaWR1LmNvbQ==\">baidu.com</span>&quot;)；</p>\n</blockquote>\n<h4 id=\"说出5个以上math对象中的成员\"><a class=\"anchor\" href=\"#说出5个以上math对象中的成员\">#</a> 说出 5 个以上 Math 对象中的成员。</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> 圆周率</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 向下取整</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 向上取整</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 四舍五入版 就近取整</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 绝对值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 求最大和最小值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 获取范围在<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>内的随机值</pre></td></tr></table></figure><h4 id=\"settimeout与setinterval区别与机制\"><a class=\"anchor\" href=\"#settimeout与setinterval区别与机制\">#</a> setTimeout 与 setInterval 区别与机制</h4>\n<blockquote>\n<p>setTimeout () 和 setInterval () 经常被用来处理延时和定时任务。</p>\n<p><strong>setTimeout</strong> () 方法用于在指定的毫秒数后调用函数或计算表达式</p>\n<p><strong>setInterval</strong> () 则可以在每隔指定的毫秒数循环调用函数或表达式，直到 clearInterval 把它清除。</p>\n</blockquote>\n<pre><code>机制：\n \n因为js是单线程的。浏览器遇到setTimeout 和 setInterval会先执行完当前的代码块，在此之前会把定时器推入浏览器的\n待执行时间队列里面，等到浏览器执行完当前代码之后会看下事件队列里有没有任务，有的话才执行定时器里的代码\n</code></pre>\n<h4 id=\"window的onload事件和domcontentloaded\"><a class=\"anchor\" href=\"#window的onload事件和domcontentloaded\">#</a> window 的 onload 事件和 domcontentloaded</h4>\n<blockquote>\n<p>window.onload：当一个资源及其依赖资源已完成加载时，将触发 onload 事件。 document.onDOMContentLoaded：当初始的 HTML 文档被完全加载和解析完成之后， DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。 区别： ①onload 事件是 DOM 事件，onDOMContentLoaded 是 HTML5 事件。 ②onload 事件会被样式表、图像和子框架阻塞，而 onDOMContentLoaded 不会。 ③当加载的脚本内容并不包含立即执行 DOM 操作时，使用 onDOMContentLoaded 事件是个更好的选择，会比 onload 事件执行时间更早。</p>\n</blockquote>\n<h4 id=\"cookiessessionstorage-和-localstorage-的区别\"><a class=\"anchor\" href=\"#cookiessessionstorage-和-localstorage-的区别\">#</a> cookies，sessionStorage 和 localStorage 的区别？</h4>\n<blockquote>\n<p>cookie：一个大小不超过 4K 的小型文本数据，一般由服务器生成，可以设置失效时间；若没有设置时间，关闭浏览器 cookie 失效，若设置了 时间，cookie 就会存放在硬盘里，过期才失效，每次 http 请求，header 都携带 cookie</p>\n<p>localStorage：5M 或者更大，永久有效，窗口或者浏览器关闭也会一直保存，除非手动永久清除或者 js 代码清除，因此用作持久数据，不参与和服务器的通信</p>\n<p>sessionStorage 关闭页面或浏览器后被清除。存 放数据大小为一般为 5MB, 而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。</p>\n</blockquote>\n<h4 id=\"location-navigator和history\"><a class=\"anchor\" href=\"#location-navigator和history\">#</a> location、navigator 和 history</h4>\n<p><strong>location</strong></p>\n<blockquote>\n<p>location 对象存储了当前文档位置（URL）相关的信息，简单地说就是网页地址字符串。使用 window 对象的 location 属性可以访问。</p>\n<p>href 会重新定位到一个 URL，hash 会跳到当前页面中的 anchor 名字的标记 (如果有)，而且页面不会被重新加载</p>\n</blockquote>\n<p><strong>history</strong></p>\n<blockquote>\n<p>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中） 访问过的 URL。</p>\n<p>history.back 可以后退一个网页</p>\n<p>history.go 可以前进后退 1 前进 -1 后退</p>\n<p>history.forward  前进</p>\n</blockquote>\n<p><strong>navigator 对象</strong></p>\n<blockquote>\n<p>window.navigator` 对象包含有关浏览器的信息，可以用它来查询一些关于运行当前脚本的应用程序的相关信息</p>\n<p>navigator.appCodeName 只读，任何浏览器中，总是返回 'Gecko'。该属性仅仅是为了保持兼容性。</p>\n<p>navigator.appName 只读，返回浏览器的官方名称。不要指望该属性返回正确的值。</p>\n<p>navigator.appVersion 只读，返回一个字符串，表示浏览器的版本。不要指望该属性返回正确的值。</p>\n<p>navigator.platform 只读，返回一个字符串，表示浏览器的所在系统平台。</p>\n<p>navigator.product 只读，返回当前浏览器的产品名称（如，&quot;Gecko&quot;）。</p>\n<p>navigator.userAgent 只读，返回当前浏览器的用户代理字符串（user agent string）</p>\n</blockquote>\n<h3 id=\"11dom文档对象模型\"><a class=\"anchor\" href=\"#11dom文档对象模型\">#</a> 11.DOM 文档对象模型</h3>\n<h4 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h4>\n<blockquote>\n<p><strong>DOM 是 document 用来表示文档中对象的标准模型，他是由节点和对象组成的结构集合</strong>。在浏览器解析 HTML 标签时，会构建一个 DOM 树结构。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>拿到指定节点</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回带有指定 id 的元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回带有指定标签的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回带有包含执行类名的所有元素节点列表。`</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> 创建<span class=\"token constant\">DOM</span>节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> attr <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> text <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"菜呀菜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> 插入DOM节点</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>node.appendChild(text) //插入新的子节点</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>node.insertBefore(pre,child) //在node元素内child前加入新元素</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> 删除<span class=\"token constant\">DOM</span>节点</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从父元素删除子元素节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> 修改<span class=\"token constant\">DOM</span>节点</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改设置属性节点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span>child<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 父节点内新子节点替换旧子节点 `</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> 常用<span class=\"token constant\">DOM</span>属性</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>node<span class=\"token punctuation\">.</span>innerHtml  <span class=\"token comment\">// 获取 / 替换元素内容</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>node<span class=\"token punctuation\">.</span>parentNode  <span class=\"token comment\">// 元素节点的父节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>node<span class=\"token punctuation\">.</span>parentElement  <span class=\"token comment\">// 元素节点的父元素节点（一般与 Node 节点相同）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>node<span class=\"token punctuation\">.</span>firstChild  <span class=\"token comment\">// 属性的第一个节点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>node<span class=\"token punctuation\">.</span>lastChild   <span class=\"token comment\">// 属性的最后一个节点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>node<span class=\"token punctuation\">.</span>nextSibling <span class=\"token comment\">// 节点元素后的兄弟元素（包括回车，空格，换行）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>node<span class=\"token punctuation\">.</span>nextElementSibling <span class=\"token comment\">// 节点元素后的兄弟元素节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>node<span class=\"token punctuation\">.</span>previousSibling <span class=\"token comment\">// 获取元素的上一个兄弟节点（元素，文本，注释）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>node<span class=\"token punctuation\">.</span>previousElementSibling <span class=\"token comment\">// 获取元素的上一个兄弟节点（只包含元素节点）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>node<span class=\"token punctuation\">.</span>childNodes  <span class=\"token comment\">// 元素节点的子节点（空格，换行默认为文本节点）</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>node<span class=\"token punctuation\">.</span>children    <span class=\"token comment\">// 返回当前元素的所有元素节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>node<span class=\"token punctuation\">.</span>nodeValue   <span class=\"token comment\">// 获取节点值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>node<span class=\"token punctuation\">.</span>nodeName    <span class=\"token comment\">// 获取节点名字</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>node<span class=\"token punctuation\">.</span>attributes  <span class=\"token comment\">// 元素节点的属性节点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 元素节点的某个属性节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>node<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\"200px\"</span>  <span class=\"token comment\">// 设置 css 样式 `</span></pre></td></tr></table></figure><h4 id=\"常用的api\"><a class=\"anchor\" href=\"#常用的api\">#</a> 常用的 api</h4>\n<p><strong>offset、client、scroll 的用法？</strong></p>\n<blockquote>\n<p>offset 系列 经常用于获得元素位置 offsetLeft offsetTop</p>\n<p>client 经常用于获取元素大小 clientWidth clientHeight</p>\n<p>scroll 经常用于获取滚动距离 scrollTop scrollLeft</p>\n</blockquote>\n<h3 id=\"12javascript原型与原型链\"><a class=\"anchor\" href=\"#12javascript原型与原型链\">#</a> 12.javascript 原型与原型链</h3>\n<h4 id=\"原型\"><a class=\"anchor\" href=\"#原型\">#</a> 原型</h4>\n<blockquote>\n<ol>\n<li><strong>每个函数都有一个 prototype 属性，被称为显示原型</strong></li>\n<li><strong>每个实例对象都会有 <code>_ _proto_ _</code> 属性，其被称为隐式原型</strong></li>\n<li><strong>每一个实例对象的隐式原型 <code>_ _proto_ _</code> 属性指向自身构造函数的显式原型 prototype</strong></li>\n<li><strong>每个 prototype 原型都有一个 constructor 属性，指向它关联的构造函数。</strong></li>\n</ol>\n</blockquote>\n<h4 id=\"原型链\"><a class=\"anchor\" href=\"#原型链\">#</a> <strong>原型链</strong></h4>\n<blockquote>\n<p><strong>获取对象属性时，如果对象本身没有这个属性，那就会去他的原型 <code>__proto__</code> 上去找，如果还查不到，就去找原型的原型，一直找到最 顶层 ( <code>Object.prototype</code> ) 为止。Object.prototype 对象也有 proto 属性值为 null。链式查找机制叫原型链。</strong></p>\n</blockquote>\n<h3 id=\"13constructorprotoprototype的三角关系\"><a class=\"anchor\" href=\"#13constructorprotoprototype的三角关系\">#</a> 13.constructor，proto，prototype 的三角关系。</h3>\n<blockquote>\n<p><strong>构造函数的 prototype 指向原型对象</strong></p>\n<p><strong>实例对象的 proto 指向构造函数的 prototype 所指向原型对象</strong></p>\n<p><strong>原型对象的 constructor 指向构造函数</strong></p>\n</blockquote>\n<h3 id=\"14面向过程面向对象面向过程和面向对象的优缺点\"><a class=\"anchor\" href=\"#14面向过程面向对象面向过程和面向对象的优缺点\">#</a> 14. 面向过程，面向对象，面向过程和面向对象的优缺点</h3>\n<blockquote>\n<p><strong>一、面向过程：面向过程就是分析出实现需求所需要的步骤，通过函数一步一步实现这些步骤，接着依次调用即可。</strong></p>\n<p><strong>二、面向对象：将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程面向过程：</strong></p>\n<p>优点：性能上它是优于面向对象的，因为类在调用的时候需要实例化，开销过大。</p>\n<p>缺点：不易维护、复用、扩展</p>\n<p>用途：单片机、嵌入式开发、Linux/Unix 等对性能要求较高的地方</p>\n<p>面向对象:</p>\n<p><strong>面向对象有三大特性：封装，继承，多态。</strong></p>\n<p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护 。</p>\n<p>缺点：性能比面向过程低</p>\n</blockquote>\n<h3 id=\"15settimeout-promise-asyncawait-的区别\"><a class=\"anchor\" href=\"#15settimeout-promise-asyncawait-的区别\">#</a> 15.setTimeout、Promise、Async/Await 的区别</h3>\n<ol>\n<li>\n<p>setTimeout</p>\n<p>settimeout 的回调函数放到宏任务队列里，等到执行栈清空以后执行。</p>\n</li>\n<li>\n<p>Promise</p>\n<p>Promise 本身是<strong>同步的立即执行函数</strong>， 当在 executor 中执行 resolve 或者 reject 的时候，此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span></pre></td></tr></table></figure></li>\n<li>\n<p>async/await</p>\n<p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->async1 start->async2->script end->async1 end</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"es6篇\"><a class=\"anchor\" href=\"#es6篇\">#</a> ES6 篇</h2>\n<h3 id=\"1-es6-新增特性\"><a class=\"anchor\" href=\"#1-es6-新增特性\">#</a> 1、 ES6 新增特性</h3>\n<blockquote>\n<p>新增了块级作用域 (let,const)</p>\n<p>提供了定义类的语法糖 (class)</p>\n<p>新增了一种基本数据类型 (Symbol)</p>\n<p>新增了变量的解构赋值</p>\n<p>函数参数允许设置默认值，引入了 rest 参数，新增了箭头函数</p>\n<p>数组新增了一些 API，如 isArray /from/of 方法；数组实例新增了 entries ()，keys () 和 values () 等方法</p>\n<p>对象和数组新增了扩展运算符</p>\n<p>ES6 新增了模块化 (import/export)</p>\n<p>ES6 新增了 Set 和 Map 数据结构</p>\n<p>ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例</p>\n<p>ES6 新增了生成器 (Generator) 和遍历器 (Iterator)</p>\n</blockquote>\n<h3 id=\"2-require与import的区别和使用commonjs规范和es6规范\"><a class=\"anchor\" href=\"#2-require与import的区别和使用commonjs规范和es6规范\">#</a> 2、require 与 import 的区别和使用 (CommonJS 规范和 es6 规范)</h3>\n<blockquote>\n<p>1、import 是 ES6 中的语法标准也是用来加载模块文件的，import 函数可以读取并执行一个 JavaScript 文件，然后返回该模块的 export 命令指定输出的代码。export 与 export default 均可用于导出常量、函数、文件、模块，export 可以有多个，export default 只能有一个。</p>\n<p>2、require 定义模块：module 变量代表当前模块，它的 exports 属性是对外的接口。通过 exports 可以将模块从模块中导出，其他文件加载该模块实际上就是读取 module.exports 变量，他们可以是变量、函数、对象等。在 node 中如果用 exports 进行导出的话系统会系统帮您转成 module.exports 的，只是导出需要定义导出名。</p>\n<p>require 与 import 的区别</p>\n<p>1，require 是 CommonJS 规范的模块化语法，import 是 ECMAScript 6 规范的模块化语法；</p>\n<p>2，require 是运行时加载，import 是编译时加载；</p>\n<p>3，require 可以写在代码的任意位置，import 只能写在文件的最顶端且不可在条件语句或函数作用域中使用；</p>\n<p>4，require 通过 module.exports 导出的值就不能再变化，import 通过 export 导出的值可以改变；</p>\n<p>5；require 通过 module.exports 导出的是 exports 对象，import 通过 export 导出是指定输出的代码；</p>\n<p>6，require 运行时才引入模块的属性所以性能相对较低，import 编译时引入模块的属性所所以性能稍高。</p>\n</blockquote>\n<h3 id=\"3-箭头函数\"><a class=\"anchor\" href=\"#3-箭头函数\">#</a> 3、箭头函数</h3>\n<blockquote>\n<p>js 中我们在调⽤函数的时候经常会遇到 this 作⽤域的问题，这个时候 ES6 给我们提箭头函数。</p>\n<p>1、 箭头函数是匿名函数不能作为构造函数，不能使用 new</p>\n<p>2、 箭头函数不绑定 arguments, 取而代之用 rest 参数… 解决，</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">//1,2,3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>rest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">//[1,2,3]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3、 this 指向不同，箭头函数的 this 在定义的时候继承自外层第一个普通函数的 this</p>\n<p>4、 箭头函数没有 prototype (原型)，所以箭头函数本身没有 this</p>\n<p>5、 箭头函数不能当做 Generator 函数，不能使用 yield 关键字、</p>\n<p>6、 写法不同，箭头函数把 function 省略掉了 （）=&gt; 也可以吧 return 省略调 写法更简洁</p>\n<p>7、箭头函数不能通过 call（）、apply（）、bind（）方法直接修改它的 this 指向。</p>\n</blockquote>\n<h3 id=\"4-简述-let-const-var-的区别-以及使用场景\"><a class=\"anchor\" href=\"#4-简述-let-const-var-的区别-以及使用场景\">#</a> 4、简述 let const var 的区别 以及使用场景</h3>\n<p>var let 是用来声明变量的，而 const 是声明常量的 var</p>\n<p>var</p>\n<blockquote>\n<pre><code>1.var声明的变量存在变量提升，即变量可以在声明之前调用，值为undefined    \n2、一个变量可多次声明，后面的声明会覆盖前面的声明    \n3、在函数中使用var声明变量的时候，该变量是局部的作用域只在函数内部，而如果在函数外部使用 var，该变量是全局的\n</code></pre>\n</blockquote>\n<p>let</p>\n<blockquote>\n<p>1、不存在变量提升，let 声明变量前，该变量不能使用。就是 let 声明存在暂时性死区<br />\n 2、let 命令所在的代码块内有效，在块级作用域内有效，作用域只是在花括号里面<br />\n 3、let 不允许在相同作用域中重复声明，注意是相同作用域，不同作用域有重复声明不会报错</p>\n</blockquote>\n<p>const</p>\n<blockquote>\n<p>1、const 声明一个只读的常量，声明后，值就不能改变<br />\n 2、let 和 const 在同一作用域不允许重复声明变量 const 声明一个只读的常量。一旦声明，常量的值就不能改变，但对于对象和数据这种  引用类型，内存地址不能修改，可以修改里面的值。<br />\n3、let 和 const 不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错<br />\n 4、能用 const 的情况下尽量使用 const，大多数情况使用 let，避免使用 var。 const &gt; let &gt; var const 声明的好处，一让阅读代码的人知道该变量不可修改，二是防止在修改代码的过程中无意中修改了该变量导致报错，减少 bug 的产生</p>\n</blockquote>\n<h3 id=\"5-map和foreach的区别\"><a class=\"anchor\" href=\"#5-map和foreach的区别\">#</a> 5、map 和 forEach 的区别</h3>\n<p><strong>相同点</strong></p>\n<blockquote>\n<p>都是循环遍历数组中的每一项 forEach 和 map 方法里每次执行匿名函数都支持 3 个参数，参数分别是 item（当前每一项）、index（索引值）、arr（原数组），需要用哪个的时候就写哪个 匿名函数中的 this 都是指向 window 只能遍历数组</p>\n<p>注意：forEach 对于空数组是不会调用回调函数的。</p>\n</blockquote>\n<p><strong>不同点</strong></p>\n<blockquote>\n<p>map 方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。(原数组进行处理之后对应的一个新的数组。) map () 方法不会改变原始数组 map () 方法不会对空数组进行检测 forEach () 方法用于调用数组的每个元素，将元素传给回调函数.(没有 return，返回值是 undefined）</p>\n</blockquote>\n<h3 id=\"6-promise的解释\"><a class=\"anchor\" href=\"#6-promise的解释\">#</a> 6、promise 的解释</h3>\n<blockquote>\n<p>1、Promise 是异步编程的一种解决方案，主要用于异步计算，支持链式调用，可以解决回调地狱 的问题，自己身上有 all、reject、resolve、race 等方法，原型上有 then、catch 等方法。</p>\n<p>2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果，可以在对象之间传递和操作 promise，帮助我们处理队列</p>\n<p>3、promise 有三个状态：pending [待定] 初始状态，fulfilled [实现] 操作成功，rejected [被否决] 操作失败</p>\n<p>4、Promise 对象状态改变：从 pending 变为 fulfilled 和从 pending 变为 rejected。只要这两种情况发生，状态就凝固了，不会再变了</p>\n<p>5、如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部，但是写了 then 和 catch ，会被 then 的第二个参数 或 catch 所捕获</p>\n</blockquote>\n<p><strong>promise 的 then 为什么可以支持链式调用</strong></p>\n<blockquote>\n<p>promise 的 then 会返回一个新的 promise 对象，能保证 then 方 可以进行链式调用</p>\n</blockquote>\n<p><strong>async、await 的原理</strong></p>\n<blockquote>\n<p>Async 和 await 是一种同步的写法，但还是异步的操作，两个必须配合一起使用</p>\n<p>函数前面的 async 关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个 Promise 对象。</p>\n<p>await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西，如果是 promise 则会等待 promaise 返回结果，接普通函数直接进行链式调用.</p>\n<p>await 能够获取 promise 执行的结果 await 必须和 async 一起使用才行，async 配合 await 使用是一个阻塞的异步方法</p>\n<p>如果 await 后面不是 Promise 对象，就直接返回对应的值，只能在 async 函数中出现，普通函数直接使用会报错</p>\n<p>await 语句后的 Promise 对象变成 reject 状态时，那么整个 async 函数会中断，后面的程序不会继续执行</p>\n</blockquote>\n<p><strong>使用场景</strong></p>\n<blockquote>\n<p>我在项目中： 需求：执行第一步，将执行第一步的结果返回给第二步使用。在 ajax 中先拿到一个接口的返回数据，然后使用第一步返回的数据执行第 二步操作的接口调用，达到异步操作。</p>\n</blockquote>\n<h3 id=\"7-解构赋值\"><a class=\"anchor\" href=\"#7-解构赋值\">#</a> 7、解构赋值</h3>\n<blockquote>\n<p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值</p>\n<p>常见的几种方式有</p>\n<p>1. 默认值</p>\n<p>2. 交换变量</p>\n<p>3. 将剩余数组赋给一个变量</p>\n<p>结构数组和对象字符串区别</p>\n<p>对象的解构与数组类似，但有所不同。数组的元素是按次序排列的，变量的取值由它的位置决定；</p>\n<p>而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。字符串也是可以解构赋值的。字符串被转换成了一个类似数组的对象.</p>\n<p>我在项目中：就是从目标对象或数组中提取自己想要的变量。最常用的场景是：element-ui,vant-ui 按需引入，请求接口返回数据，提取想要数据。</p>\n</blockquote>\n<h3 id=\"8-forin-迭代和-forof-有什么区别\"><a class=\"anchor\" href=\"#8-forin-迭代和-forof-有什么区别\">#</a> 8、 for...in 迭代和 for...of 有什么区别</h3>\n<blockquote>\n<p>1、 推荐在循环对象属性的时候，使用 for...in, 在遍历数组的时候的时候使用 for...of。</p>\n<p>2、 for in 遍历的是数组的索引，而 for of 遍历的是数组元素值</p>\n<p>3、for...of 不能循环普通的对象，需要通过和 Object.keys () 搭配使用</p>\n<p>5、从遍历对象的角度来说，for・・・in 会遍历出来的为对象的 key，但 for・・・of 会直接报错。</p>\n<p>6、for in 应用于数组循环返回的是数组的下标和数组的属性和原型上的方法和属性，而 for in 应用于对象循环返回的是对象的属性名和原型中的方法和属性。</p>\n<p>使用 for in 也可以遍历数组，但是会存在以下问题：</p>\n<p>1.index 索引为字符串型数字，不能直接进行几何运算</p>\n<p>2. 遍历顺序有可能不是按照实际数组的内部顺序</p>\n<p>3. 使用 for in 会遍历数组所有的可枚举属性，包括原型。例如上栗的原型方法 method 和 name 属性</p>\n</blockquote>\n<h3 id=\"9-generator-有了解过吗\"><a class=\"anchor\" href=\"#9-generator-有了解过吗\">#</a> 9、 generator 有了解过吗？</h3>\n<p>不了解！！！！！！！！！！！！！！！！！！！！！！！！！！！！！md</p>\n<blockquote>\n<p>Generator 生成器 也是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同 function *（）{}</p>\n<p>Generator 函数是一个状态机，封装了多个内部状态，除了状态机，还是一个遍历器对象生成函数。</p>\n<p>Generator 是分段执行的，yield （又得）可暂停，next 方法可启动。每次返回的是 yield 后的表达式结果，这使得 Generator 函数非常适合将异步任务同步化</p>\n<p>Generator 并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署 Interator` 接口…）</p>\n<p>Generator 函数返回 Iterator 对象，因此我们还可以通过 for...of 进行遍历，原生对象没有遍历接口，通过 Generator 函数为它加上这个接口，就能使用 for...of 进行遍历了</p>\n</blockquote>\n<p><strong>promise、Generator、async/await 进行比较：</strong></p>\n<blockquote>\n<p>promise 和 async/await 是专门用于处理异步操作的<br />\n Generator 并不是为异步而设计出来的，它还有其他功能（对象迭代、控制输出、部署 Interator 接口…）<br />\npromise 编写代码相比 Generator、async 更为复杂化，且可读性也稍差<br />\n Generator、async 需要与 promise 对象搭配处理异步情况<br />\n async 实质是 Generator 的语法糖，相当于会自动执行 Generator 函数<br />\n async 使用上更为简洁，将异步代码以同步的形式进行编写，是处理异步编程的最终方案</p>\n</blockquote>\n<h3 id=\"10-js构造函数的静态成员和实例成员\"><a class=\"anchor\" href=\"#10-js构造函数的静态成员和实例成员\">#</a> 10、js 构造函数的静态成员和实例成员</h3>\n<blockquote>\n<p>js 的构造函数（在别的后台语言上叫做类）上可以添加一些成员，可以在构造函数内部的 this 上添加，可以在构造函数本身上添加，通过这两种方式添加的成员，就分别称为实例成员和静态成员</p>\n<p>实例成员：构造函数中 this 上添加的成员 静态成员：构造函数本身上添加的成员</p>\n<p>实例成员，只能由实例化的对象来访问 静态成员，只能由构造函数本身来访问 实例化对象的 proto 指向构造函数的 prototype 属性指向的对象，实例化的对象可以访问到它后者身上的成员</p>\n</blockquote>\n<p><strong>构造函数生成实例的执行过程：使用面向对象编程时，new 关键字做了什么？</strong></p>\n<blockquote>\n<ol>\n<li>新建了一个 Object 对象</li>\n<li>修改构造函数 this 的指向，是其指向新建的 Object 对象，并且执行构造函数</li>\n<li>为 Object 对象添加了一个<strong> proto</strong> 属性，是其指向构造函数的 prototype 属性</li>\n<li>将这个 Object 对象返回出去</li>\n</ol>\n</blockquote>\n<h3 id=\"11-set和map数据结构有哪些常用的属性和方法\"><a class=\"anchor\" href=\"#11-set和map数据结构有哪些常用的属性和方法\">#</a> 11、set 和 map 数据结构有哪些常用的属性和方法？</h3>\n<p><strong>set 数据的特点是数据是唯一的</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>增加元素 使用 add</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>是否含有某个元素 使用 has</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>查看长度 使用 size</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>删除元素 使用 <span class=\"token keyword\">delete</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>set2<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> 返回Set实例的成员总数。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>：添加某个值，返回 Set 结构本身。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>：删除某个值。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：清除所有成员，没有返回值。</pre></td></tr></table></figure><p><strong> <code>Set</code>  的不重复性</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>传入的数组中有重复项，会自动去重</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> set2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Set<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">的不重复性中，要注意</span><span class=\"token template-punctuation string\">`</span></span>引用数据类型和<span class=\"token number\">NaN</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>两个对象都是不一样的指针，所以没法去重</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'孙志豪'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'孙志豪'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>如果是两个对象是同一指针，则能去重</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'我们一样'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> set2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">!==</span> <span class=\"token number\">NaN</span>，<span class=\"token number\">NaN</span>是自身不等于自身的，但是在Set中他还是会被去重</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>map 数据结构</strong></p>\n<blockquote>\n<p><strong>Map <code>对比</code>  object <code>最大的好处就是，key不受</code> 类型限制</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定义map</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>新增键值对 使用 <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>判断map是否含有某个key 使用 <span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>获取map中某个key对应的value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>删除map中某个键值对 使用 <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>map1<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>定义map，也可传入键值对数组集合</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">const</span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'嘻嘻嘻'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Map (3) &#123; true => 1, 1 => 2, ' 哈哈 ' => ' 嘻嘻嘻 ' &#125;</span></pre></td></tr></table></figure><h3 id=\"12-proxy-的理解\"><a class=\"anchor\" href=\"#12-proxy-的理解\">#</a> 12、proxy 的理解</h3>\n<blockquote>\n<p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p>\n<p>Proxy 可以理解成，在目标对象之前架设一层 “拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来 “代理” 某些操作，可以译为 “代理器”。</p>\n</blockquote>\n<h3 id=\"13-es6中新的数据类型symbol\"><a class=\"anchor\" href=\"#13-es6中新的数据类型symbol\">#</a> 13、Es6 中新的数据类型 symbol</h3>\n<blockquote>\n<p>symbol 是 es6 加入的，是一个基本数据类型，它代表的是一个独一无二的值，SYMBOL 值是由 SYMBOL 函数生成，也就是说现在我们定义对象的属性名字可以是原有的字符串 也可以是 symbol 类型的，symbol 可以保证不与其他属性名冲突，减少了 bug 的产生，</p>\n<p>如果那 symbol 对比的话 就是会返回 false</p>\n<p>symbol 他是一个原始类型的值就，不可以使用 new 关键字，symbol 不是对象 没有迭代器的接口 不能去添加属性值，他是类似于字符串的一种类型</p>\n<p>symbol 不能用来四则运算，否则会报错，只能用显示的方式转为字符串</p>\n<p>symbol 参数里的 a 表示一种修饰符 对当前创建的 symbol 的一种修饰，作为区分 ，否则会混淆</p>\n</blockquote>\n<h3 id=\"14-iterator-iteration-遍历器的概念\"><a class=\"anchor\" href=\"#14-iterator-iteration-遍历器的概念\">#</a> 14、iterator == iteration （遍历器的概念）</h3>\n<blockquote>\n<p>遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作</p>\n<p>Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令 for...of 循环，Iterator 接口主要供 for...of 消费。</p>\n<p>其实 iteration == iterator 有三个作用：</p>\n<p>为各种数据结构，提供一个统一的、简便的访问接口；</p>\n<p>使得数据结构的成员能够按某种次序排列；</p>\n<p>主要供 for...of 消费</p>\n</blockquote>\n<h3 id=\"15-objectassign\"><a class=\"anchor\" href=\"#15-objectassign\">#</a> 15、Object.assign</h3>\n<blockquote>\n<p>Object.assign 可以实现对象的合并。它的语法是这样的： Object.assign (target, ...sources)</p>\n<p>Object.assign 会将 source 里面的可枚举属性复制到 target。如果和 target 的已有属性重名，则会覆盖。同时后续的 source 会覆盖前面的 source 的同名属性。</p>\n<p>Object.assign 复制的是属性值，如果属性值是一个引用类型，那么复制的其实是引用地址，就会存在引用共享的问题</p>\n<p>Array.from () 方法就是将一个类数组对象或者可遍历对象转换成一个真正的数组。</p>\n<p>那么什么是类数组对象呢？所谓类数组对象，最基本的要求就是具有 length 属性的对象。</p>\n</blockquote>\n<h3 id=\"16-谈谈你对模块化开发的理解\"><a class=\"anchor\" href=\"#16-谈谈你对模块化开发的理解\">#</a> 16、谈谈你对模块化开发的理解？</h3>\n<blockquote>\n<p>我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，所以并没有模块的概念 ，但随着程序越来越复杂，代码的模块化开发变得越来越重要。</p>\n<p>由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污 染，并且模块间没有联系。</p>\n<p>后面提出了对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所 有的所有的模块成员，外部代码可以修改内部属性的值。</p>\n<p>现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。</p>\n</blockquote>\n<h2 id=\"vue篇\"><a class=\"anchor\" href=\"#vue篇\">#</a> Vue 篇</h2>\n<h3 id=\"简单\"><a class=\"anchor\" href=\"#简单\">#</a> 简单</h3>\n<h4 id=\"1-mvc-和-mvvm-区别\"><a class=\"anchor\" href=\"#1-mvc-和-mvvm-区别\">#</a> 1 MVC 和 MVVM 区别</h4>\n<h5 id=\"mvc\"><a class=\"anchor\" href=\"#mvc\">#</a> MVC</h5>\n<p>MVC 全名是 Model View Controller，是模型 (model)－视图 (view)－控制器 (controller) 的缩写，一种软件设计典范</p>\n<ul>\n<li>Model（模型）：是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据</li>\n<li>View（视图）：是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的</li>\n<li>Controller（控制器）：是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/202205171711136.png\" alt=\"image-20220517171135997\" /></p>\n<p>MVC 的思想：一句话描述就是 Controller 负责将 Model 的数据用 View 显示出来，换句话说就是在 Controller 里面把 Model 的数据赋值给 View。</p>\n<h5 id=\"mvvm\"><a class=\"anchor\" href=\"#mvvm\">#</a> MVVM</h5>\n<p>MVVM 新增了 VM 类</p>\n<ul>\n<li>ViewModel 层：做了两件事达到了数据的双向绑定 一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/202205171709821.png\" alt=\"image-20220517170928688\" /></p>\n<p>MVVM 与 MVC 最大的区别就是：它实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（对应 Vue 数据驱动的思想）</p>\n<p>整体看来，MVVM 比 MVC 精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作 DOM 元素。因为在 MVVM 中，View 不知道 Model 的存在，Model 和 ViewModel 也观察不到 View，这种低耦合模式提高代码的可重用性</p>\n<blockquote>\n<p>注意：Vue 并没有完全遵循 MVVM 的思想 这一点官网自己也有说明</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>严格的 MVVM 要求 View 不能和 Model 直接通信，而 Vue 提供了 $refs 这个属性，让 Model 可以直接操作 View，违反了这一规定，所以说 Vue 没有完全遵循 MVVM。</li>\n</ul>\n</blockquote>\n<h4 id=\"2-为什么-data-是一个函数\"><a class=\"anchor\" href=\"#2-为什么-data-是一个函数\">#</a> 2 为什么 data 是一个函数</h4>\n<p>组件中的 data 写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的 data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份 data，就会造成一个变了全都会变的结果</p>\n<h4 id=\"3-vue-组件通讯有哪几种方式\"><a class=\"anchor\" href=\"#3-vue-组件通讯有哪几种方式\">#</a> 3 Vue 组件通讯有哪几种方式</h4>\n<p>1.props 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mtext>父组件向子组件传递数据是通过</mtext><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mtext>传递的，子组件传递数据给父组件是通过</mtext></mrow><annotation encoding=\"application/x-tex\">emit 父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">父</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">向</span><span class=\"mord cjk_fallback\">子</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">递</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">递</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">子</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">递</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord cjk_fallback\">父</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">件</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">过</span></span></span></span> emit 触发事件来做到的</p>\n<p>2.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">parent,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mpunct\">,</span></span></span></span>children 获取当前组件的父组件和当前组件的子组件</p>\n<p>3.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>s</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">attrs 和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">和</span></span></span></span> listeners A-&gt;B-&gt;C。Vue 2.4 开始提供了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>t</mi><mi>t</mi><mi>r</mi><mi>s</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">attrs 和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">和</span></span></span></span> listeners 来解决这个问题</p>\n<p>4. 父组件中通过 provide 来提供变量，然后在子组件中通过 inject 来注入变量。(官方不推荐在实际业务中使用，但是写组件库时很常用)</p>\n<p>5.$refs 获取组件实例</p>\n<p>6.eventBus 兄弟组件数据传递 这种情况下可以使用事件总线的方式</p>\n<p>7.vuex 状态管理</p>\n<h4 id=\"4-vue-的生命周期方法有哪些-一般在哪一步发请求\"><a class=\"anchor\" href=\"#4-vue-的生命周期方法有哪些-一般在哪一步发请求\">#</a> 4 Vue 的生命周期方法有哪些 一般在哪一步发请求</h4>\n<p><strong>beforeCreate</strong> 在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问</p>\n<p><strong>created</strong> 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算， watch/event 事件回调。这里没有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>l</mi><mo separator=\"true\">,</mo><mtext>如果非要想与</mtext><mi>D</mi><mi>o</mi><mi>m</mi><mtext>进行交互，可以通过</mtext><mi>v</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">el,如果非要想与 Dom 进行交互，可以通过 vm.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">如</span><span class=\"mord cjk_fallback\">果</span><span class=\"mord cjk_fallback\">非</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">想</span><span class=\"mord cjk_fallback\">与</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">m</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">交</span><span class=\"mord cjk_fallback\">互</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span>nextTick 来访问 Dom</p>\n<p><strong>beforeMount</strong> 在挂载开始之前被调用：相关的 render 函数首次被调用。</p>\n<p><strong>mounted</strong> 在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点</p>\n<p><strong>beforeUpdate</strong> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁（patch）之前。可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程</p>\n<p><strong>updated</strong> 发生在更新完成之后，当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新，该钩子在服务器端渲染期间不被调用。</p>\n<p><strong>beforeDestroy</strong> 实例销毁之前调用。在这一步，实例仍然完全可用。我们可以在这时进行善后收尾工作，比如清除计时器。</p>\n<p><strong>destroyed</strong> Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</p>\n<p><strong>activated</strong> keep-alive 专属，组件被激活时调用</p>\n<p><strong>deactivated</strong> keep-alive 专属，组件被销毁时调用</p>\n<blockquote>\n<p>异步请求在哪一步发起？</p>\n</blockquote>\n<p>可以在钩子函数 created、beforeMount、mounted 中进行异步请求，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。</p>\n<p>如果异步请求不需要依赖 Dom 推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：</p>\n<ul>\n<li>能更快获取到服务端数据，减少页面  loading 时间；</li>\n<li>ssr  不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li>\n</ul>\n<blockquote>\n<p>注意：</p>\n<p>在 vue3 里面没有了<strong> beforeCreate</strong> 和<strong> created</strong>，用<strong> setup</strong> 来代替，而且<strong> setup</strong> 的执行时间比<strong> beforeCreate</strong> 好早，而且取不到 this， 其他的变成 onMounted 等格式，加了个 on，然后</p>\n</blockquote>\n<h4 id=\"5-v-if-和-v-show-的区别\"><a class=\"anchor\" href=\"#5-v-if-和-v-show-的区别\">#</a> 5 v-if 和 v-show 的区别</h4>\n<p>v-if 在编译过程中会被转化成三元表达式，条件不满足时不渲染此节点。</p>\n<p>v-show 会被编译成指令，条件不满足时控制样式将对应节点隐藏 （display:none）</p>\n<p><strong>使用场景</strong></p>\n<p>v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景</p>\n<p>v-show 适用于需要非常频繁切换条件的场景</p>\n<blockquote>\n<p>扩展补充：display:none、visibility:hidden 和 opacity:0 之间的区别？</p>\n</blockquote>\n<p>三者共同点都是隐藏。不同点：</p>\n<p>一、是否占据空间</p>\n<p>display:none, 隐藏之后不占位置；visibility:hidden、opacity:0, 隐藏后占据位置</p>\n<p>二、子元素是否继承</p>\n<p>display:none--- 不会被子元素继承，父元素不存在了，子元素也会不存在</p>\n<p>visibility:hidden--- 会被子元素继承，通过设置子元素 visibility:visible 来显示子元素</p>\n<p>opacity:0--- 会被子元素继承，但是不能通过设置子元素 opacity:1 来重新显示</p>\n<p>四、过渡动画</p>\n<p>transition 对于 display 是无效的</p>\n<p>transition 对于 visibility 是无效的</p>\n<p>transition 对于 opacity 是有效的</p>\n<h4 id=\"6-说说-vue-内置指令\"><a class=\"anchor\" href=\"#6-说说-vue-内置指令\">#</a> 6 说说 vue 内置指令</h4>\n<h5 id=\"vue常用修饰以及常见指令\"><a class=\"anchor\" href=\"#vue常用修饰以及常见指令\">#</a> vue 常用修饰以及常见指令</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修饰符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>stop  阻止事件冒泡</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span>cpture 设置事件捕获</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>self  只有当事件作用在元素本身才会触发</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span>prevent 阻止默认事件，比如超链接跳转</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span>once 事件只能触发一次</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span>native 触发js原生的事件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span>number 把文本框的内容转换为数字</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span>trim  去除文本框左右空格</pre></td></tr></table></figure><h5 id=\"常见指令\"><a class=\"anchor\" href=\"#常见指令\">#</a> 常见指令</h5>\n<pre><code>⑴v-bind：给元素绑定属性\n⑵v-on：给元素绑定事件\n⑶v-html：给元素绑定数据，且该指令可以解析 html 标签\n⑷v-text：给元素绑定数据，不解析标签\n⑸v-model：数据双向绑定\n⑹v-for：遍历数组\n⑺v-if：条件渲染指令，动态在 DOM 内添加或删除 DOM 元素\n⑻v-else：条件渲染指令，必须跟 v-if 成对使用\n⑼v-else-if：判断多层条件，必须跟 v-if 成对使用\n⑽v-cloak：解决插值闪烁问题\n⑾v-once：只渲染元素或组件一次\n⑿v-pre：跳过这个元素以及子元素的编译过程，以此来加快整个项目的编译速度\n⒀v-show：条件渲染指令，将不符合条件的数据隐藏(display:none)\n</code></pre>\n<h4 id=\"7-怎样理解-vue-的单向数据流\"><a class=\"anchor\" href=\"#7-怎样理解-vue-的单向数据流\">#</a> 7 怎样理解 Vue 的单向数据流</h4>\n<p>数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>\n<blockquote>\n<p>注意：在子组件直接用 v-model 绑定父组件传过来的 prop 这样是不规范的写法 开发环境会报警告</p>\n</blockquote>\n<p>如果实在要改变父组件的 prop 值 可以再 data 里面定义一个变量 并用 prop 的值初始化它 之后用 $emit 通知父组件去修改</p>\n<h4 id=\"8-computed-和-watch-的区别和运用的场景\"><a class=\"anchor\" href=\"#8-computed-和-watch-的区别和运用的场景\">#</a> 8 computed 和 watch 的区别和运用的场景</h4>\n<p>computed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容，它可以设置 getter 和 setter。</p>\n<p>watch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</p>\n<p>计算属性一般用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑</p>\n<h3 id=\"中等\"><a class=\"anchor\" href=\"#中等\">#</a> 中等</h3>\n<h4 id=\"9-v-if-与-v-for-为什么不建议一起使用\"><a class=\"anchor\" href=\"#9-v-if-与-v-for-为什么不建议一起使用\">#</a> 9 v-if 与 v-for 为什么不建议一起使用</h4>\n<p>1. 当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费<br />\n 2. 这种场景建议使用 computed，先对数据进行过滤</p>\n<blockquote>\n<p>注意：（官方文档有写）</p>\n<p>Vue2.0 是 v-for 的优先级高于 v-if</p>\n<p>Vue3.0 是 v-if 的优先级高于 v-for</p>\n</blockquote>\n<h4 id=\"10-vue20-响应式数据的原理\"><a class=\"anchor\" href=\"#10-vue20-响应式数据的原理\">#</a> 10 Vue2.0 响应式数据的原理</h4>\n<p>整体思路是数据劫持 + 观察者模式</p>\n<p>对象内部通过 defineReactive 方法，使用 Object.defineProperty 将属性进行劫持（只会劫持已经存在的属性），数组则是通过重写数组方法来实现。当页面使用对应属性时，每个属性都拥有自己的 dep 属性，存放他所依赖的 watcher（依赖收集），当属性变化后会通知自己对应的 watcher 去更新 (派发更新)。</p>\n<blockquote>\n<p>Vue 主要通过以下 4 个步骤来实现数据双向绑定的：</p>\n<p>实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty () 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。</p>\n<p>实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</p>\n<p>实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。</p>\n<p>实现一个订阅器 Dep：订阅器采用 发布 - 订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</p>\n<p>总结：</p>\n<p>每一个数据都会被 Observer 改造成响应式的，这个响应式的数据就是发布者，每一个数据对应有一个自己的 dep</p>\n<p>读数据时，触发 get，调用 dep 的 depend 方法添加所有 watcher（订阅，是调用了 watcher 的 addDep 方法）</p>\n<p>改数据时，触发 set，调用 dep 的 notify 方法通知所有 watcher（订阅者）执行更新。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 观测值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 对象上的所有属性依次进行观测</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// Object.defineProperty 数据劫持核心 兼容性在 ie9 以及以上</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 递归关键</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">//-- 如果 value 还是一个对象会继续走一遍 defineReactive 层层遍历一直到 value 不是对象才停止</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//   思考？如果 Vue 数据嵌套层级过深 >> 性能会受影响</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token comment\">// 需要做依赖收集过程 这里代码没写出来</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newValue <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"设置值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// 需要做派发更新过程 这里代码没写出来</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// 如果传过来的是对象或者数组 进行属性劫持</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"[object Object]\"</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"11-vue20-如何检测数组变化\"><a class=\"anchor\" href=\"#11-vue20-如何检测数组变化\">#</a> 11 Vue2.0 如何检测数组变化</h4>\n<p>数组考虑性能原因没有用 defineProperty 对数组的每一项进行拦截，而是选择对 7 种数组（push,shift,pop,splice,unshift,sort,reverse）方法进行重写 (AOP 切片思想)</p>\n<p>所以在 Vue 中修改数组的索引和长度是无法监控到的。需要通过以上 7 种变异方法修改数组才会触发数组对应的 watcher 进行更新</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/obserber/array.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 先保留数组原型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> arrayProto <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 然后将 arrayMethods 继承自数组原型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这里是面向切片编程思想（AOP）-- 不破坏封装的前提下，动态的扩展功能</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> arrayMethods <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>arrayProto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> methodsToPatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token string\">\"push\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token string\">\"pop\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token string\">\"shift\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token string\">\"unshift\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token string\">\"splice\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token string\">\"reverse\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>methodsToPatch<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  arrayMethods<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//   这里保留原型方法的执行结果</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> arrayProto<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 这句话是关键</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//this 代表的就是数据本身 比如数据是 &#123;a:[1,2,3]&#125; 那么我们使用 a.push (4)  this 就是 a  ob 就是 a.__ob__ 这个属性就是上段代码增加的 代表的是该数据已经被响应式观察过了指向 Observer 实例</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> ob <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__ob__<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 这里的标志就是代表数组有新增操作</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">let</span> inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">\"push\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">\"unshift\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        inserted <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token string\">\"splice\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        inserted <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 如果有新增的元素 inserted 是一个数组 调用 Observer 实例的 observeArray 对数组每一项进行观测</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inserted<span class=\"token punctuation\">)</span> ob<span class=\"token punctuation\">.</span><span class=\"token function\">observeArray</span><span class=\"token punctuation\">(</span>inserted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 之后咱们还可以在这里检测到数组改变了之后从而触发视图更新的操作 -- 后续源码会揭晓</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"12-vue30-用过吗-了解多少\"><a class=\"anchor\" href=\"#12-vue30-用过吗-了解多少\">#</a> 12 vue3.0 用过吗 了解多少</h4>\n<ul>\n<li>响应式原理的改变 Vue3.x 使用 Proxy 取代 Vue2.x 版本的 Object.defineProperty</li>\n<li>组件选项声明方式 Vue3.x 使用 Composition API setup 是 Vue3.x 新增的一个选项， 他是组件内使用 Composition API 的入口。</li>\n<li>模板语法变化 slot 具名插槽语法 自定义指令 v-model 升级</li>\n<li>其它方面的更改 Suspense 支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。 基于 treeshaking 优化，提供了更多的内置功能。</li>\n</ul>\n<h4 id=\"13-vue30-和-20-的响应式原理区别\"><a class=\"anchor\" href=\"#13-vue30-和-20-的响应式原理区别\">#</a> 13 Vue3.0 和 2.0 的响应式原理区别</h4>\n<p>Vue3.x 改用 Proxy 替代 Object.defineProperty。因为 Proxy 可以直接监听对象和数组的变化，并且有多达 13 种拦截方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mutableHandlers <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./baseHandlers\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代理相关逻辑</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> isObject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./util\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工具方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 根据不同参数创建不同响应式对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">createReactiveObject</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> mutableHandlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createReactiveObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> baseHandler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> observed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> baseHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> observed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> get <span class=\"token operator\">=</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createGetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 对获取的值进行放射</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"属性获取\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token comment\">// 如果获取的值是对象类型，则返回当前对象的代理对象</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createSetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">const</span> hadKey <span class=\"token operator\">=</span> <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hadKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"属性新增\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"属性值被修改\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mutableHandlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  get<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 当获取属性时调用此方法</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  set<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 当修改属性时调用此方法</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"14-vue-的父子组件生命周期钩子函数执行顺序\"><a class=\"anchor\" href=\"#14-vue-的父子组件生命周期钩子函数执行顺序\">#</a> 14 Vue 的父子组件生命周期钩子函数执行顺序</h4>\n<blockquote>\n<p><strong>父子子父规律</strong></p>\n</blockquote>\n<ul>\n<li>加载渲染过程</li>\n</ul>\n<p>父 beforeCreate-&gt; 父 created-&gt; 父 beforeMount-&gt; 子 beforeCreate-&gt; 子 created-&gt; 子 beforeMount-&gt; 子 mounted-&gt; 父 mounted</p>\n<ul>\n<li>子组件更新过程</li>\n</ul>\n<p>父 beforeUpdate-&gt; 子 beforeUpdate-&gt; 子 updated-&gt; 父 updated</p>\n<ul>\n<li>父组件更新过程</li>\n</ul>\n<p>父 beforeUpdate-&gt; 父 updated</p>\n<ul>\n<li>销毁过程</li>\n</ul>\n<p>父 beforeDestroy-&gt; 子 beforeDestroy-&gt; 子 destroyed-&gt; 父 destroyed</p>\n<h4 id=\"15-虚拟-dom-是什么-有什么优缺点\"><a class=\"anchor\" href=\"#15-虚拟-dom-是什么-有什么优缺点\">#</a> 15 虚拟 DOM 是什么 有什么优缺点</h4>\n<p>由于在浏览器中操作 DOM 是很昂贵的。频繁的操作 DOM，会产生一定的性能问题。这就是虚拟 Dom 的产生原因。Vue2 的 Virtual DOM 借鉴了开源库 snabbdom 的实现。Virtual DOM 本质就是用一个原生的 JS 对象去描述一个 DOM 节点，是对真实 DOM 的一层抽象。</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li>保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</li>\n<li>无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li>\n<li>跨平台： 虚拟 DOM 本质上是 JavaScript 对象，而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</li>\n</ol>\n<p><strong>缺点:</strong></p>\n<ol>\n<li>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</li>\n<li>首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢。</li>\n</ol>\n<h4 id=\"16-v-model-原理\"><a class=\"anchor\" href=\"#16-v-model-原理\">#</a> 16 v-model 原理</h4>\n<p>v-model 只是语法糖而已</p>\n<p>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>\n<ul>\n<li>text 和 textarea 元素使用 value property 和 input 事件；</li>\n<li>checkbox 和 radio 使用 checked property 和 change 事件；</li>\n<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>\n</ul>\n<p>在普通标签上</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"sth\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>  <span class=\"token comment\">// 这一行等于下一行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>input v<span class=\"token operator\">-</span>bind<span class=\"token operator\">:</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"sth\"</span> v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>input<span class=\"token operator\">=</span><span class=\"token string\">\"sth = $event.target.value\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>在组件上</p>\n<pre><code class=\"language-vue\">&lt;currency-input v-model=&quot;price&quot;&gt;&lt;/currentcy-input&gt;\n&lt;!--上行代码是下行的语法糖\n &lt;currency-input :value=&quot;price&quot; @input=&quot;price = arguments[0]&quot;&gt;&lt;/currency-input&gt;\n--&gt;\n\n&lt;!-- 子组件定义 --&gt;\nVue.component('currency-input', &#123;\n template: `\n  &lt;span&gt;\n   &lt;input\n    ref=&quot;input&quot;\n    :value=&quot;value&quot;\n    @input=&quot;$emit('input', $event.target.value)&quot;\n   &gt;\n  &lt;/span&gt;\n `,\n props: ['value'],\n&#125;)\n</code></pre>\n<h4 id=\"17-v-for-为什么要加-key\"><a class=\"anchor\" href=\"#17-v-for-为什么要加-key\">#</a> 17 v-for 为什么要加 key</h4>\n<p>如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改 / 复用相同类型元素的算法。key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>\n<blockquote>\n<p>key 是给每一个 vnode 的唯一 id，也是 diff 的一种优化策略，可以根据 key，更准确， 更快的找到对应的 vnode 节点，更高效的对比虚拟 DOM 中每个节点是否是相同节点，相同就复用，不相同就删除旧的创建新的</p>\n</blockquote>\n<p><strong>更准确</strong>：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。</p>\n<p><strong>更快速</strong>：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 判断两个 vnode 的标签和 key 是否相同 如果相同 就可以认为是同一节点就地复用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isSameVnode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVnode<span class=\"token punctuation\">,</span> newVnode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> oldVnode<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> newVnode<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">&amp;&amp;</span> oldVnode<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> newVnode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 根据 key 来创建老的儿子的 index 映射表  类似 &#123;'a':0,'b':1&#125; 代表 key 为 'a' 的节点在第一个位置 key 为 'b' 的节点在第二个位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">makeIndexByKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    map<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 生成的映射表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token function\">makeIndexByKey</span><span class=\"token punctuation\">(</span>oldCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"18-vue-事件绑定原理\"><a class=\"anchor\" href=\"#18-vue-事件绑定原理\">#</a> 18 Vue 事件绑定原理</h4>\n<p>原生事件绑定是通过 addEventListener 绑定给真实元素的，组件事件绑定是通过 Vue 自定义的 $on 实现的。如果要在组件上使用原生事件，需要加.native 修饰符，这样就相当于在父组件中把子组件当做普通 html 标签，然后加上原生事件。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>n</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">on、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord cjk_fallback\">、</span></span></span></span>emit 是基于发布订阅模式的，维护一个事件中心，on 的时候将事件按名称存在事件中心里，称之为订阅者，然后 emit 将对应的事件进行发布，去执行事件中心里的对应的监听器</p>\n<h4 id=\"19-vue-router-路由钩子函数是什么-执行顺序是什么\"><a class=\"anchor\" href=\"#19-vue-router-路由钩子函数是什么-执行顺序是什么\">#</a> 19 vue-router 路由钩子函数是什么 执行顺序是什么</h4>\n<p>路由钩子的执行流程，钩子函数种类有：全局守卫、路由守卫、组件守卫</p>\n<p><strong>完整的导航解析流程:</strong></p>\n<ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用 beforeRouteLeave 守卫。</li>\n<li>调用全局的 beforeEach 守卫。</li>\n<li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li>\n<li>在路由配置里调用 beforeEnter。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 beforeRouteEnter。</li>\n<li>调用全局的 beforeResolve 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 afterEach 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li>\n</ol>\n<h4 id=\"20-vue-router-动态路由是什么-有什么问题\"><a class=\"anchor\" href=\"#20-vue-router-动态路由是什么-有什么问题\">#</a> 20 vue-router 动态路由是什么 有什么问题</h4>\n<p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用 “动态路径参数”(dynamic segment) 来达到这个效果：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div>User&lt;/div>\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 动态路径参数 以冒号开头</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/user/:id\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> User <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>问题:vue-router 组件复用导致路由参数失效怎么办？</p>\n</blockquote>\n<p>解决方法：</p>\n<p>1. 通过 watch 监听路由参数再发请求</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 通过 watch 来监听路由变化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token string-property property\">\"$route\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 用 :key 来阻止 “复用”</p>\n<pre><code class=\"language-vue\">&lt;router-view :key=&quot;$route.fullPath&quot; /&gt;\n</code></pre>\n<h4 id=\"21-谈一下对-vuex-的个人理解\"><a class=\"anchor\" href=\"#21-谈一下对-vuex-的个人理解\">#</a> 21 谈一下对 vuex 的个人理解</h4>\n<p>vuex 是专门为 vue 提供的全局状态管理系统，用于多个组件中数据共享、数据缓存等。（无法持久化、内部核心原理是通过创造一个全局实例 new Vue）</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/202205172111839.png\" alt=\"image-20220517211103714\" /></p>\n<p>主要包括以下几个模块：</p>\n<ul>\n<li>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li>\n<li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li>\n<li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li>\n<li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li>\n<li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li>\n</ul>\n<h4 id=\"22-vuex-页面刷新数据丢失怎么解决\"><a class=\"anchor\" href=\"#22-vuex-页面刷新数据丢失怎么解决\">#</a> 22 Vuex 页面刷新数据丢失怎么解决</h4>\n<p>需要做 vuex 数据持久化 一般使用本地存储的方案来保存数据 可以自己设计存储方案 也可以使用第三方插件</p>\n<p>推荐使用 vuex-persist 插件，它就是为 Vuex 持久化存储而生的一个插件。不需要你手动存取 storage ，而是直接将状态保存至 cookie 或者 localStorage 中</p>\n<h4 id=\"23-vuex-为什么要分模块并且加命名空间\"><a class=\"anchor\" href=\"#23-vuex-为什么要分模块并且加命名空间\">#</a> 23 Vuex 为什么要分模块并且加命名空间</h4>\n<p><strong>模块</strong>：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。</p>\n<p><strong>命名空间</strong>：默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的 —— 这样使得多个模块能够对同一 mutation 或 action 作出响应。如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。</p>\n<h4 id=\"24-使用过-vue-ssr-吗说说-ssr\"><a class=\"anchor\" href=\"#24-使用过-vue-ssr-吗说说-ssr\">#</a> 24 使用过 Vue SSR 吗？说说 SSR</h4>\n<p>SSR 也就是服务端渲染，也就是将 Vue 在客户端把标签渲染成 HTML 的工作放在服务端完成，然后再把 html 直接返回给客户端。</p>\n<p><strong>优点：</strong></p>\n<p>SSR 有着更好的 SEO、并且首屏加载速度更快</p>\n<p><strong>缺点：</strong> 开发条件会受到限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境。</p>\n<p>服务器会有更大的负载需求</p>\n<h4 id=\"25-vue-中使用了哪些设计模式\"><a class=\"anchor\" href=\"#25-vue-中使用了哪些设计模式\">#</a> 25 vue 中使用了哪些设计模式</h4>\n<p>1. 工厂模式 - 传入参数即可创建实例</p>\n<p>虚拟 DOM 根据参数的不同返回基础标签的 Vnode 和组件 Vnode</p>\n<p>2. 单例模式 - 整个程序有且仅有一个实例</p>\n<p>vuex 和 vue-router 的插件注册方法 install 判断如果系统存在实例就直接返回掉</p>\n<p>3. 发布 - 订阅模式 (vue 事件机制)</p>\n<p>4. 观察者模式 (响应式数据原理)</p>\n<p>5. 装饰模式: (@装饰器的用法)</p>\n<p>6. 策略模式 策略模式指对象有某个行为，但是在不同的场景中，该行为有不同的实现方案 - 比如选项的合并策略</p>\n<h4 id=\"26-你都做过哪些-vue-的性能优化\"><a class=\"anchor\" href=\"#26-你都做过哪些-vue-的性能优化\">#</a> 26 你都做过哪些 Vue 的性能优化</h4>\n<blockquote>\n<p>这里只列举针对 Vue 的性能优化 整个项目的性能优化是一个大工程 可以另写一篇性能优化的文章 哈哈</p>\n</blockquote>\n<ul>\n<li>对象层级不要过深，否则性能就会差</li>\n<li>不需要响应式的数据不要放到 data 中（可以用 Object.freeze () 冻结数据）</li>\n<li>v-if 和 v-show 区分使用场景</li>\n<li>computed 和 watch 区分使用场景</li>\n<li>v-for 遍历必须加 key，key 最好是 id 值，且避免同时使用 v-if</li>\n<li>大数据列表和表格性能优化 - 虚拟列表 / 虚拟表格</li>\n<li>防止内部泄漏，组件销毁后把全局变量和事件销毁</li>\n<li>图片懒加载</li>\n<li>路由懒加载</li>\n<li>第三方插件的按需引入</li>\n<li>适当采用 keep-alive 缓存组件</li>\n<li>防抖、节流运用</li>\n<li>服务端渲染 SSR or 预渲染</li>\n</ul>\n<h3 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h3>\n<h4 id=\"1-说说你对-spa-单页面的理解它的优缺点分别是什么\"><a class=\"anchor\" href=\"#1-说说你对-spa-单页面的理解它的优缺点分别是什么\">#</a> 1 说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h4>\n<p>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li>\n<li>基于上面一点，SPA 相对对服务器压力小；</li>\n<li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li>\n<li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li>\n<li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li>\n</ul>\n<h4 id=\"2-直接给一个数组项赋值vue-能检测到变化吗\"><a class=\"anchor\" href=\"#2-直接给一个数组项赋值vue-能检测到变化吗\">#</a> 2 直接给一个数组项赋值，Vue 能检测到变化吗？</h4>\n<p>由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：</p>\n<ul>\n<li>当你利用索引直接设置一个数组项时，例如： <code>vm.items[indexOfItem] = newValue</code></li>\n<li>当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></li>\n</ul>\n<p>为了解决第一个问题，Vue 提供了以下操作方法：</p>\n<pre><code class=\"language-vue\">// Vue.set\nVue.set(vm.items, indexOfItem, newValue)\n// vm.$set，Vue.set的一个别名\nvm.$set(vm.items, indexOfItem, newValue)\n// Array.prototype.splice\nvm.items.splice(indexOfItem, 1, newValue)\n</code></pre>\n<p>为了解决第二个问题，Vue 提供了以下操作方法：</p>\n<pre><code class=\"language-vue\">// Array.prototype.splice\nvm.items.splice(newLength)\n</code></pre>\n<h4 id=\"3-父组件可以监听到子组件的生命周期吗\"><a class=\"anchor\" href=\"#3-父组件可以监听到子组件的生命周期吗\">#</a> 3 父组件可以监听到子组件的生命周期吗？</h4>\n<p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，可以通过以下写法实现：</p>\n<pre><code class=\"language-vue\">// Parent.vue\n&lt;Child @mounted=&quot;doSomething&quot;/&gt;\n    \n// Child.vue\nmounted() &#123;\n  this.$emit(&quot;mounted&quot;);\n&#125;\n</code></pre>\n<p>以上需要手动通过 $emit 触发父组件的事件，更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可，如下所示：</p>\n<pre><code class=\"language-vue\">//  Parent.vue\n&lt;Child @hook:mounted=&quot;doSomething&quot; &gt;&lt;/Child&gt;\n\ndoSomething() &#123;\n   console.log('父组件监听到 mounted 钩子函数 ...');\n&#125;,\n    \n//  Child.vue\nmounted()&#123;\n   console.log('子组件触发 mounted 钩子函数 ...');\n&#125;,    \n    \n// 以上输出顺序为：\n// 子组件触发 mounted 钩子函数 ...\n// 父组件监听到 mounted 钩子函数 ...     \n</code></pre>\n<p>当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</p>\n<h4 id=\"4-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗\"><a class=\"anchor\" href=\"#4-能说下-vue-router-中常用的-hash-和-history-路由模式实现原理吗\">#</a> 4 能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？</h4>\n<p><strong>（1）hash 模式的实现原理</strong></p>\n<p>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 '#search'：</p>\n<pre><code>https://www.word.com#search\n</code></pre>\n<p>hash  路由模式的实现主要是基于下面几个特性：</p>\n<ul>\n<li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</li>\n<li>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制 hash 的切换；</li>\n<li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用  JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</li>\n<li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</li>\n</ul>\n<p><strong>（2）history 模式的实现原理</strong></p>\n<p>HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState () 和 history.repalceState ()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</p>\n<pre><code>window.history.pushState(null, null, path);\nwindow.history.replaceState(null, null, path);\n</code></pre>\n<p>history 路由模式的实现主要基于存在下面几个特性：</p>\n<ul>\n<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>\n<li>我们可以使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>\n<li>history.pushState () 或 history.replaceState () 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li>\n</ul>\n<h4 id=\"5-proxy-与-objectdefineproperty-优劣对比\"><a class=\"anchor\" href=\"#5-proxy-与-objectdefineproperty-优劣对比\">#</a> 5  Proxy 与 Object.defineProperty 优劣对比</h4>\n<p><strong>Proxy 的优势如下:</strong></p>\n<ul>\n<li>Proxy 可以直接监听对象而非属性；</li>\n<li>Proxy 可以直接监听数组的变化；</li>\n<li>Proxy 有多达 13 种拦截方法，不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>\n<li>Proxy 返回的是一个新对象，我们可以只操作新的对象达到目的，而 Object.defineProperty 只能遍历对象属性直接修改；</li>\n<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>\n</ul>\n<p><strong>Object.defineProperty 的优势如下:</strong></p>\n<ul>\n<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题，而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本 (3.0) 才能用 Proxy 重写。</li>\n</ul>\n<h4 id=\"6-虚拟-dom-实现原理\"><a class=\"anchor\" href=\"#6-虚拟-dom-实现原理\">#</a> 6、虚拟 DOM 实现原理？</h4>\n<p>虚拟 DOM，其实就是用对象的方式取代真实的 DOM 操作，把真实的 DOM 操作放在内存当中，在内存中的对象里做模拟操作。当页面打开时浏览器会解析 HTML 元素，构建一颗 DOM 树，将状态全部保存起来，在内存当中模拟我们真实的 DOM 操作，操作完后又会生成一颗 dom 树，两颗 DOM 树进行比较，根据 diff 算法比较两颗 DOM 树不同的地方，只渲染一次不同的地方。</p>\n<p>（个人理解）<strong>虚拟 dom 他不并不是真实的 dom ，是根据模板生成一个 js 对象（使用 createElement，方法），根据这个 js 对象再去生成真实的 dom，对复杂的文档 DOM 结构，提供一种方便的工具，进行最小化的 DOM 操作 ，是可以快速的渲染和高效的更新元素，提高浏览器的性能，</strong></p>\n<p>例如，一个 ul 标签下很多个 li 标签，其中只有一个 li 有变化，这种情况下如果使用新的 ul 去替代旧的 ul, 因为这些不必要的 DOM 操作而造成了性能上的浪费，但是如果直接使用虚拟节点覆盖旧节点的话，减少了很多的不必要的 DOM 操作。</p>\n<p>我们在渲染页面的时候 会对新的虚拟 dom 和旧的虚拟 dom 进行对比 只渲染不同的地方，而不再是像之前只要发生变化，全部的真实 dom 都要重新渲染，所以提高了渲染的效率。</p>\n<p>** 缺点：**<strong> 首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢</strong></p>\n<h4 id=\"7-vue模版编译原理\"><a class=\"anchor\" href=\"#7-vue模版编译原理\">#</a> 7 Vue 模版编译原理。</h4>\n<p>vue 中的模板 template 无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的 HTML 语法，所有需要将 template 转化成一个 JavaScript 函数，这样浏览器就可以执行这一个函数并渲染出对应的 HTML 元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。</p>\n<p>Vue 的编译过程就是将 template 转化为 render 函数的过程 分为以下三步</p>\n<p>第一步是将 模板字符串 转换成 element ASTs（解析器）</p>\n<p>第二步是对 AST 进行静态节点标记，主要用来做虚拟 DOM 的渲染优化（优化器）</p>\n<p>第三步是 使用 element ASTs 生成 render 函数代码字符串（代码生成器）</p>\n<h4 id=\"8-diff算法\"><a class=\"anchor\" href=\"#8-diff算法\">#</a> 8 <strong>diff 算法</strong></h4>\n<p><strong>diff 算法是一种通过同层的树节点进行比较的高效算法，比较方式：diff 整体策略为：深度优先，同层比较</strong></p>\n<p><strong>diff 算法</strong> 当 data 发生改变 会根据新的数据生成一个新的虚拟 dom ，新的虚拟 dom 和旧的虚拟 dom 进行对比，这个对比的过程就是 diff 算法，会找到不同地方，只去渲染不同的地方，总的来说就是减少 DOM，重绘和回流。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTE5Mzc2MDY0ODMzNjY3MDgw\">React、Vue2、Vue3 的三种 Diff 算法 - 掘金 (juejin.cn)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDgxODk5NjU3OTg2NTcyMzAx\">vue3 中的快速 diff 算法 - 掘金 (juejin.cn)</span></p>\n<h4 id=\"9-vue-中的-key-有什么作用\"><a class=\"anchor\" href=\"#9-vue-中的-key-有什么作用\">#</a> 9 Vue 中的 key 有什么作用？</h4>\n<p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。Vue 的 diff 过程可以概括为：oldCh 和 newCh 各有两个头尾的变量 oldStartIndex、oldEndIndex 和 newStartIndex、newEndIndex，它们会新节点和旧节点会进行两两对比，即一共有 4 种比较方式：newStartIndex 和 oldStartIndex 、newEndIndex 和 oldEndIndex 、newStartIndex 和 oldEndIndex 、newEndIndex 和 oldStartIndex，如果以上 4 种比较都没匹配，如果设置了 key，就会用 key 再进行比较，在比较的过程中，遍历会往中间靠，一旦 StartIdx &gt; EndIdx 表明 oldCh 和 newCh 至少有一个已经遍历完了，就会结束比较</p>\n<p>所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>\n<p><strong>更准确</strong>：因为带 key 就不是就地复用了，在 sameNode 函数  <code>a.key === b.key</code>  对比中可以避免就地复用的情况。所以会更加准确。</p>\n<p><strong>更快速</strong>：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快</p>\n<h4 id=\"10-说说你对-map-多页面的理解它的优缺点分别是什么\"><a class=\"anchor\" href=\"#10-说说你对-map-多页面的理解它的优缺点分别是什么\">#</a> 10 说说你对 MAP 多页面的理解，它的优缺点分别是什么？</h4>\n<p>MPA 多页面应用程序 指的就是有多个独立的 html 页面，每个页面必须重复加载 html js css 资源，多页面跳转需要整个页面资源刷新。</p>\n<p><strong>优点</strong><br />\n 1、首屏加载速度快<br />\n当我们访问页面的时候，服务器只返回了一个 html，页面就展示出来了，只发了一次 http 请求，所以页面显示非常快.<br />\n2、SEO 效果好<br />\n因为搜索引擎在做网站排名的时候，要根据网页的内容给网页排名，搜素引擎只可以识别 html 内容，多页面就是将内容放在 html 中，所以排名要好一点。</p>\n<p><strong>缺点</strong><br />\n因为每跳转一个页面都要发送一次 http 请求，如果网络情况不好的情况下，页面之间来回跳转就会发生明显的卡顿，有的时候半天还加载不出来，影响用户体验。</p>\n<p>转场动画也不好实现</p>\n<h4 id=\"11-请描述一下你对webpack的理解\"><a class=\"anchor\" href=\"#11-请描述一下你对webpack的理解\">#</a> 11 请描述一下你对 webpack 的理解？</h4>\n<p>Webpack Webpack 是一个项目打包工具</p>\n<p>可以压缩代码和图片，把浏览器识别不了的代码转化为能识别的，可以启动一个热加载服务器</p>\n<p><strong>配置跨域、路径别名、打包分析、cdn 映入、去掉 console.log、单独打包第三方模块、ie 兼容、eslint 规范、图片压缩</strong></p>\n<h4 id=\"12vue2对比vue3\"><a class=\"anchor\" href=\"#12vue2对比vue3\">#</a> 12.vue2 对比 vue3</h4>\n<p>最大的区别就是： Vue2 使用 选项类型 API（Options API） 对比 Vue3 合成型 API（Composition API）</p>\n<ol>\n<li>双向数据绑定原理发生了改变，使用 proxy 替换 Object.defineProerty, 使用 Proxy 的优势：</li>\n</ol>\n<ul>\n<li>可直接监听数组类型的数据变</li>\n<li>监听的目标为对象本身，不需要像 Object.defineProperty 一样遍历每个属性，有一定的性能提升</li>\n<li>可直接实现对象属性的新增 / 删除</li>\n</ul>\n<ol>\n<li>默认使用懒加载</li>\n</ol>\n<p>在 2.x 版本里。不管数据多大，都会在一开始就为其创建观察者，在数据很大时，就会造成性能的问题。在 3.x 中，只会对渲染出来的数据创建观察者，而且 3.x 的观察者更高效。</p>\n<p>3.0 新加入了 TypeScript 以及 PWA 支持</p>\n<p><strong>生命周期有了一定的区别</strong></p>\n<p>Vue2--------------vue3</p>\n<p>beforeCreate -&gt; setup () 开始创建组件之前，创建的是 data 和 method</p>\n<p>created -&gt; setup()</p>\n<p>beforeMount -&gt; onBeforeMount 组件挂载到节点上之前执行的函数。</p>\n<p>mounted -&gt; onMounted 组件挂载完成后执行的函数</p>\n<p>beforeUpdate -&gt; onBeforeUpdate 组件更新之前执行的函数。</p>\n<p>updated -&gt; onUpdated 组件更新完成之后执行的函数。</p>\n<p>beforeDestroy -&gt; onBeforeUnmount 组件挂载到节点上之前执行的函数。</p>\n<p>destroyed -&gt; onUnmounted 组件卸载之前执行的函数。</p>\n<p>activated -&gt; onActivated 组件卸载完成后执行的函数</p>\n<p>deactivated -&gt; onDeactivated</p>\n<h4 id=\"13-git命令\"><a class=\"anchor\" href=\"#13-git命令\">#</a> 13 git 命令</h4>\n<blockquote>\n<p>\\1. git init 初始化 git 仓库 (mac 中 Command+Shift+. 可以<strong>显示隐藏文件</strong>)</p>\n<p>\\2. git status 查看文件状态</p>\n<p>\\3. git add 文件列表 追踪文件</p>\n<p>\\4. git commit -m 提交信息 向仓库中提交代码</p>\n<p>\\5. git log 查看提交记录</p>\n<p><strong>1. 分支明细</strong></p>\n<p>（1）主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</p>\n<p>（2）开发分支（develop）：作为开发的分支，基于 master 分支创建。</p>\n<p>（3）功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</p>\n<p><strong>2. 分支命令</strong></p>\n<p>（1）git branch 查看分支</p>\n<p>（2）git branch 分支名称 创建分支</p>\n<p>（3）git checkout 分支名称 切换分支</p>\n<p>（4）git merge 来源分支 合并分支 (备注：必须在 master 分支上才能合并 develop 分支)</p>\n<p>（5）git branch -d 分支名称 删除分支（分支被合并后才允许删除）（-D 强制删除）</p>\n<p><strong>3. 暂时保存更改</strong></p>\n<p>（1）存储临时改动：git stash</p>\n<p>（2）恢复改动：git stash pop</p>\n</blockquote>\n<h4 id=\"14-数组扁平化转换\"><a class=\"anchor\" href=\"#14-数组扁平化转换\">#</a> 14 数组扁平化转换</h4>\n<p>在说到模版编译的时候，有可能会提到数组的转换，一般就用递归处理<br />\n将 [1,2,3,[4,5]] 转换成</p>\n<pre><code>&#123;\n    children:[\n        &#123;\n            value:1\n        &#125;,\n        &#123;\n            value:2\n        &#125;,\n        &#123;\n            value:3\n        &#125;,\n        &#123;\n            children:[\n                &#123;\n                    value:4\n                &#125;,\n                &#123;\n                    value:5\n                &#125;\n            ]\n        &#125;,\n    ]\n&#125;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组扁平化测试</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 输出 [1,2,3,4,5,6,7]</span></pre></td></tr></table></figure><h4 id=\"15-keep-alive的实现\"><a class=\"anchor\" href=\"#15-keep-alive的实现\">#</a> 15 keep-alive 的实现</h4>\n<p>keep-alive 是 Vue.js 的一个内置组件。它能够不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实 DOM 中，也不会出现在父组件链中。</p>\n<p>作用：实现组件缓存，保持这些组件的状态，以避免反复渲染导致的性能问题。 需要缓存组件 频繁切换，不需要重复渲染</p>\n<p>场景：tabs 标签页 后台导航，vue 性能优化</p>\n<p>原理： <code>Vue.js</code>  内部将 <code>DOM</code>  节点抽象成了一个个的 <code>VNode</code>  节点， <code>keep-alive</code>  组件的缓存也是基于 <code>VNode</code>  节点的而不是直接存储 <code>DOM</code>  结构。它将满足条件 <code>（pruneCache与pruneCache）</code> 的组件在 <code>cache</code>  对象中缓存起来，在需要重新渲染的时候再将 <code>vnode</code>  节点从 <code>cache</code>  对象中取出并渲染。</p>\n<h4 id=\"16-keep-alive-的属性\"><a class=\"anchor\" href=\"#16-keep-alive-的属性\">#</a> 16 keep-alive 的属性</h4>\n<p>它提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。</p>\n<p>include 定义缓存白名单，keep-alive 会缓存命中的组件；exclude 定义缓存黑名单，被命中的组件将不会被缓存；max 定义缓存组件上限，超出上限使用 LRU 的策略置换缓存数据。</p>\n<p>在动态组件中的应用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"whiteList\"</span> <span class=\"token operator\">:</span>exclude<span class=\"token operator\">=</span><span class=\"token string\">\"blackList\"</span> <span class=\"token operator\">:</span>max<span class=\"token operator\">=</span><span class=\"token string\">\"amount\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"currentComponent\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在 vue-router 中的应用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"whiteList\"</span> <span class=\"token operator\">:</span>exclude<span class=\"token operator\">=</span><span class=\"token string\">\"blackList\"</span> <span class=\"token operator\">:</span>max<span class=\"token operator\">=</span><span class=\"token string\">\"amount\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr></table></figure><p>vue 中完整示例</p>\n<pre><code>&lt;keep-alive&gt;\n    &lt;coma v-if=&quot;test&quot;&gt;&lt;/coma&gt;\n    &lt;comb v-else=&quot;test&quot;&gt;&lt;/comb&gt;\n&lt;/keep-alive&gt;\n&lt;button @click=&quot;test=handleClick&quot;&gt;请点击&lt;/button&gt;\n\nexport default &#123;\n    data () &#123;\n        return &#123;\n            test: true\n        &#125;\n    &#125;,\n    methods: &#123;\n        handleClick () &#123;\n            this.test = !this.test;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"node网络篇\"><a class=\"anchor\" href=\"#node网络篇\">#</a> Node，网络篇</h2>\n<h3 id=\"1-什么是axios\"><a class=\"anchor\" href=\"#1-什么是axios\">#</a> 1、什么是 axios</h3>\n<blockquote>\n<p>基于 promise 的 http 库，可以用在浏览器和 node.js，支持 promiseAPI，客户端支持防御 xsrf</p>\n</blockquote>\n<h3 id=\"2-node是什么别看这么简单有的人一问就懵\"><a class=\"anchor\" href=\"#2-node是什么别看这么简单有的人一问就懵\">#</a> 2、Node 是什么（别看这么简单，有的人一问就懵）</h3>\n<blockquote>\n<p><strong>Node 是一个基于 Chrome V8 引擎的 JavaScript 代码运行环境。</strong></p>\n<p><strong>浏览器（软件）能够运行 JavaScript 代码，浏览器就是 JavaScript 代码的运行环境</strong></p>\n<p><strong>Node（软件）能够运行 JavaScript 代码，Node 就是 JavaScript 代码的运行环境</strong></p>\n</blockquote>\n<h3 id=\"3-模块化的意义\"><a class=\"anchor\" href=\"#3-模块化的意义\">#</a> 3、模块化的意义</h3>\n<blockquote>\n<p>一句话：降低软件的复杂性。使其可控，可维护，可扩展。</p>\n<p>一个功能就是一个模板，多个模板可以组成完整应用，抽离一个模板不会影响其他功能的运行</p>\n</blockquote>\n<h3 id=\"4-网站的组成\"><a class=\"anchor\" href=\"#4-网站的组成\">#</a> 4、网站的组成</h3>\n<blockquote>\n<p>网站应用程序主要分为两大部分：客户端和服务器端。客户端：在浏览器中运行的部分，就是用户看到并与之交互的界面程序。使用 HTML、CSS、JavaScript 构建。服务器端：在服务器中运行的部分，负责存储数据和处理应用逻辑。</p>\n</blockquote>\n<h3 id=\"5-为什么要用node\"><a class=\"anchor\" href=\"#5-为什么要用node\">#</a> 5、为什么要用 node</h3>\n<blockquote>\n<p><strong>简单强大，轻量可扩展。</strong></p>\n<p><strong>简单体现在 node 使用的是 javascript,json 来进行编码</strong>，强大体现在非阻塞 IO, 可以适应分块传输数据，较慢的网络环境，<strong>尤其擅长高并发访问</strong>，轻量体现在 node 本身既是代码，又是服务器，前后端使用统一语言；可扩展体现在可以轻松应对多实例，多服务器架构，同时有海量的第三方应用组件。</p>\n</blockquote>\n<h3 id=\"6-node中的异步和同步怎么理解\"><a class=\"anchor\" href=\"#6-node中的异步和同步怎么理解\">#</a> 6、node 中的异步和同步怎么理解？</h3>\n<blockquote>\n<p>node 是单线程的，异步是通过一次次的循环事件队列来实现的．同步则是说阻塞式的 IO, 这在高并发环境会是一个很大的性能问题，所以同步一般只在基础框架的启动时使用，用来加载配置文件，初始化程序什么的．</p>\n</blockquote>\n<h3 id=\"7-什么是npmnpm的使用场景\"><a class=\"anchor\" href=\"#7-什么是npmnpm的使用场景\">#</a> 7、什么是 npm？Npm 的使用场景？</h3>\n<blockquote>\n<p>NPM 是随同 NodeJS 一起安装的包管理工具，能解决 NodeJS 代码部署上的很多问题。</p>\n<p>使用场景：</p>\n<p>a. 允许用户从 NPM 服务器下载别人编写的第三方包到本地使用。</p>\n<p>b. 允许用户从 NPM 服务器下载并安装别人编写的命令行程序到本地使用。</p>\n<p>c. 允许用户将自己编写的包或命令行程序上传到 NPM 服务器供别人使用。</p>\n</blockquote>\n<h3 id=\"8-get与post请求有什么区别\"><a class=\"anchor\" href=\"#8-get与post请求有什么区别\">#</a> 8、get 与 post 请求有什么区别</h3>\n<blockquote>\n<ol>\n<li>get 是从服务器上获取数据，post 是向服务器传送数据。</li>\n<li>POST 比 GET 安全，因为数据在地址栏上不可见。</li>\n<li>get 方式提交的数据最多只能有 1024 字节，而 post 则没有此限制。</li>\n<li>GET 使用 URL 或 Cookie 传参。而 POST 将数据放在 request BODY 中。</li>\n<li>GET 与 POST 都有自己的语义，不能随便混用。</li>\n<li>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基，本可以无视。而在网 络环境差的情况下，两次包的 TCP 在验证数据包完整 性上，有非常大的优点。post 发送两次，get 只发送一次。</li>\n<li>并不是所有浏览器都会在 POST 中发送两次包，Firefox 就只发送一次。</li>\n</ol>\n</blockquote>\n<h2 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> ajax</h2>\n<h3 id=\"1-什么是ajaxajax有什么优缺点\"><a class=\"anchor\" href=\"#1-什么是ajaxajax有什么优缺点\">#</a> 1 什么是 ajax？ajax 有什么优缺点？</h3>\n<blockquote>\n<p>ajax 不是语言，ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</p>\n<p>优点</p>\n<p>1、最大的一点是页面无刷新，用户的体验非常好。</p>\n<p>2、使用异步方式与服务器通信，具有更加迅速的响应能力。</p>\n<p>缺点</p>\n<p>1、ajax 不支持浏览器 back 按钮。</p>\n<p>2、安全问题 AJAX 暴露了与服务器交互的细节。</p>\n<p>3、对搜索引擎的支持比较弱。</p>\n<p>4、破坏了程序的异常机制。</p>\n<p>5、不容易调试</p>\n</blockquote>\n<h3 id=\"2-原生ajax的创建过程\"><a class=\"anchor\" href=\"#2-原生ajax的创建过程\">#</a> 2 原生 Ajax 的创建过程</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span>创建xhr 核心对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> xhr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2.</span>调用open 准备发送</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>参数一：请求方式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token literal-property property\">参数二</span><span class=\"token operator\">:</span> 请求地址</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>参数三：<span class=\"token boolean\">true</span>异步，<span class=\"token boolean\">false</span> 同步</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'http://www.baidu.com/api/search'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3.</span>如果是post请求，必须设置请求头。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">4.</span>调用send 发送请求 （如果不需要参数，就写<span class=\"token keyword\">null</span>）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user=tom&amp;age=10&amp;sex=女'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">5.</span>监听异步回调 onreadystatechange</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>判断readyState 为<span class=\"token number\">4</span> 表示请求完成</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>判断status 状态码 为 <span class=\"token number\">200</span> 表示接口请求成功</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>responeseText 为相应数据。字符串类型。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>code<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            modal<span class=\"token punctuation\">.</span><span class=\"token function\">modal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hide'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>           location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>备注：如果是post请求，想要传json格式数据。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>设置请求头</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>​</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>open发送数据</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span>xxx<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span>xxxx<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>xxxx<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"3-web安全及防护\"><a class=\"anchor\" href=\"#3-web安全及防护\">#</a> 3 web 安全及防护</h3>\n<h4 id=\"1xss攻击原理\"><a class=\"anchor\" href=\"#1xss攻击原理\">#</a> <strong>1.XSS 攻击原理：</strong></h4>\n<blockquote>\n<p>** <code>XSS</code> ( <code>Cross-Site Scripting</code> ，跨站脚本攻击)**<strong> 是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取</strong>  <code>**cookie，**session tokens</code> ，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。</p>\n<p><strong>XSS 避免方式：</strong></p>\n<ol>\n<li><code>url</code>  参数使用 <code>encodeURIComponent</code>  方法转义</li>\n<li>尽量不要有 <code>InnerHtml</code>  插入 <code>HTML</code>  内容</li>\n<li>使用特殊符号、标签转义符。</li>\n</ol>\n</blockquote>\n<h4 id=\"2csrf攻击跨站请求伪造\"><a class=\"anchor\" href=\"#2csrf攻击跨站请求伪造\">#</a> <strong>2.CSRF 攻击（跨站请求伪造）：</strong></h4>\n<blockquote>\n<p><strong> <code>CSRF</code> （ <code>Cross-site request forgery</code> ）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</strong></p>\n<p><code>CSRF</code>  避免方式：</p>\n<ol>\n<li>添加验证码</li>\n<li>使用 token\n<ul>\n<li>服务端给用户生成一个 token，加密后传递给用户</li>\n<li>用户在提交请求时，需要携带这个 token</li>\n<li>服务端验证 token 是否正确</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"3sql注入攻击\"><a class=\"anchor\" href=\"#3sql注入攻击\">#</a> <strong>3.SQL 注入攻击</strong></h4>\n<blockquote>\n<p><strong>就是通过吧 SQL 命令插入到 Web 表单递交或输入域名，最终达到欺骗服务器执行恶意的 SQL 命令。</strong></p>\n<p>解决：表单输入时通过正则表达式将一些特殊字符进行转换</p>\n</blockquote>\n<h4 id=\"4-ddos攻击\"><a class=\"anchor\" href=\"#4-ddos攻击\">#</a> <strong>4、DDoS 攻击</strong></h4>\n<blockquote>\n<p><strong> <code>DDoS</code>  又叫分布式拒绝服务，全称  <code>Distributed Denial of Service</code> ，其原理就是利用大量的请求造成资源过载，导致服务不可用。</strong></p>\n<p><strong>解决：</strong></p>\n<ol>\n<li>限制单 IP 请求频率。</li>\n<li>防火墙等防护设置禁止 <code>ICMP</code>  包等</li>\n<li>检查特权端口的开放</li>\n</ol>\n</blockquote>\n<h3 id=\"4-使用基于token的登录流程\"><a class=\"anchor\" href=\"#4-使用基于token的登录流程\">#</a> 4 使用基于 token 的登录流程</h3>\n<blockquote>\n<p>\\1. 客户端使用用户名跟密码请求登录</p>\n<p>\\2. 服务端收到请求，去验证用户名与密码</p>\n<p>\\3. 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端</p>\n<p>\\4. 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里</p>\n<p>\\5. 客户端每次向服务端请求资源的时候需要带着服务端签发的 Token</p>\n<p>\\6. 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</p>\n</blockquote>\n<h3 id=\"状态码\"><a class=\"anchor\" href=\"#状态码\">#</a> 状态码</h3>\n<p><strong>常见 http 状态码分类：</strong></p>\n<pre><code>    200响应成功\n    301永久重定向\n    302临时重定向\n    304资源缓存\n    403服务器禁止访问\n    404服务器资源未找到\n    500 502服务器内部错误\n    504 服务器繁忙\n    1xx Informational（信息状态码）      接受请求正在处理\n    2xx Success（成功状态码）            请求正常处理完毕\n    3xx Redirection（重定向状态码）      需要附加操作已完成请求\n    4xx Client Error（客户端错误状态码）  服务器无法处理请求\n    5xx Server Error（服务器错误状态码）  服务器处理请求出错\n</code></pre>\n<h2 id=\"浏览器篇\"><a class=\"anchor\" href=\"#浏览器篇\">#</a> 浏览器篇</h2>\n<h3 id=\"1-tcp-udp-区别\"><a class=\"anchor\" href=\"#1-tcp-udp-区别\">#</a> 1 TCP UDP 区别</h3>\n<blockquote>\n<p>1. <code>TCP</code>  向上层提供面向连接的可靠服务 ， <code>UDP</code>  向上层提供无连接不可靠服务。<br />\n2. 虽然  <code>UDP</code>  并没有  <code>TCP</code>  传输来的准确，但是也能在很多实时性要求高的地方有所作为<br />\n 3. 对数据准确性要求高，速度可以相对较慢的，可以选用 <code>TCP</code></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">区别</th>\n<th style=\"text-align:left\">UDP</th>\n<th style=\"text-align:left\">TCP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">是否连接</td>\n<td style=\"text-align:left\">无连接</td>\n<td style=\"text-align:left\">面向连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否可靠</td>\n<td style=\"text-align:left\">不可靠传输，不使用流量控制和拥塞控制</td>\n<td style=\"text-align:left\">可靠传输，使用流量控制和拥塞控制</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">连接对象个数</td>\n<td style=\"text-align:left\">支持一对一，一对多，多对一和多对多交互通信</td>\n<td style=\"text-align:left\">只能是一对一通信</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">传输方式</td>\n<td style=\"text-align:left\">面向报文</td>\n<td style=\"text-align:left\">面向字节流</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">首部开销</td>\n<td style=\"text-align:left\">首部开销小，仅 8 字节</td>\n<td style=\"text-align:left\">首部最小 20 字节，最大 60 字节</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">适用场景</td>\n<td style=\"text-align:left\">适用于实时应用（IP 电话、视频会议、直播等）</td>\n<td style=\"text-align:left\">适用于要求可靠传输的应用，例如文件传输</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-http和https区别高频\"><a class=\"anchor\" href=\"#2-http和https区别高频\">#</a> 2 Http 和 Https 区别（高频）</h3>\n<pre><code>1.`HTTP` 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头\n2.`HTTP` 是不安全的，而 HTTPS 是安全的\n3.`HTTP` 标准端口是80 ，而 HTTPS 的标准端口是443\n4.`在OSI` 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层\n5.`HTTP` 无法加密，而HTTPS 对传输的数据进行加密，证的网络协议，安全性高于HTTP协议。\n6.`HTTP`无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书，一般免费证书少，因而需要一定费用。\n</code></pre>\n<h3 id=\"3-get和post区别高频\"><a class=\"anchor\" href=\"#3-get和post区别高频\">#</a> 3 GET 和 POST 区别（高频）</h3>\n<pre><code>1.GET在浏览器回退不会再次请求，POST会再次提交请求\n2.GET请求会被浏览器主动缓存，POST不会，要手动设置\n3.GET请求参数会被完整保留在浏览器历史记录里，POST中的参数不会\n4.GET请求在URL中传送的参数是有长度限制的，而POST没有限制\n5.GET参数通过URL传递，POST放在Request body中\n6.GET参数暴露在地址栏不安全，POST放在报文内部更安全\n7.GET一般用于查询信息，POST一般用于提交某种信息进行某些修改操作\n8.GET产生一个TCP数据包；POST产生两个TCP数据包\nGe和post的选择：\n1.私密性的信息请求使用post（如注册、登陆）。\n2.查询信息使用get。\n</code></pre>\n<h3 id=\"4-三次握手和四次挥手\"><a class=\"anchor\" href=\"#4-三次握手和四次挥手\">#</a> 4 三次握手和四次挥手</h3>\n<p><em><strong>* 三次握手：*</strong></em></p>\n<blockquote>\n<p>第一次：建立连接时，客户端发送 syn 包到服务器，等待服务端确认</p>\n<p>第二次：服务器收到 syn 包，必须确认客户的 syn，同时也发送一个 syn 包，即 syn+ACK 包</p>\n<p>第三次：客户端收到服务器的 syn 和 ack 包，向服务器发送确认包 ack，发送完毕，客户端和服务端连接成功，完成三次握手</p>\n</blockquote>\n<p><em><strong>* 四次挥手：*</strong></em></p>\n<blockquote>\n<p>第一次：浏览器发送完数据后，发送 fin 请求断开连接</p>\n<p>第二次：服务器发送 ack 到客户端，确认客户端的断开请求</p>\n<p>第三次：服务器请求断开 fin 的请求</p>\n<p>第四次：客户端确认服务器的断开 ack</p>\n</blockquote>\n<h3 id=\"5-http10-http11-http20的区别\"><a class=\"anchor\" href=\"#5-http10-http11-http20的区别\">#</a> 5 http1.0、http1.1、http2.0 的区别</h3>\n<blockquote>\n<ol>\n<li>1 和 1.0 相比，1.1 可以一次传输多个文件</li>\n<li>http1.x 解析基于文本，</li>\n<li>http2.0 采用二进制格式，新增特性 多路复用、header 压缩、服务端推送 (静态 html 资源)</li>\n</ol>\n</blockquote>\n<h3 id=\"6-浏览器缓存的作用\"><a class=\"anchor\" href=\"#6-浏览器缓存的作用\">#</a> 6 浏览器缓存的作用</h3>\n<blockquote>\n<p>浏览器缓存的作用：减少冗余的数据传输，节省网络带宽，更快加载页面，缓存降低了服务器的要求，有更快的响应</p>\n</blockquote>\n<h3 id=\"7-缓存的资源去哪里了\"><a class=\"anchor\" href=\"#7-缓存的资源去哪里了\">#</a> 7 缓存的资源去哪里了</h3>\n<blockquote>\n<p>memory cache 将资源文件缓存到内存中，下次请求读取的是内存中的<br />\n disk cache 将资源存到硬盘中，下次请求从硬盘中读取</p>\n</blockquote>\n<h3 id=\"8-http报文\"><a class=\"anchor\" href=\"#8-http报文\">#</a> 8 http 报文</h3>\n<blockquote>\n<p>HTTP 报文就是浏览器和服务器间通信时发送及响应的数据块。<br />\n浏览器向服务器请求数据，发送请求 (request) 报文；<br />\n服务器向浏览器返回数据，返回响应 (response) 报文。<br />\n报文信息主要分为两部分：header, 数据主体部分 (body)</p>\n</blockquote>\n<h3 id=\"9-能不能说一说浏览器的本地存储各自优劣如何\"><a class=\"anchor\" href=\"#9-能不能说一说浏览器的本地存储各自优劣如何\">#</a> 9 能不能说一说浏览器的本地存储？各自优劣如何？</h3>\n<blockquote>\n<p><strong>浏览器的本地存储主要分为 <code>Cookie、WebStorage和IndexDB</code> , 其中 <code>WebStorage</code>  又可以分为 <code>localStorage和sessionStorage</code> 。</strong></p>\n<p><strong>共同点：都是保存在浏览器端、且同源的</strong></p>\n<p><strong>不同点：</strong></p>\n<ol>\n<li><code>cookie</code>  数据始终在同源的 <code>http</code>  请求中携带（即使不需要），即 <code>cookie</code>  在浏览器和服务器间来回传递。 <code>cookie</code>  数据还有路径（ <code>path</code> ）的概念，可以限制 <code>cookie</code>  只属于某个路径下 <code>sessionStorage</code>  和 <code>localStorage</code>  不会自动把数据发送给服务器，仅在本地保存。</li>\n<li><strong>存储大小限制也不同，</strong></li>\n</ol>\n<ul>\n<li><code>cookie</code>  数据不能超过 4K， <code>sessionStorage和localStorage</code>  可以达到 5M</li>\n<li><code>sessionStorage</code> ：仅在当前浏览器窗口关闭之前有效；</li>\n<li><code>localStorage</code> ：始终有效，窗口或浏览器关闭也一直保存，本地存储，因此用作持久数据；</li>\n<li><code>cookie</code> ：只在设置的 <code>cookie</code>  过期时间之前有效，即使窗口关闭或浏览器关闭</li>\n</ul>\n<ol>\n<li><strong>作用域不同</strong></li>\n</ol>\n<ul>\n<li><code>sessionStorage</code> ：不在不同的浏览器窗口中共享，即使是同一个页面；</li>\n<li><code>localstorage</code> ：在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在</li>\n<li><code>cookie</code> : 也是在所有同源窗口中都是共享的。也就是说只要浏览器不关闭，数据仍然存在</li>\n</ul>\n</blockquote>\n<h3 id=\"10-从输入url到页面加载的全过程\"><a class=\"anchor\" href=\"#10-从输入url到页面加载的全过程\">#</a> 10 从输入 URL 到页面加载的全过程</h3>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/e44aa8a92602405db3c12161b71e2094~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"从输入URL到页面加载的主干流程\" /></p>\n<ol>\n<li>\n<p>首先在浏览器中输入 URL</p>\n</li>\n<li>\n<p>查找缓存：浏览器先查看浏览器缓存 - 系统缓存 - 路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。</p>\n<ul>\n<li>浏览器缓存：浏览器会记录 DNS 一段时间，因此，只是第一个地方解析 DNS 请求；</li>\n<li>操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录 (保存最近的 DNS 查询缓存)；</li>\n<li>路由器缓存：如果上述两个步骤均不能成功获取 DNS 记录，继续搜索路由器缓存；</li>\n<li>ISP 缓存：若上述均失败，继续向 ISP 搜索。</li>\n</ul>\n</li>\n<li>\n<p>DNS 域名解析：浏览器向 DNS 服务器发起请求，解析该 URL 中的域名对应的 IP 地址。 <code>DNS服务器是基于UDP的，因此会用到UDP协议</code> 。</p>\n</li>\n<li>\n<p>建立 TCP 连接：解析出 IP 地址后，根据 IP 地址和默认 80 端口，和服务器建立 TCP 连接</p>\n</li>\n<li>\n<p>发起 HTTP 请求：浏览器发起读取文件的 HTTP 请求，，该请求报文作为 TCP 三次握手的第三次数据发送给服务器</p>\n</li>\n<li>\n<p>服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的 html 文件发送给浏览器</p>\n</li>\n<li>\n<p>关闭 TCP 连接：通过四次挥手释放 TCP 连接</p>\n</li>\n<li>\n<p>浏览器渲染：客户端（浏览器）解析 HTML 内容并渲染出来，浏览器接收到数据包后的解析流程为：</p>\n<ul>\n<li>构建 DOM 树：词法分析然后解析成 DOM 树（dom tree），是由 dom 元素及属性节点组成，树的根是 document 对象</li>\n<li>构建 CSS 规则树：生成 CSS 规则树（CSS Rule Tree）</li>\n<li>构建 render 树：Web 浏览器将 DOM 和 CSSOM 结合，并构建出渲染树（render tree）</li>\n<li>布局（Layout）：计算出每个节点在屏幕中的位置</li>\n<li>绘制（Painting）：即遍历 render 树，并使用 UI 后端层绘制每个节点。</li>\n</ul>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a90660027f0d4c559732519bad4c6323~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"浏览器渲染流程图\" /></p>\n</li>\n<li>\n<p>JS 引擎解析过程：调用 JS 引擎执行 JS 代码（JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p>\n<ul>\n<li>创建 window 对象：window 对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于 window 的属性和方法，而 DOM Tree 也会映射在 window 的 doucment 对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。</li>\n<li>加载文件：完成 js 引擎分析它的语法与词法是否合法，如果合法进入预编译</li>\n<li>预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为 window 的属性加入到 window 对象中，并给变量赋值为 'undefined'；寻找全局函数声明，把它作为 window 的方法加入到 window 对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在 ES6 中已经解决了，函数提升还存在。</li>\n<li>解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在 ES5 非严格模式下这个变量会成为 window 的一个属性，也就是成为全局变量。string、int 这样的值就是直接把值放在变量的存储空间里，object 对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS 作用域其实就是这样的执行流机制实现的。</li>\n</ul>\n</li>\n</ol>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY4NDkxMDY3MTYyNjU1\"># DNS 域名解析过程</span> ☞<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyNTk3NzYwOTM1NDYwOTAx\"># 浏览器的工作原理</span></p>\n<blockquote>\n<p>总结：</p>\n<p>1. 输入 url</p>\n<p>2. 浏览器查找是否有该页面的缓存（如果没有往下）</p>\n<p>3. 像 dns 服务器发送请求域名解析拿到 ip（dns 服务器基于 udp，用到 udp 协议）</p>\n<p>4. 三次握手简历 TCP 连接</p>\n<p>5. 发 HTTP 请求</p>\n<p>6. 拿到响应结果</p>\n<p>7. 四次挥手断开 TCP 连接</p>\n<p>---- 浏览器渲染开始</p>\n<p>8. 先构建 dom 树</p>\n<p>9. 构建 css 规则书</p>\n<p>10. 两者结合成 render 渲染树</p>\n<p>11. 布局</p>\n<p>12. 绘制</p>\n<p>13. 加载 js 脚本</p>\n</blockquote>\n<h3 id=\"11-在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议\"><a class=\"anchor\" href=\"#11-在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议\">#</a> 11 在浏览器中输入 URL 到显示页面经历哪些过程，涉及到哪些协议？</h3>\n<p>浏览器要将 URL 解析为 IP 地址，解析域名就要用到 DNS 协议，首先主机会查询 DNS 的缓存，如果没有就给本地 DNS 发送查询请求。DNS 查询分为两种方式，一种是递归查询，一种是迭代查询。如果是迭代查询，本地的 DNS 服务器，向根域名服务器发送查询请求，根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求，然后依次类推直到查询到该域名的 IP 地址。 <code>DNS服务器是基于UDP的，因此会用到UDP协议。</code></p>\n<p>得到 IP 地址后，浏览器就要与服务器建立一个 http 连接。因此要用到 http 协议。http 生成一个 get 请求报文，将该报文传给 TCP 层处理，所以还会用到 TCP 协议。如果采用 https 还会使用 https 协议先对 http 数据进行加密。TCP 层如果有需要先将 HTTP 数据包分片，分片依据路径 MTU 和 MSS。TCP 的数据包然后会发送给 IP 层，用到 IP 协议。IP 层通过路由选路，一跳一跳发送到目的地址。当然在一个网段内的寻址是通过以太网协议实现 (也可以是其他物理层协议，比如 PPP，SLIP)，以太网协议需要直到目的 IP 地址的物理地址，有需要 ARP 协议。</p>\n<p>其中：</p>\n<p>1、 <code>DNS协议，http协议，https协议属于应用层</code></p>\n<p>应用层是体系结构中的最高层。应用层确定进程之间通信的性质以满足用户的需要。这里的进程就是指正在运行的程序。应用层不仅要提供应用进程所需要的信息交换和远地操作，而且还要作为互相作用的应用进程的用户代理，来完成一些为进行语义上有意义的信息交换所必须的功能。应用层直接为用户的应用进程提供服务。</p>\n<p>2、 <code>TCP/UDP属于传输层</code></p>\n<p>传输层的任务就是负责主机中两个进程之间的通信。因特网的传输层可使用两种不同协议：即面向连接的传输控制协议 TCP，和无连接的用户数据报协议 UDP。面向连接的服务能够提供可靠的交付，但无连接服务则不保证提供可靠的交付，它只是 “尽最大努力交付”。这两种服务方式都很有用，备有其优缺点。在分组交换网内的各个交换结点机都没有传输层。</p>\n<p>3、 <code>IP协议，ARP协议属于网络层</code></p>\n<p>网络层负责为分组交换网上的不同主机提供通信。在发送数据时，网络层将运输层产生的报文段或用户数据报封装成分组或包进行传送。在 TCP/IP 体系中，分组也叫作 IP 数据报，或简称为数据报。网络层的另一个任务就是要选择合适的路由，使源主机运输层所传下来的分组能够交付到目的主机。</p>\n<p>4、数据链路层</p>\n<p>当发送数据时，数据链路层的任务是将在网络层交下来的 IP 数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制、以及流量控制信息等）。控制信息使接收端能够知道 — 个帧从哪个比特开始和到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错。</p>\n<p>5、物理层</p>\n<p>物理层的任务就是透明地传送比特流。在物理层上所传数据的单位是比特。传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆等，并不在物理层之内而是在物理层的下面。因此也有人把物理媒体当做第 0 层。</p>\n<h3 id=\"12-浏览器的主要功能\"><a class=\"anchor\" href=\"#12-浏览器的主要功能\">#</a> 12 浏览器的主要功能</h3>\n<p>浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。</p>\n<h3 id=\"13-浏览器的工作原理\"><a class=\"anchor\" href=\"#13-浏览器的工作原理\">#</a> 13 浏览器的工作原理</h3>\n<p>渲染引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。</p>\n<p>然后进行如下所示的基本流程：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/9ef6cb226b374e89914a2315e4ca9ba9~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n<p>图：渲染引擎的基本流程。</p>\n<p>渲染引擎将开始 <code>解析 HTML 文档</code> ，并将各标记逐个转化成 “内容树” 上的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM0RPTQ==\">DOM</span> 节点。同时也会 <code>解析外部 CSS 文件以及样式元素中的样式数据</code> 。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23Render_tree_construction\" title=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Render_tree_construction\"> <code>渲染树</code> </a>。</p>\n<p>渲染树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。</p>\n<p>渲染树构建完毕之后，进入 “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM2xheW91dA==\">布局</span>” 处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM1BhaW50aW5n\">绘制</span> - 渲染引擎会遍历渲染树，由用户界面后端层将每个节点绘制出来。</p>\n<p>需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，渲染引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，渲染引擎会将部分内容解析并显示出来。</p>\n<h3 id=\"14-浏览器的主要组成部分是什么\"><a class=\"anchor\" href=\"#14-浏览器的主要组成部分是什么\">#</a> 14 浏览器的主要组成部分是什么？</h3>\n<ol>\n<li><strong>用户界面</strong> - 包括地址栏、前进 / 后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。</li>\n<li><strong>浏览器引擎</strong> - 在用户界面和呈现引擎之间传送指令。</li>\n<li><strong>呈现引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li>\n<li><strong>网络</strong> - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。</li>\n<li><strong>用户界面后端</strong> - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。</li>\n<li><strong>JavaScript 解释器</strong>。用于解析 2 和执行 JavaScript 代码。</li>\n<li><strong>数据存储</strong>。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了 “网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。<br />\n<img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f83cb61cb9de4a65abeb95e50608af48~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"\" /></li>\n</ol>\n<p>图：浏览器的主要组件。</p>\n<p>值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p>\n<h3 id=\"15-浏览器是如何渲染ui的\"><a class=\"anchor\" href=\"#15-浏览器是如何渲染ui的\">#</a> 15 浏览器是如何渲染 UI 的？</h3>\n<ol>\n<li>浏览器获取 HTML 文件，然后对文件进行解析，形成 DOM Tree</li>\n<li>与此同时，进行 CSS 解析，生成 Style Rules</li>\n<li>接着将 DOM Tree 与 Style Rules 合成为 Render Tree</li>\n<li>接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标</li>\n<li>随后调用 GPU 进行绘制（Paint），遍历 Render Tree 的节点，并将元素呈现出来</li>\n</ol>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/67b1336692f540c9a81756f93e82c2f5~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<h3 id=\"16-dom-tree是如何构建的\"><a class=\"anchor\" href=\"#16-dom-tree是如何构建的\">#</a> 16 DOM Tree 是如何构建的？</h3>\n<ol>\n<li>转码：浏览器将接收到的二进制数据按照指定编码格式转化为 HTML 字符串</li>\n<li>生成 Tokens: 之后开始 parser，浏览器会将 HTML 字符串解析成 Tokens</li>\n<li>构建 Nodes: 对 Node 添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope</li>\n<li>生成 DOM Tree: 通过 node 包含的指针确定的关系构建出 DOM<br />\nTree</li>\n</ol>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/1dc0f577836c4705bb582b2ac15bc5d1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"2019-06-22-11-48-00\" /></p>\n<h3 id=\"17-浏览器重绘与重排的区别\"><a class=\"anchor\" href=\"#17-浏览器重绘与重排的区别\">#</a> 17 浏览器重绘与重排的区别？</h3>\n<ul>\n<li><code>重排/回流（Reflow）</code> ：当 <code>DOM</code>  的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。</li>\n<li><code>重绘(Repaint)</code> : 当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变</li>\n</ul>\n<p>单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分</p>\n<p>重排和重绘代价是高昂的，它们会破坏用户体验，并且让 UI 展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。</p>\n<p>『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。</p>\n<h3 id=\"18-如何触发重排和重绘\"><a class=\"anchor\" href=\"#18-如何触发重排和重绘\">#</a> 18 如何触发重排和重绘？</h3>\n<p>任何改变用来构建渲染树的信息都会导致一次重排或重绘：</p>\n<ul>\n<li>添加、删除、更新 DOM 节点</li>\n<li>通过 display: none 隐藏一个 DOM 节点 - 触发重排和重绘</li>\n<li>通过 visibility: hidden 隐藏一个 DOM 节点 - 只触发重绘，因为没有几何变化</li>\n<li>移动或者给页面中的 DOM 节点添加动画</li>\n<li>添加一个样式表，调整样式属性</li>\n<li>用户行为，例如调整窗口大小，改变字号，或者滚动。</li>\n</ul>\n<h3 id=\"19-如何避免重绘或者重排\"><a class=\"anchor\" href=\"#19-如何避免重绘或者重排\">#</a> 19 如何避免重绘或者重排？</h3>\n<ol>\n<li>\n<p><code>集中改变样式</code> ，不要一条一条地修改 DOM 的样式。</p>\n</li>\n<li>\n<p>不要把 DOM 结点的属性值放在循环里当成循环里的变量。</p>\n</li>\n<li>\n<p>为动画的 HTML 元件使用  <code>fixed</code>  或  <code>absoult</code>  的  <code>position</code> ，那么修改他们的 CSS 是不会 reflow 的。</p>\n</li>\n<li>\n<p>不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。</p>\n</li>\n<li>\n<p>尽量只修改 <code>position：absolute</code>  或 <code>fixed</code>  元素，对其他元素影响不大</p>\n</li>\n<li>\n<p>动画开始 <code>GPU</code>  加速， <code>translate</code>  使用 <code>3D</code>  变化</p>\n</li>\n<li>\n<p>提升为合成层</p>\n<p>将元素提升为合成层有以下优点：</p>\n<ul>\n<li>合成层的位图，会交由 GPU 合成，比 CPU 处理要快</li>\n<li>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li>\n<li>对于 transform 和 opacity 效果，不会触发 layout 和 paint</li>\n</ul>\n<p>提升合成层的最好方式是使用 CSS 的 will-change 属性：</p>\n<pre><code>#target &#123;\n  will-change: transform;\n&#125;\n</code></pre>\n<blockquote>\n<p>关于合成层的详解请移步<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cCUzQSUyRiUyRnRhb2Jhb2ZlZC5vcmclMkZibG9nJTJGMjAxNiUyRjA0JTJGMjUlMkZwZXJmb3JtYW5jZS1jb21wb3NpdGUlMkY=\">无线性能优化：Composite</span></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"20-介绍下304过程\"><a class=\"anchor\" href=\"#20-介绍下304过程\">#</a> 20 介绍下 304 过程</h3>\n<ul>\n<li>a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。</li>\n<li>b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。</li>\n<li>c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。</li>\n</ul>\n<h3 id=\"21-浏览器的缓存机制-强制缓存-协商缓存\"><a class=\"anchor\" href=\"#21-浏览器的缓存机制-强制缓存-协商缓存\">#</a> 21 浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3>\n<p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/487144abaada4b9a8b34bc9375191ec7~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"图片\" /></p>\n<p>由上图我们可以知道：</p>\n<ul>\n<li>浏览器每次发起请求，都会 <code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li>\n<li>浏览器每次拿到返回的请求结果都会 <code>将该结果和缓存标识存入浏览器缓存中</code></li>\n</ul>\n<p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 <code>强制缓存</code> 和 <code>协商缓存</code> 。</p>\n<ul>\n<li>\n<p><strong>强制缓存</strong></p>\n<p><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code> 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  <code>Expires</code>  和  <code>Cache-Control</code> ，其中 Cache-Control 优先级比 Expires 高。</p>\n<p>强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：</p>\n<ol>\n<li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li>\n<li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li>\n<li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li>\n</ol>\n</li>\n<li>\n<p><strong>协商缓存</strong></p>\n<p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code> ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： <code>Last-Modified / If-Modified-Since</code>  和  <code>Etag / If-None-Match</code> ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：</p>\n<ol>\n<li>协商缓存生效，返回 304</li>\n<li>协商缓存失效，返回 200 和请求结果结果</li>\n</ol>\n</li>\n</ul>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx\"># 彻底理解浏览器的缓存机制</span></p>\n<h3 id=\"22-说下进程-线程和协程\"><a class=\"anchor\" href=\"#22-说下进程-线程和协程\">#</a> 22 说下进程、线程和协程</h3>\n<p><strong>进程</strong>是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程， <code>是操作系统进行资源分配和调度的一个独立单位</code> ，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。</p>\n<p><strong>线程</strong>是程序执行中一个单一的顺序控制流程，是 <code>程序执行流的最小单元</code> ，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间 (也就是所在进程的内存空间)。一个标准的线程由线程 ID、当前指令指针 (PC)、寄存器和堆栈组成。而进程由内存空间 (代码、数据、进程空间、打开的文件) 和一个或多个线程组成。</p>\n<p><strong>协程</strong>，英文 Coroutines，是一种 <code>基于线程之上，但又比线程更加轻量级的存在</code> ，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。</p>\n<p><strong>进程和线程的区别与联系</strong></p>\n<p>【区别】：</p>\n<p>调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；</p>\n<p>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；</p>\n<p>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</p>\n<p>系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。</p>\n<p>【联系】：</p>\n<p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；</p>\n<p>资源分配给进程，同一进程的所有线程共享该进程的所有资源；</p>\n<p>处理机分给线程，即真正在处理机上运行的是线程；</p>\n<p>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY1MzgxNzkxODc1MTA5\"># 一文搞懂进程、线程、协程及 JS 协程的发展</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4zNjBkb2MuY29tL2NvbnRlbnQvMjAvMDQxNy8xNC8zMjE5NjUwN185MDY2Mjg4NTcuc2h0bWw=\">☞了解更多</span></p>\n<p>关于浏览器传送门 ☞<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkzMDk1MzQ1NTc2MDgzNDg2\"># 深入了解现代 Web 浏览器</span></p>\n<h3 id=\"23-进程间的通信方式\"><a class=\"anchor\" href=\"#23-进程间的通信方式\">#</a> 23 进程间的通信方式</h3>\n<p><code>进程通信</code> ：<br />\n每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程 A 把数据从用户空间拷到内核缓冲区，进程 B 再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信。</p>\n<p>进程间的通信方式：管道、有名管道、信号、消息队列、共享内存、信号量、socket</p>\n<p><code>匿名管道( pipe )</code> ： 管道是一种半双工的通信方式，数据只能<strong>单向流动</strong>，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指<strong>父子进程关系</strong>。</p>\n<p><code>高级管道(popen)</code> ：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p>\n<p><code>有名管道 (named pipe) </code> ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>\n<p><code>消息队列( message queue )</code>  ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>\n<p><code>信号量( semophore )</code>  ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>\n<p><code>信号 ( sinal )</code>  ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>\n<p><code>共享内存( shared memory )</code>  ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>\n<p><code>套接字( socket ) 通信</code> ： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信</p>\n<h3 id=\"24-浏览器样式兼容\"><a class=\"anchor\" href=\"#24-浏览器样式兼容\">#</a> 24 浏览器样式兼容</h3>\n<h4 id=\"一-css初始化\"><a class=\"anchor\" href=\"#一-css初始化\">#</a> 一、CSS 初始化</h4>\n<p>每个浏览器的 css 默认样式不尽相同，所以最简单有效的方式就是对其进行初始化（覆盖默认样式）</p>\n<blockquote>\n<p margin:=\"\" 0;=\"\" padding:=\"\" 0;=\"\">常见 :  *</p>\n<p>库：normalize.css</p>\n</blockquote>\n<h4 id=\"二-浏览器私有属性\"><a class=\"anchor\" href=\"#二-浏览器私有属性\">#</a> 二、<strong>浏览器私有属性</strong></h4>\n<blockquote>\n<p>常用的前缀有：</p>\n<p>firefox 浏览器 ：-moz-</p>\n<p>chrome、safari ：-webkit-</p>\n<p>opera ：-o- / -xv-</p>\n<p>IE 浏览器 ：-ms-（目前只有 IE 8 + 支持）</p>\n</blockquote>\n<h4 id=\"三-css-hack条件hack-属性级hack-选择符级hack\"><a class=\"anchor\" href=\"#三-css-hack条件hack-属性级hack-选择符级hack\">#</a> <strong>三、CSS hack（条件 hack、属性级 hack、选择符级 hack）</strong></h4>\n<h3 id=\"25-js垃圾回收机制\"><a class=\"anchor\" href=\"#25-js垃圾回收机制\">#</a> 25 JS 垃圾回收机制</h3>\n<ol>\n<li>\n<p>项目中，如果存在大量不被释放的内存（堆 / 栈 / 上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。</p>\n</li>\n<li>\n<p>浏览器垃圾回收机制 / 内存回收机制:</p>\n<blockquote>\n<p>浏览器的 <code>Javascript</code>  具有自动垃圾回收机制 ( <code>GC:Garbage Collecation</code> )，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p>\n</blockquote>\n<p><strong>标记清除</strong>：在 <code>js</code>  中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为 “进入环境”，当变量离开执行环境时，会被标记为 “离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。<br />\n<strong>谷歌浏览器</strong>：“查找引用”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收。<br />\n<strong>IE 浏览器</strong>：“引用计数法”，当前内存被占用一次，计数累加 1 次，移除占用就减 1，减到 0 时，浏览器就回收它。</p>\n</li>\n<li>\n<p>优化手段：内存优化；手动释放：取消内存的占用即可。</p>\n<p>（1）堆内存：fn = null 【null：空指针对象】</p>\n<p>（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。</p>\n</li>\n<li>\n<p>内存泄漏</p>\n<p>在 JS 中，常见的内存泄露主要有 4 种，全局变量、闭包、DOM 元素的引用、定时器</p>\n</li>\n</ol>\n<h2 id=\"计算机网络\"><a class=\"anchor\" href=\"#计算机网络\">#</a> 计算机网络</h2>\n<h3 id=\"http-的基本概念\"><a class=\"anchor\" href=\"#http-的基本概念\">#</a> HTTP 的基本概念</h3>\n<p>http: 是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端 <code>请求和应答的标准（TCP）</code> ，用于从 WWW 服务器传输超文本到本地浏览器的 <code>超文本传输协议</code> 。</p>\n<h3 id=\"http工作原理\"><a class=\"anchor\" href=\"#http工作原理\">#</a> HTTP 工作原理</h3>\n<p>HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。</p>\n<h3 id=\"http请求响应的步骤\"><a class=\"anchor\" href=\"#http请求响应的步骤\">#</a> HTTP 请求 / 响应的步骤</h3>\n<ul>\n<li>1. 客户端连接到 Web 服务器</li>\n<li>2. 发送 HTTP 请求</li>\n<li>3. 服务器接受请求并返回 HTTP 响应</li>\n<li>4. 释放 TCP 连接</li>\n<li>5. 客户端（浏览器）解析 HTML 内容</li>\n</ul>\n<blockquote>\n<p>记忆口诀：连接发送加响应，释放解析整过程。</p>\n</blockquote>\n<h3 id=\"http-的-5-种方法\"><a class=\"anchor\" href=\"#http-的-5-种方法\">#</a> HTTP 的 5 种方法</h3>\n<ul>\n<li>GET--- 获取资源</li>\n<li>POST--- 传输资源</li>\n<li>PUT--- 更新资源</li>\n<li>DELETE--- 删除资源</li>\n<li>HEAD--- 获取报文首部</li>\n</ul>\n<h3 id=\"get与post的区别\"><a class=\"anchor\" href=\"#get与post的区别\">#</a> GET 与 POST 的区别</h3>\n<p>区别<br />\n面试时经常会被问到：请说说 GET 与 POST 的区别是什么？</p>\n<p>我们来看看 w3cshool 对于 GET 与 POST 的区别定义：</p>\n<p>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。<br />\nGET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。<br />\nGET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。<br />\nGET 请求只能进行 url 编码，而 POST 支持多种编码方式。<br />\nGET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。<br />\nGET 请求在 URL 中传送的参数是有长度限制的，而 POST 没有。<br />\n对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。<br />\nGET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。<br />\nGET 参数通过 URL 传递，POST 放在 Request body 中。<br />\n这或许是标准答案，但不一定是面试官想听到的答案。我们应该学会透过表象看本质，那么他们的本质有区别吗？</p>\n<pre><code>    答案是没有区别。\n</code></pre>\n<p>为什么这样说？</p>\n<pre><code>    其实GET和POST本质上时没有区别的，但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同，我们要知道，GET与POST是什么东西。\n\n    在HTTP中定义了与服务器交互的不同方法，GET与POST便是其中两种。\n\n    我们知道，HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。他的底层，是TCP/IP。所以GET与POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样的。你要给GET加上requestbody，给POST带上url参数，技术上是完全行的通的。但这就好像拿洗脸盆洗脚，拿洗脚盆洗脸一样，不是不可以，而是没有发挥其本来的作用，HTTP的每个方法都有着自己的作用。\n</code></pre>\n<p>但是，存在即合理，为什么要定义这么多种不同的方法呢？</p>\n<pre><code>    在HTTP中定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。所以说，这些方法本质上并没有区别，但是我们为其规定了区别，因为合理的分工，让每个方法都扮演着不同的角色，可以使其更加高效。\n</code></pre>\n<p>为什么要对 GET 和 POST 请求添加限制呢？</p>\n<pre><code>    大多数浏览器通常都会限制url长度在2K个字节，而大多数服务器最多处理64K大小的url。因为过大的数据量，会对服务器和浏览器产生不小的压力，消耗较多的资源，若有人心怀恶意，故意增加URL的长度来为服务器增加负担，所以为了性能和安全考虑，会给URL增加长度限制。\n</code></pre>\n<p>GET 和 POST 还有一个重大区别：</p>\n<pre><code>    GET产生一个TCP数据包；POST产生两个TCP数据包。\n</code></pre>\n<p>对于 GET 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）。</p>\n<p>而对于 POST，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</p>\n<p>误区：<br />\n误区一：get 安全性非常低，post 安全性较高</p>\n<pre><code>    因为get的数据是直接体现在url里，而post是在requestbody中，所以直观看来get不安全。然而从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上抓包，就能完整地获取数据报文，要想安全传输，就只有加密，也就是 HTTPS。所以在没有使用HTTPS时，GET与POST都相当于裸奔，可以轻易获取。\n</code></pre>\n<p>误区二：get 传送的数据量较小，不能大于 2KB。post 传送的数据量较大，一般被默认为不受限制。但理论上，IIS4 中最大量为 80KB，IIS5 中为 100KB。</p>\n<pre><code>    在上面提到过，GET与POST本质上是没有区别的。因为他们的底层都是TCP/IP协议，他们都是TCP连接，可以做的事情是一样的。其实http并没有body和url的长度限制，对url限制大多是浏览器和服务器的原因。数据量太大对浏览器和服务器都是很大负担，对服务器来说处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。\n</code></pre>\n<h3 id=\"http报文的组成成分\"><a class=\"anchor\" href=\"#http报文的组成成分\">#</a> HTTP 报文的组成成分</h3>\n<p 状态行、响应头、空行、响应体=\"\">请求报文 {请求行、请求头、空行、请求体} 请求行：{http 方法、页面地址、http 协议、http 版本} 响应报文</p>\n<p><strong>Request Header:</strong></p>\n<ol>\n<li><strong>GET /sample.Jsp HTTP/1.1</strong>  // 请求行</li>\n<li><strong>Host:</strong>  www.uuid.online/// 请求的目标域名和端口号</li>\n<li><strong>Origin:</strong> <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxLw==\">http://localhost:8081/</span>  // 请求的来源域名和端口号 （跨域请求时，浏览器会自动带上这个头信息）</li>\n<li><strong>Referer:</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MS9saW5rP3F1ZXJ5PXh4eHh4\">https://localhost:8081/link?query=xxxxx</span> // 请求资源的完整 URI</li>\n<li><strong>User-Agent:</strong> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 // 浏览器信息</li>\n<li><strong>Cookie:</strong>  BAIDUID=FA89F036:FG=1; BD_HOME=1; sugstore=0  // 当前域名下的 Cookie</li>\n<li><strong>Accept:</strong> text/html,image/apng  // 代表客户端希望接受的数据类型是 html 或者是 png 图片类型</li>\n<li><strong>Accept-Encoding:</strong> gzip, deflate  // 代表客户端能支持 gzip 和 deflate 格式的压缩</li>\n<li><strong>Accept-Language:</strong> zh-CN,zh;q=0.9  // 代表客户端可以支持语言 zh-CN 或者 zh (值得一提的是 q (0~1) 是优先级权重的意思，不写默认为 1，这里 zh-CN 是 1，zh 是 0.9)</li>\n<li><strong>Connection:</strong> keep-alive  // 告诉服务器，客户端需要的 tcp 连接是一个长连接</li>\n</ol>\n<p><strong>Response Header:</strong></p>\n<ol>\n<li><strong>HTTP/1.1 200 OK</strong>  // 响应状态行</li>\n<li><strong>Date:</strong>  Mon, 30 Jul 2018 02:50:55 GMT  // 服务端发送资源时的服务器时间</li>\n<li><strong>Expires:</strong>  Wed, 31 Dec 1969 23:59:59 GMT // 比较过时的一种验证缓存的方式，与浏览器（客户端）的时间比较，超过这个时间就不用缓存（不和服务器进行验证），适合版本比较稳定的网页</li>\n<li><strong>Cache-Control:</strong>  no-cache  // 现在最多使用的控制缓存的方式，会和服务器进行缓存验证，具体见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYW1pZXpoYW5nL3AvOTM4OTUzNy5odG1s\">博文”Cache-Control“</span></li>\n<li><strong>etag:</strong>  &quot;fb8ba2f80b1d324bb997cbe188f28187-ssl-df&quot;  // 一般是<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50MDg2LmNvbS9hcnRpY2xlLzUyMDc=\"> Nginx 静态服务器</span>发来的静态文件签名，浏览在没有 “Disabled cache” 情况下，接收到 etag 后，同一个 url 第二次请求就会自动带上 “If-None-Match”</li>\n<li><strong>Last-Modified:</strong>  Fri, 27 Jul 2018 11:04:55 GMT // 是服务器发来的当前资源最后一次修改的时间，下次请求时，如果服务器上当前资源的修改时间大于这个时间，就返回新的资源内容</li>\n<li><strong>Content-Type:</strong>  text/html; charset=utf-8  // 如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是 utf8 编码，否则可能出现乱码</li>\n<li><strong>Content-Encoding:</strong>  gzip  // 告诉客户端，应该采用 gzip 对资源进行解码</li>\n<li><strong>Connection:</strong>  keep-alive  // 告诉客户端服务器的 tcp 连接也是一个长连接</li>\n</ol>\n<h3 id=\"https-的基本概念\"><a class=\"anchor\" href=\"#https-的基本概念\">#</a> https 的基本概念</h3>\n<p>https: 是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。</p>\n<p>https 协议的作用：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p>\n<h3 id=\"http-和-https-的区别\"><a class=\"anchor\" href=\"#http-和-https-的区别\">#</a> http 和 https 的区别？</h3>\n<ul>\n<li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。</li>\n<li>Https 协议需要 ca 证书，费用较高。</li>\n<li>使用不同的链接方式，端口也不同，一般，http 协议的端口为 80，https 的端口为 443。</li>\n<li>http 的连接很简单，是无状态的。</li>\n</ul>\n<blockquote>\n<p>记忆口诀：明文传输超文本，安全等级各不同。CA 证书费用高，无状连接端难同。</p>\n</blockquote>\n<h4 id=\"https-协议的工作原理\"><a class=\"anchor\" href=\"#https-协议的工作原理\">#</a> https 协议的工作原理</h4>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/c42bc6f45451457fa6d614fb27534516~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<p>客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：</p>\n<ol>\n<li>客户端使用 https url 访问服务器，则要求 web 服务器 <code>建立 ssl 链接</code> 。</li>\n<li>web 服务器接收到客户端的请求之后，会 <code>将网站的证书（证书中包含了公钥），传输给客户端</code> 。</li>\n<li>客户端和 web 服务器端开始 <code>协商 SSL 链接的安全等级</code> ，也就是加密等级。</li>\n<li>客户端浏览器通过双方协商一致的安全等级， <code>建立会话密钥</code> ，然后通过网站的公钥来加密会话密钥，并传送给网站。</li>\n<li>web 服务器 <code>通过自己的私钥解密出会话密钥</code> 。</li>\n<li>web 服务器 <code>通过会话密钥加密与客户端之间的通信</code> 。</li>\n</ol>\n<blockquote>\n<p>记忆口诀：一连二传三协商，四建五得六使用。</p>\n</blockquote>\n<h4 id=\"https-协议的优缺点\"><a class=\"anchor\" href=\"#https-协议的优缺点\">#</a> https 协议的优缺点</h4>\n<ul>\n<li>HTTPS 协议要比 http 协议 <code>安全</code> ，可防止数据在传输过程中被窃取、改变，确保数据的完整性。</li>\n<li>https 握手阶段比较 <code>费时</code> ，会使页面加载时间延长 50%，增加 10%~20% 的耗电。</li>\n<li>https  <code>缓存</code> 不如 http 高效，会增加数据开销。</li>\n<li>SSL 证书也需要钱，功能越强大的 <code>证书费</code> 用越高。</li>\n<li>SSL 证书需要绑定  <code>IP</code> ，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。</li>\n</ul>\n<h3 id=\"tcpip网络模型\"><a class=\"anchor\" href=\"#tcpip网络模型\">#</a> TCP/IP 网络模型</h3>\n<p>TCP/IP 模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p>\n<ul>\n<li>链路层：负责封装和解封装 IP 报文，发送和接受 ARP/RARP 报文等。</li>\n<li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li>\n<li>传输层：负责对报文进行分组和重组，并以 TCP 或 UDP 协议格式封装报文。</li>\n<li>应用层：负责向用户提供应用程序，比如 HTTP、FTP、Telnet、DNS、SMTP 等。</li>\n</ul>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa80b3b48a84bd18d8e708c56a1dc22~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<h3 id=\"tcp三次握手\"><a class=\"anchor\" href=\"#tcp三次握手\">#</a> TCP 三次握手</h3>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baf3d5df95a74f47a1d779ee50c3411f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<ol>\n<li>第一次握手： <code>建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认</code> ；SYN：同步序列编号（Synchronize Sequence Numbers）。</li>\n<li>第二次握手： <code>服务器收到syn包并确认客户的SYN</code> （ack=j+1）， <code>同时也发送一个自己的SYN包</code> （syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</li>\n<li>第三次握手： <code>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）</code> ，此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP 连接成功）状态，完成三次握手。</li>\n</ol>\n<pre><code>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。\n</code></pre>\n<h3 id=\"tcp-四次挥手\"><a class=\"anchor\" href=\"#tcp-四次挥手\">#</a> TCP 四次挥手</h3>\n<ol>\n<li><code>客户端进程发出连接释放报文</code> ，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为 seq=u（等于前面已经传送过来的数据的最后一个字节的序号加 1），此时，客户端进入 FIN-WAIT-1（终止等待 1）状态。 TCP 规定，FIN 报文段即使不携带数据，也要消耗一个序号。</li>\n</ol>\n<p>2） <code>服务器收到连接释放报文，发出确认报文</code> ，ACK=1，ack=u+1，并且带上自己的序列号 seq=v，此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。TCP 服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。</p>\n<p>3）客户端收到服务器的确认请求后，此时，客户端就进入 FIN-WAIT-2（终止等待 2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。</p>\n<p>4） <code>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文</code> ，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq=w，此时，服务器就进入了 LAST-ACK（最后确认）状态，等待客户端的确认。</p>\n<p>5） <code>客户端收到服务器的连接释放报文后，必须发出确认</code> ，ACK=1，ack=w+1，而自己的序列号是 seq=u+1，此时，客户端就进入了 TIME-WAIT（时间等待）状态。注意此时 TCP 连接还没有释放，必须经过 2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态。</p>\n<p>6）服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。可以看到，服务器结束 TCP 连接的时间要比客户端早一些。</p>\n<h3 id=\"tcp和udp的区别\"><a class=\"anchor\" href=\"#tcp和udp的区别\">#</a> TCP 和 UDP 的区别</h3>\n<ol>\n<li>\n<p>TCP 是面向 <code>连接</code> 的，而 UDP 是面向无连接的。</p>\n</li>\n<li>\n<p>TCP 仅支持 <code>单播传输</code> ，UDP 提供了单播，多播，广播的功能。</p>\n</li>\n<li>\n<p>TCP 的三次握手保证了连接的 <code>可靠性</code> ；UDP 是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</p>\n</li>\n<li>\n<p>UDP 的 <code>头部开销</code> 比 TCP 的更小，数据 <code>传输速率更高</code> ， <code>实时性更好</code> 。</p>\n</li>\n</ol>\n<h3 id=\"http-请求跨域问题\"><a class=\"anchor\" href=\"#http-请求跨域问题\">#</a> HTTP 请求跨域问题</h3>\n<ol>\n<li>\n<p>跨域的原理</p>\n<p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的 <code>同源策略</code> 造成的。<br />\n<strong>同源策略</strong>，是浏览器对 JavaScript 实施的安全限制，只要 <code>协议、域名、端口</code> 有任何一个不同，都被当作是不同的域。<br />\n<strong>跨域原理</strong>，即是通过各种方式， <code>避开浏览器的安全限制</code> 。</p>\n</li>\n<li>\n<p>解决方案</p>\n<p>最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()</p>\n<ul>\n<li>\n<p><strong>JSONP</strong>：<br />\najax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p>\n<p>步骤：</p>\n<ol>\n<li>去创建一个 script 标签</li>\n<li>script 的 src 属性设置接口地址</li>\n<li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li>\n<li>通过定义函数名去接受返回的数据</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 动态创建 script</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设置 script 的 src 属性，并设置请求地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3000/?callback=getData'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 让 script 生效</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>JSONP 的缺点</strong>:<br />\nJSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p>\n</li>\n<li>\n<p><strong>document.domain</strong>  基础域名相同 子域名不同</p>\n</li>\n<li>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></strong> 利用在一个浏览器窗口内，载入所有的域名都是共享一个 <span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></p>\n</li>\n<li>\n<p><strong>CORS</strong> CORS (Cross-origin resource sharing) 跨域资源共享 服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求</p>\n</li>\n<li>\n<p><strong>proxy 代理</strong> 目前常用方式</p>\n</li>\n<li>\n<p><strong>window.postMessage()</strong>  利用 h5 新特性 window.postMessage ()</p>\n</li>\n<li>\n<p><strong>Websocket</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"cookie-sessionstorage-localstorage-的区别\"><a class=\"anchor\" href=\"#cookie-sessionstorage-localstorage-的区别\">#</a> Cookie、sessionStorage、localStorage 的区别</h3>\n<p><strong>相同点</strong>：</p>\n<ul>\n<li>存储在客户端</li>\n</ul>\n<p><strong>不同点</strong>：</p>\n<ul>\n<li>cookie 数据大小不能超过 4k；sessionStorage 和 localStorage 的存储比 cookie 大得多，可以达到 5M+</li>\n<li>cookie 设置的过期时间之前一直有效；localStorage 永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage 数据在当前浏览器窗口关闭后自动删除</li>\n<li>cookie 的数据会自动的传递到服务器；sessionStorage 和 localStorage 数据保存在本地</li>\n</ul>\n<h3 id=\"http状态码及常见状态码\"><a class=\"anchor\" href=\"#http状态码及常见状态码\">#</a> HTTP 状态码及常见状态码</h3>\n<h4 id=\"http状态码\"><a class=\"anchor\" href=\"#http状态码\">#</a> HTTP 状态码</h4>\n<ul>\n<li>1xx：指示信息类，表示请求已接受，继续处理</li>\n<li>2xx：指示成功类，表示请求已成功接受</li>\n<li>3xx：指示重定向，表示要完成请求必须进行更近一步的操作</li>\n<li>4xx：指示客户端错误，请求有语法错误或请求无法实现</li>\n<li>5xx：指示服务器错误，服务器未能实现合法的请求</li>\n</ul>\n<h4 id=\"常见状态码\"><a class=\"anchor\" href=\"#常见状态码\">#</a> 常见状态码</h4>\n<ul>\n<li>\n<p>200 OK：客户端请求成功</p>\n</li>\n<li>\n<p>301 Moved Permanently：所请求的页面已经永久重定向至新的 URL</p>\n</li>\n<li>\n<p>302 Found：所请求的页面已经临时重定向至新的 URL</p>\n</li>\n<li>\n<p>304 Not Modified 未修改。</p>\n</li>\n<li>\n<p>403 Forbidden：对请求页面的访问被禁止</p>\n</li>\n<li>\n<p>404 Not Found：请求资源不存在</p>\n</li>\n<li>\n<p>500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用</p>\n</li>\n<li>\n<p>503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常</p>\n</li>\n<li>\n<p>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码</p>\n<ul>\n<li>100 - 继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</li>\n<li>101 - 切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换</li>\n</ul>\n</li>\n<li>\n<p>2xx（成功）表示成功处理了请求的状态码</p>\n<ul>\n<li><code>200</code>  - 成功 服务器已经成功处理了请求。通常，这表示服务器提供了请求的网页</li>\n<li>201 - 已创建 请求成功并且服务器创建了新的资源</li>\n<li>202 - 已接受 服务器已接受请求，但尚未处理</li>\n<li>203 - 非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源</li>\n<li>204 - 无内容 服务器成功处理了请求，但没有返回任何内容</li>\n<li>205 - 重置内容 服务器成功处理了请求，但没有返回任何内容</li>\n</ul>\n</li>\n<li>\n<p>3xx（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向</p>\n<ul>\n<li>300 - 多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择</li>\n<li><code>301</code>  - 永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</li>\n<li><code>302</code>  - 临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li>\n<li>303 - 查看其它位置 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li>\n<li><code>304</code>  - 未修改 自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</li>\n<li>305 - 使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</li>\n<li><code>307</code>  - 临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</li>\n</ul>\n</li>\n<li>\n<p>4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理</p>\n<ul>\n<li><code>400</code>  - 错误请求 服务器不理解请求的语法</li>\n<li><code>401</code>  - 未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</li>\n<li><code>403</code>  - 禁止 服务器拒绝请求</li>\n<li><code>404</code>  - 未找到 服务器找不到请求的网页</li>\n<li>405 - 方法禁用 禁用请求中指定的方法</li>\n<li>406 - 不接受 无法使用请求的内容特性响应请求的网页</li>\n<li><code>407</code>  - 需要代理授权 此状态码与 401（未授权）类似，但指定请求者应当授权使用代理</li>\n<li><code>408</code>  - 请求超时 服务器等候请求时发生超时</li>\n<li>410 - 已删除 如果请求的资源已永久删除，服务器就会返回此响应</li>\n<li><code>413</code>  - 请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</li>\n<li><code>414</code>  - 请求的 URI 过长 请求的 URI（通常为网址）过长，服务器无法处理</li>\n</ul>\n</li>\n<li>\n<p>5xx（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</p>\n<ul>\n<li><code>500</code>  - 服务器内部错误 服务器遇到错误，无法完成请求</li>\n<li>501 - 尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</li>\n<li><code>502</code>  - 错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应</li>\n<li><code>503</code>  - 服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</li>\n<li><code>504</code>  - 网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求</li>\n<li>505 - HTTP 版本不受支持 服务器不支持请求中所用的 HTTP 协议版本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"介绍下304过程\"><a class=\"anchor\" href=\"#介绍下304过程\">#</a> 介绍下 304 过程</h3>\n<ul>\n<li>\n<p>a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。</p>\n</li>\n<li>\n<p>b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。</p>\n</li>\n<li>\n<p>c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。</p>\n</li>\n</ul>\n<h3 id=\"浏览器的缓存机制-强制缓存-协商缓存\"><a class=\"anchor\" href=\"#浏览器的缓存机制-强制缓存-协商缓存\">#</a> 浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3>\n<p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/05b3fe9c411f4881a8b22fe37eae170b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"图片\" /></p>\n<p>由上图我们可以知道：</p>\n<ul>\n<li>浏览器每次发起请求，都会 <code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li>\n<li>浏览器每次拿到返回的请求结果都会 <code>将该结果和缓存标识存入浏览器缓存中</code></li>\n</ul>\n<p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 <code>强制缓存</code> 和 <code>协商缓存</code> 。</p>\n<ul>\n<li>\n<p><strong>强制缓存</strong></p>\n<p><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code> 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  <code>Expires</code>  和  <code>Cache-Control</code> ，其中 Cache-Control 优先级比 Expires 高。</p>\n<p>强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：</p>\n<ol>\n<li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li>\n<li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li>\n<li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li>\n</ol>\n</li>\n<li>\n<p><strong>协商缓存</strong></p>\n<p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code> ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： <code>Last-Modified / If-Modified-Since</code>  和  <code>Etag / If-None-Match</code> ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：</p>\n<ol>\n<li>协商缓存生效，返回 304</li>\n<li>协商缓存失效，返回 200 和请求结果结果</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/5e0ce991db4847b98d9f049f9ffa5c93~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx\"># 彻底理解浏览器的缓存机制</span></p>\n<h3 id=\"http-请求跨域问题-2\"><a class=\"anchor\" href=\"#http-请求跨域问题-2\">#</a> HTTP 请求跨域问题</h3>\n<ol>\n<li>\n<p>跨域的原理</p>\n<p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的 <code>同源策略</code> 造成的。跨域访问是被各大浏览器所默认禁止的。<br />\n<strong>同源策略</strong>，是浏览器对 JavaScript 实施的安全限制，只要 <code>协议、域名、端口</code> 有任何一个不同，都被当作是不同的域。<br />\n<strong>跨域原理</strong>，即是通过各种方式， <code>避开浏览器的安全限制</code> 。</p>\n</li>\n<li>\n<p>解决方案</p>\n<p>最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()</p>\n<ul>\n<li>\n<p><strong>JSONP</strong>：<br />\najax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p>\n<p>步骤：</p>\n<ol>\n<li>去创建一个 script 标签</li>\n<li>script 的 src 属性设置接口地址</li>\n<li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li>\n<li>通过定义函数名去接受返回的数据</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 动态创建 script</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设置 script 的 src 属性，并设置请求地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3000/?callback=getData'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 让 script 生效</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>JSONP 的缺点</strong>:<br />\nJSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p>\n</li>\n<li>\n<p><strong>document.domain</strong> 基础域名相同 子域名不同</p>\n</li>\n<li>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></strong> 利用在一个浏览器窗口内，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13aW5kb3ctOW03aWdsMjNibzhwMWQ4MTZhaW1uMW05YXdsbXVqZDV5OWd6NjdldzdmLm5hbWU=\">载入所有的域名都是共享一个 window.name</span></p>\n</li>\n<li>\n<p><strong>CORS</strong><br />\nCORS (Cross-origin resource sharing) 跨域资源共享 是一种机制，是目前主流的跨域解决方案，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求</p>\n<p>1. 浏览器端会自动向请求头添加 origin 字段，表明当前请求来源。<br />\n2. 服务器设置 Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers 等 HTTP 响应头字段之后，浏览器将会允许跨域请求。</p>\n<p><strong>预检</strong></p>\n<p>但是还有复杂一点的请求，我们需要先发 OPTIONS 请求，a.com 想请求 b.com 它需要发一个自定义的 Headers：X-ABC 和 content-type，这个时候就不是简单请求了， <span class=\"exturl\" data-url=\"aHR0cDovL2EueG4tLWNvbWItMjk1azQxNGMuY29t\">a.com 要给 b.com</span> 发一个 options 请求，它其实在问 b.com 我用 post 行不行，还想在 Headers 中带 X-ABC 和 content-type；并不是所有的 headers 都发这个 OPTIONS 请求，因为 X-ABC 是自定义的，所以需要发；b.com 看到 OPTIONS 请求，先不会返回数据，先检查自己的策略，看看能不能支持这次请求，如果支持就返回 200。</p>\n<p>OPTIONS 请求返回以下报文</p>\n<p>HTTP/2.0 20 OK<br />\nAccess-Control-Allow-Origin:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hLmNvbQ==\">https://a.com</span><br />\nAccess-Control-Allow-Methods:POST,GET,OPTIONS<br />\nAccess-Control-Allow-Headers:X-ABC,Content-Type<br />\nAccess-Control-Max-Age:86400 // 告诉浏览器这个策略生效时间为一个小时，在一个小时之内发送类似的请求，不用在问服务端了，相当于缓存了<br />\n浏览器收到了 OPTIONS 的返回，会在发一次，这一次才是真正的请求数据，这次 headers 会带上 X-ABC、contentType。</p>\n<p>整体的过程 cors 将请求分为 2 种，简单请求和复杂请求，需不需要发送 OPTIONS 浏览器说的算，浏览器判断是简单请求还是复杂请求，cors 是非常广泛的跨域手段 这里的缺点是 OPTIONS 请求也是一次请求，消耗带宽，真正的请求也会延迟。</p>\n</li>\n<li>\n<p>最方便的跨域方案 <strong>proxy 代理 + Nginx</strong><br />\nnginx 是一款极其强大的 web 服务器，其优点就是轻量级、启动快、高并发。</p>\n<p>跨域问题的产生是因为浏览器的同源政策造成的，但是服务器与服务器之间的数据交换是没有这个限制。</p>\n<p>反向代理就是采用这种方式，建立一个虚拟的代理服务器来接收 internet 上的链接请求，然后转发给内部网络上的服务器，并将从服务器上得到的结果，返回给 internet 上请求链接的客户端。现在的新项目中 nginx 几乎是首选，我们用 node 或者 java 开发的服务通常都需要经过 nginx 的反向代理。</p>\n</li>\n<li>\n<p><strong>window.postMessage()</strong> 利用 h5 新特性 window.postMessage ()</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>跨域传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAzMjMyNzY5MTgyNTQ3OTk4\"># 跨域，不可不知的基础概念</span></p>\n<h3 id=\"观看记录\"><a class=\"anchor\" href=\"#观看记录\">#</a> ！！！！！！观看记录！！！！！！！！</h3>\n<h3 id=\"粘包问题分析与对策\"><a class=\"anchor\" href=\"#粘包问题分析与对策\">#</a> 粘包问题分析与对策</h3>\n<p>TCP 粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p>\n<p><strong>粘包出现原因</strong></p>\n<p>简单得说，在流传输中出现，UDP 不会出现粘包，因为它有<strong>消息边界</strong></p>\n<p>粘包情况有两种，一种是 <code>粘在一起的包都是完整的数据包</code> ，另一种情况是 <code>粘在一起的包有不完整的包</code> 。</p>\n<p>为了<strong>避免粘包</strong>现象，可采取以下几种措施：</p>\n<p>（1）对于发送方引起的粘包现象，用户可通过编程设置来避免， <code>TCP提供了强制数据立即传送的操作指令push</code> ，TCP 软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；</p>\n<p>（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、 <code>提高接收进程优先级等措施</code> ，使其及时接收数据，从而尽量避免出现粘包现象；</p>\n<p>（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。 <code>分包多发</code> 。</p>\n<p>以上提到的三种措施，都有其不足之处。</p>\n<p>（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。</p>\n<p>（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。</p>\n<p>（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。</p>\n<blockquote>\n<p>一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。</p>\n</blockquote>\n<h3 id=\"客户端与服务端长连接的几种方式\"><a class=\"anchor\" href=\"#客户端与服务端长连接的几种方式\">#</a> 客户端与服务端长连接的几种方式</h3>\n<ol>\n<li>\n<p><strong>ajax 轮询</strong><br />\n<strong>实现原理</strong>：ajax 轮询指客户端每间隔一段时间向服务端发起请求，保持数据的同步。</p>\n<p><strong>优点</strong>：可实现基础（指间隔时间较短）的数据更新。</p>\n<p><strong>缺点</strong>：这种方法也只是尽量的模拟即时传输，但并非真正意义上的即时通讯，很有可能出现客户端请求时，服务端数据并未更新。或者服务端数据已更新，但客户端未发起请求。导致多次请求资源浪费，效率低下。【 <code>数据更新不及时，效率低下</code> 】</p>\n</li>\n<li>\n<p><strong>long poll 长轮询</strong></p>\n<p><strong>实现原理</strong>：<br />\nlong poll 指的是客户端发送请求之后，如果没有数据返回，服务端会将请求挂起放入队列（不断开连接）处理其他请求，直到有数据返回给客户端。然后客户端再次发起请求，以此轮询。在 HTTP1.0 中客户端可以设置请求头 Connection:keep-alive，服务端收到该请求头之后知道这是一个长连接，在响应报文头中也添加 Connection:keep-alive。客户端收到之后表示长连接建立完成，可以继续发送其他的请求。在 HTTP1.1 中默认使用了 Connection:keep-alive 长连接。</p>\n<p><strong>优点</strong>：减少客户端的请求，降低无效的网络传输，保证每次请求都有数据返回，不会一直占用线程。</p>\n<p><strong>缺点</strong>：无法处理高并发，当客户端请求量大，请求频繁时对服务器的处理能力要求较高。服务器一直保持连接会消耗资源，需要同时维护多个线程，服务器所能承载的 TCP 连接数是有上限的，这种轮询很容易把连接数顶满。每次通讯都需要客户端发起，服务端不能主动推送。【 <code>无法处理高并发，消耗服务器资源严重，服务端不能主动推送</code> 】</p>\n</li>\n<li>\n<p><strong>iframe 长连接</strong></p>\n<p><strong>实现原理：</strong><br />\n在网页上嵌入一个 iframe 标签，该标签的 src 属性指向一个长连接请求。这样服务端就可以源源不断地给客户端传输信息。保障信息实时更新。</p>\n<p><strong>优点</strong>：消息及时传输。</p>\n<p><strong>缺点</strong>： <code>消耗服务器资源</code> 。</p>\n</li>\n<li>\n<p><strong>WebSocket</strong></p>\n<p><strong>实现原理</strong>：<br />\nWebsocket 实现了客户端与服务端的双向通信，只需要连接一次，就可以相互传输数据，很适合实时通讯、数据实时更新等场景。</p>\n<p>Websocket 协议与 HTTP 协议没有关系，它是一个建立在 TCP 协议上的全新协议，为了兼容 HTTP 握手规范，在握手阶段依然使用 HTTP 协议，握手完成之后，数据通过 TCP 通道进行传输。</p>\n<p>Websoket 数据传输是通过 frame 形式，一个消息可以分成几个片段传输。这样大数据可以分成一些小片段进行传输，不用考虑由于数据量大导致标志位不够的情况。也可以边生成数据边传递消息，提高传输效率。</p>\n<p><strong>优点</strong>：<br />\n双向通信。客户端和服务端双方都可以主动发起通讯。<br />\n没有同源限制。客户端可以与任意服务端通信，不存在跨域问题。<br />\n数据量轻。第一次连接时需要携带请求头，后面数据通信都不需要带请求头，减少了请求头的负荷。<br />\n传输效率高。因为只需要一次连接，所以数据传输效率高。</p>\n<p><strong>缺点</strong>：<br />\n长连接需要后端处理业务的代码更稳定，推送消息相对复杂；<br />\n长连接受网络限制比较大，需要处理好重连。<br />\n兼容性，WebSocket 只支持 IE10 及其以上版本。<br />\n服务器长期维护长连接需要一定的成本，各个浏览器支持程度不一；<br />\n成熟的 HTTP 生态下有大量的组件可以复用，WebSocket 则没有，遇到异常问题难以快速定位快速解决。【需要后端代码稳定，受网络限制大，兼容性差，维护成本高，生态圈小】</p>\n</li>\n</ol>\n<h3 id=\"利用socket建立网络连接的步骤\"><a class=\"anchor\" href=\"#利用socket建立网络连接的步骤\">#</a> 利用 Socket 建立网络连接的步骤</h3>\n<p>建立 Socket 连接至少需要一对套接字，其中一个运行于客户端，称为 ClientSocket ，另一个运行于服务器端，称为 ServerSocket 。</p>\n<p>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p>\n<p>1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p>\n<p>2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。</p>\n<p>为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p>\n<p>3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。</p>\n<p>而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>\n<h3 id=\"非对称加密rsa\"><a class=\"anchor\" href=\"#非对称加密rsa\">#</a> 非对称加密 RSA</h3>\n<p>简介：</p>\n<ol>\n<li>对称加密算法又称现代加密算法。</li>\n<li>非对称加密是计算机通信安全的基石，保证了加密数据不会被破解。</li>\n<li>非对称加密算法需要两个密钥：公开密钥 (publickey) 和私有密 (privatekey)</li>\n<li>公开密钥和私有密钥是一对</li>\n</ol>\n<p>如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。 <br />\n如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。</p>\n<p>特点： <br />\n算法强度复杂，安全性依赖于算法与密钥。 <br />\n加密解密速度慢。</p>\n<p>与对称加密算法的对比： <br />\n对称加密只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。 <br />\n非对称加密有两种密钥，其中一个是公开的。</p>\n<p>RSA 应用场景： <br />\n由于 RSA 算法的加密解密速度要比对称算法速度慢很多，在实际应用中，通常采取 <br />\n数据本身的加密和解密使用对称加密算法 (AES)。 用 RSA 算法加密并传输对称算法所需的密钥。</p>\n<h3 id=\"http1-http2-http3\"><a class=\"anchor\" href=\"#http1-http2-http3\">#</a> HTTP1、HTTP2、HTTP3</h3>\n<p>HTTP/2 相比于 HTTP/1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，虽如此但 HTTP/2 并非完美的，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。</p>\n<h3 id=\"http11-的缺陷\"><a class=\"anchor\" href=\"#http11-的缺陷\">#</a> <strong>HTTP1.1 的缺陷</strong></h3>\n<ol>\n<li>\n<p>高延迟 — 队头阻塞 (Head-Of-Line Blocking)</p>\n<p><code>队头阻塞</code> 是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。</p>\n<p>针对队头阻塞的解决办法:</p>\n<ul>\n<li><code>将同一页面的资源分散到不同域名下，提升连接上限</code> 。</li>\n<li><code>合并小文件减少资源数</code> ，使用精灵图。</li>\n<li><code>内联(Inlining)资源</code> 是另外一种防止发送很多小图请求的技巧，将图片的原始数据嵌入在 CSS 文件里面的 URL 里，减少网络请求次数。</li>\n<li><code>减少请求数量</code> ，合并文件。</li>\n</ul>\n</li>\n<li>\n<p>无状态特性 — 阻碍交互</p>\n<p><code>无状态是指协议对于连接状态没有记忆能力</code> 。纯净的 HTTP 是没有 cookie 等机制的，每一个连接都是一个新的连接。</p>\n<p><code>Header里携带的内容过大，在一定程度上增加了传输的成本</code> 。且请求响应报文里有大量字段值都是重复的。</p>\n</li>\n<li>\n<p>明文传输 — 不安全性</p>\n<p>HTTP/1.1 在传输数据时，所有 <code>传输的内容都是明文</code> ，客户端和服务器端都无法验证对方的身份，无法保证数据的安全性。</p>\n</li>\n<li>\n<p>不支持服务端推送</p>\n</li>\n</ol>\n<blockquote>\n<p>记忆口诀：队头阻塞高延迟，无状态阻交互，明文传输不安全，服务推送不支持。</p>\n</blockquote>\n<p><strong>HTTP 1.1 排队问题</strong></p>\n<p>HTTP 1.1 多个文件共用一个 TCP，这样可以减少 tcp 握手，这样 3 个文件就不用握手 9 次了，不过这样请求文件需要排队，请求和返回都需要排队， 如果第一个文件响应慢，会阻塞后面的文件，这样就产生了对头的等待问题。</p>\n<p>有的网站可能会有很多文件，浏览器处于对机器性能的考虑，它不可能让你无限制的发请求建连接，因为建立连接需要占用资源，浏览器不想把用户的网络资源都占用了，所以浏览器最多会建立 6 个 tcp 连接；如果有上百个文件可能都需要排队，http2.0 正在解决这个问题。</p>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ecdc60670194df7957ee59e1f56701f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<h3 id=\"spdy-协议与-http2-简介\"><a class=\"anchor\" href=\"#spdy-协议与-http2-简介\">#</a> SPDY 协议与 HTTP/2 简介</h3>\n<h4 id=\"1-http2-简介\"><a class=\"anchor\" href=\"#1-http2-简介\">#</a> 1、HTTP/2 简介</h4>\n<p>HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写。<strong>HTTP/2 基于 SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）</strong> 。</p>\n<h4 id=\"2-http2-新特性\"><a class=\"anchor\" href=\"#2-http2-新特性\">#</a> 2、HTTP/2 新特性</h4>\n<h4 id=\"1-二进制传输\"><a class=\"anchor\" href=\"#1-二进制传输\">#</a> 1、二进制传输</h4>\n<p><code>HTTP/2传输数据量的大幅减少,主要有两个原因:以二进制方式传输和Header 压缩</code> 。我们先来介绍二进制传输，HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。 <code>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码</code> 。</p>\n<h4 id=\"2-header-压缩\"><a class=\"anchor\" href=\"#2-header-压缩\">#</a> 2、Header 压缩</h4>\n<p>HTTP/2 并没有使用传统的压缩算法，而是开发了专门的 &quot;HPACK” 算法，在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。</p>\n<h4 id=\"3-多路复用\"><a class=\"anchor\" href=\"#3-多路复用\">#</a> 3、多路复用</h4>\n<p>在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/f756ad3403bc4fe18e970c56677c796e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<h4 id=\"4-server-push\"><a class=\"anchor\" href=\"#4-server-push\">#</a> 4、Server Push</h4>\n<p>HTTP2 还在一定程度上改变了传统的 “请求 - 应答” 工作模式，服务器不再是完全被动地响应请求，也可以新建 “流” 主动向客户端发送消息。减少等待的延迟，这被称为 &quot; <code>服务器推送</code>  &quot;（ Server Push，也叫 Cache push）</p>\n<h4 id=\"5-提高安全性\"><a class=\"anchor\" href=\"#5-提高安全性\">#</a> 5、提高安全性</h4>\n<p>出于兼容的考虑，HTTP/2 延续了 HTTP/1 的 “明文” 特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密。</p>\n<p>但由于 HTTPS 已经是大势所趋，而且主流的浏览器 Chrome、Firefox 等都公开宣布只支持加密的 HTTP/2，<strong>所以 “事实上” 的 HTTP/2 是加密的</strong>。也就是说，互联网上通常所能见到的 HTTP/2 都是使用 &quot;https” 协议名，跑在 TLS 上面。HTTP/2 协议定义了两个字符串标识符：“h2&quot; 表示加密的 HTTP/2，“h2c” 表示明文的 HTTP/2。</p>\n<h4 id=\"6-防止对头阻塞\"><a class=\"anchor\" href=\"#6-防止对头阻塞\">#</a> 6、防止对头阻塞</h4>\n<p>http1.1 如果第一个文件阻塞，第二个文件也就阻塞了。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img/blog/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%89%8B%E6%9C%BA/2022%E5%B9%B4%E6%9C%80%E6%96%B0%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/b67bd1f793a3425d9e8a415cae9b7863~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<p>http2.0 的解决，把 3 个请求打包成一个小块发送过去，即使第一个阻塞了，后面 2 个也可以回来；相当于 3 个文件同时请求，就看谁先回来谁后回来，阻塞的可能就后回来，对带宽的利用是最高的；但没有解决 TCP 的对头阻塞，如果 TCP 发过去的一个分包发丢了，他会重新发一次；http2.0 的解决了大文件的阻塞。</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77d8ae8e0de44f3aa693f0626a346d4c~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>一个分包请求 3 个文件，即使第一个阻塞了，第二个也能返回</p>\n<h3 id=\"http2-的缺点\"><a class=\"anchor\" href=\"#http2-的缺点\">#</a> HTTP/2 的缺点</h3>\n<p>虽然 HTTP/2 解决了很多之前旧版本的问题，但它还是存在一个巨大的问题，<strong>主要是底层支撑的 TCP 协议造成的</strong>。HTTP/2 的缺点主要有以下几点：</p>\n<ol>\n<li>TCP 以及 TCP+TLS 建立连接时延时</li>\n<li>TCP 的队头阻塞并没有彻底解决</li>\n<li>多路复用导致服务器压力上升也容易 Timeout</li>\n</ol>\n<h3 id=\"http3-新特性\"><a class=\"anchor\" href=\"#http3-新特性\">#</a> HTTP/3 新特性</h3>\n<h4 id=\"1-http3简介\"><a class=\"anchor\" href=\"#1-http3简介\">#</a> 1、HTTP/3 简介</h4>\n<p>Google 在推 SPDY 的时候就搞了个基于 UDP 协议的 “QUIC” 协议，让 HTTP 跑在 QUIC 上而不是 TCP 上。而 “HTTP over QUIC” 就是 HTTP/3，真正 “完美” 地解决了 “队头阻塞” 问题。</p>\n<p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。</p>\n<h4 id=\"2-quic新功能\"><a class=\"anchor\" href=\"#2-quic新功能\">#</a> 2、QUIC 新功能</h4>\n<p>QUIC 基于 UDP，而 UDP 是 “无连接” 的，根本就不需要 “握手” 和 “挥手”，所以就比 TCP 来得快。此外 QUIC 也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似 HTTP/2 的 “流” 和 “多路复用”，单个 “流 &quot; 是有序的，可能会因为丢包而阻塞，但其他 “流” 不会受到影响。具体来说 QUIC 协议有以下特点：</p>\n<ul>\n<li>\n<p><strong>实现了类似 TCP 的流量控制、传输可靠性的功能</strong></p>\n<p>虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。</p>\n</li>\n<li>\n<p><strong>实现了快速握手功能</strong></p>\n<p>由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。<strong>0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势</strong>。</p>\n</li>\n<li>\n<p><strong>集成了 TLS 加密功能</strong></p>\n</li>\n<li>\n<p><strong>多路复用，彻底解决 TCP 中队头阻塞的问题</strong></p>\n<p>和 TCP 不同，QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流。实现了数据流的单独传输，就解决了 TCP 中队头阻塞的问题。</p>\n</li>\n<li>\n<p><strong>连接迁移</strong></p>\n<p>TCP 是按照 4 要素（客户端 IP、端口，服务器 IP、端口）确定一个连接的。而 QUIC 则是让客户端生成一个 Connection ID （64 位）来区别不同连接。只要 Connection ID 不变，连接就不需要重新建立，即便是客户端的网络发生变化。由于迁移客户端继续使用相同的会话密钥来加密和解密数据包，QUIC 还提供了迁移客户端的自动加密验证。</p>\n</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>HTTP/1.1 有两个主要的缺点：安全不足和性能不高。</li>\n<li>HTTP/2 完全兼容 HTTP/1，是 “更安全的 HTTP、更快的 HTTPS&quot;，二进制传输、头部压缩、多路复用、服务器推送等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；</li>\n<li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</li>\n</ul>\n<h3 id=\"理解xsscsrfddos攻击原理以及避免方式\"><a class=\"anchor\" href=\"#理解xsscsrfddos攻击原理以及避免方式\">#</a> 理解 xss，csrf，ddos 攻击原理以及避免方式</h3>\n<p><code>XSS</code> ( <code>Cross-Site Scripting</code> ，<strong>跨站脚本攻击</strong>) 是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取  <code>cookie，session tokens</code> ，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。</p>\n<p><code>CSRF</code> （ <code>Cross-site request forgery</code> ）<strong>跨站请求伪造</strong>：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p>\n<p><strong>XSS 避免方式：</strong></p>\n<ol>\n<li><code>url</code>  参数使用 <code>encodeURIComponent</code>  方法转义</li>\n<li>尽量不是有 <code>InnerHtml</code>  插入 <code>HTML</code>  内容</li>\n<li>使用特殊符号、标签转义符。</li>\n</ol>\n<p><code>CSRF</code>  避免方式：</p>\n<ol>\n<li>\n<p>添加验证码</p>\n</li>\n<li>\n<p>使用 token</p>\n<ul>\n<li>服务端给用户生成一个 token，加密后传递给用户</li>\n<li>用户在提交请求时，需要携带这个 token</li>\n<li>服务端验证 token 是否正确</li>\n</ul>\n</li>\n</ol>\n<p><code>DDoS</code>  又叫分布式拒绝服务，全称  <code>Distributed Denial of Service</code> ，其原理就是利用大量的请求造成资源过载，导致服务不可用。</p>\n<p><strong> <code>DDos</code>  避免方式：</strong></p>\n<ol>\n<li>限制单 IP 请求频率。</li>\n<li>防火墙等防护设置禁止 <code>ICMP</code>  包等</li>\n<li>检查特权端口的开放</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXprek56STBNRE14TlE9PSZhbXA7bWlkPTIyNDc0ODcxMTYmYW1wO2lkeD0xJmFtcDtzbj0wOTE4N2VlYjdlNDVmYWExYmVlODZmZjQ4YWUxNGJlMSZhbXA7c291cmNlPTQxI3dlY2hhdF9yZWRpcmVjdA==\">360 技术：嗨，送你一张 Web 性能优化地图</span></p>\n",
            "tags": [
                "前端面试",
                "前端面试"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/06.TypeScript/",
            "url": "https://aaaa8880788.github.io/web-interview/06.TypeScript/",
            "title": "TypeScript",
            "date_published": "2024-03-02T02:52:21.679Z",
            "content_html": "<p>1、什么是 TypeScript？<br />\nTypeScript 是 JavaScript 的加强版，它给 JavaScript 添加了可选的静态类型和基于类的面向对象编程，它拓展了 JavaScript 的语法。</p>\n<p>而且 TypeScript 不存在跟浏览器不兼容的问题，因为在编译时，它产生的都是 JavaScript 代码。</p>\n<p>2、TypeScript 和 JavaScript 的区别是什么？<br />\nTypescript 是 JavaScript 的超集，可以被编译成 JavaScript 代码。 用 JavaScript 编写的合法代码，在 TypeScript 中依然有效。Typescript 是纯面向对象的编程语言，包含类和接口的概念。 程序员可以用它来编写面向对象的服务端或客户端程序，并将它们编译成 JavaScript 代码。</p>\n<p>TypeScript 和 JavaScript 的关系<br />\n TypeScript 引入了很多面向对象程序设计的特征，包括：</p>\n<p>interfaces  接口<br />\n classes  类<br />\n enumerated types 枚举类型<br />\n generics 泛型<br />\n modules 模块<br />\n主要不同点如下：<br />\nTS 是一种面向对象编程语言，而 JS 是一种脚本语言（尽管 JS 是基于对象的）。<br />\nTS 支持可选参数， JS 则不支持该特性。<br />\nTS 支持静态类型，JS 不支持。<br />\nTS 支持接口，JS 不支持接口。</p>\n<p>3 为什么要用 TypeScript ？<br />\nTS 在开发时就能给出编译错误， 而 JS 错误则需要在运行时才能暴露。<br />\n作为强类型语言，你可以明确知道数据的类型。代码可读性极强，几乎每个人都能理解。<br />\nTS 非常流行，被很多业界大佬使用。像 Asana、Circle CI 和 Slack 这些公司都在用 TS。</p>\n<p>4、TypeScript 和 JavaScript 哪个更好？<br />\n由于 TS 的先天优势，TS 越来越受欢迎。但是 TS 最终不可能取代 JS，因为 JS 是 TS 的核心。</p>\n<p>选择 TypeScript 还是 JavaScript 要由开发者自己去做决定。如果你喜欢类型安全的语言，那么推荐你选择 TS。 如果你已经用 JS 好久了，你可以选择走出舒适区学习 TS，也可以选择坚持自己的强项，继续使用 JS。</p>\n<p>5、什么是泛型？<br />\n泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，使用时再去指定类型的一种特性。<br />\n可以把泛型理解为代表类型的参数<br />\n // 我们希望传入的值是什么类型，返回的值就是什么类型<br />\n // 传入的值可以是任意的类型，这时候就可以用到 泛型</p>\n<p>// 如果使用 any 的话，就失去了类型检查的意义</p>\n<p>function createArray1(length: any, value: any): Array&lt;any&gt; {<br />\nlet result: any = [];<br />\nfor (let i = 0; i &lt; length; i++) {<br />\nresult[i] = value;<br />\n}<br />\nreturn result;<br />\n}</p>\n<p>let result = createArray1(3, 'x');<br />\nconsole.log(result);</p>\n<p>// 最傻的写法：每种类型都得定义一种函数<br />\n function createArray2 (length: number, value: string): Array&lt;string&gt; {<br />\nlet result: Array&lt;string&gt; = [];<br />\nfor (let i = 0; i &lt; length; i++) {<br />\nresult[i] = value;<br />\n}<br />\nreturn result;<br />\n}</p>\n<p>function createArray3(length: number, value: number): Array&lt;number&gt; {<br />\nlet result: Array&lt;number&gt; = [];<br />\nfor (let i = 0; i &lt; length; i++) {<br />\nresult[i] = value;<br />\n}<br />\nreturn result;<br />\n}<br />\n// 或者使用函数重载，写法有点麻烦<br />\n function createArray4 (length: number, value: number): Array&lt;number&gt;<br />\nfunction createArray4(length: number, value: string): Array&lt;string&gt;<br />\nfunction createArray4(length: number, value: any): Array&lt;any&gt; {<br />\nlet result: Array&lt;number&gt; = [];<br />\nfor (let i = 0; i &lt; length; i++) {<br />\nresult[i] = value;<br />\n}<br />\nreturn result;<br />\n}<br />\ncreateArray4(6, '666');<br />\n// 使用泛型<br />\n // 有关联的地方都改成 &lt;T&gt;<br />\nfunction createArray&lt;T&gt;(length: number, value: T): Array&lt;T&gt; {<br />\nlet result: T[] = [];<br />\nfor (let i = 0; i &lt; length; i++) {<br />\nresult[i] = value;<br />\n}<br />\nreturn result;<br />\n}<br />\n// 使用的时候再指定类型<br />\n let result = createArray&lt;string&gt;(3, 'x');<br />\n// 也可以不指定类型，TS 会自动类型推导<br />\n let result2 = createArray (3, 'x');<br />\nconsole.log(result);<br />\n6、TS 中的类<br />\n TypeScript 是面向对象的 JavaScript。而其中的类描述了所创建的对象共同的属性和方法。</p>\n<p>传统的 JavaScript 程序使用函数和基于原型的继承来创建可重用的组件，但这对于熟悉使用面向对象方式的程序员来说有些棘手，因为他们用的是基于类的继承并且对象是从类构建出来的。</p>\n<p>从 ECMAScript 2015，也就是 ECMAScript 6，JavaScript 程序将可以使用这种基于类的面向对象方法。在 TypeScript 里允许开发者现在就使用这些特性，并且编译后的 JavaScript 可以在所有主流浏览器和平台上运行，</p>\n<p>7、什么是构造函数，构造函数作用是什么？<br />\n构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。而 TypeScript 的构造函数用关键字 constructor 来实现。可以通过 this（和 java/C# 一样代表对象实例的成员访问）关键字来访问当前类体中的属性和方法。</p>\n<p>8、实例化是什么？<br />\n一般情况下，创建一个类后并不能直接的对属性和方法进行引用，必须对类进行实例化，即创建一个对象。TypeScript 中用 new 关键字创建对象。实例化后通过 “.” 来访问属性和方法</p>\n<p>9、方法重写是什么？<br />\n子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写</p>\n<p>重写的作用在于子类可以根据需要，定义特定于自己的行为。也就是说子类能够根据需要实现父类的方法。</p>\n<p>10、什么是可索引类型接口？<br />\n一般用来约束数组和对象</p>\n<p>/ 数字索引 —— 约束数组<br />\n //index 是随便取的名字，可以任意取名<br />\n // 只要 index 的类型是 number，那么值的类型必须是 string<br />\ninterface StringArray {<br />\n//key 的类型为 number ，一般都代表是数组<br />\n // 限制 value 的类型为 string<br />\n[index:number]:string<br />\n}<br />\nlet arr:StringArray = ['aaa','bbb'];<br />\nconsole.log(arr);</p>\n<p>// 字符串索引 —— 约束对象<br />\n // 只要 index 的类型是 string，那么值的类型必须是 string<br />\ninterface StringObject {<br />\n//key 的类型为 string ，一般都代表是对象<br />\n // 限制 value 的类型为 string<br />\n[index:string]:string<br />\n}<br />\nlet obj:StringObject = {name:'ccc'};<br />\n11、什么是函数类型接口？<br />\n对方法传入的参数和返回值进行约束<br />\n // 注意区别</p>\n<p>// 普通的接口<br />\n interface discount1 {<br />\ngetNum : (price:number) =&gt; number<br />\n}</p>\n<p>// 函数类型接口<br />\n interface discount2 {<br />\n// 注意:<br />\n// “:” 前面的是函数的签名，用来约束函数的参数<br />\n // &quot;:&quot; 后面的用来约束函数的返回值<br />\n (price:number):number<br />\n}<br />\nlet cost:discount2 = function(price:number):number{<br />\nreturn price * .8;<br />\n}</p>\n<p>// 也可以使用类型别名<br />\n type Add = (x: number, y: number) =&gt; number<br />\nlet add: Add = (a: number, b: number) =&gt; a + b<br />\n12、什么是类类型接口？<br />\n如果接口用于一个类的话，那么接口会表示 “行为的抽象”<br />\n 对类的约束，让类去实现接口，类可以实现多个接口<br />\n接口只能约束类的公有成员（实例属性 / 方法），无法约束私有成员、构造函数、静态属性 / 方法</p>\n<p>// 接口可以在面向对象编程中表示为行为的抽象<br />\n interface Speakable {<br />\nname: string;</p>\n<pre><code> // &quot;:&quot; 前面的是函数签名，用来约束函数的参数\n// &quot;:&quot; 后面的用来约束函数的返回值\nspeak(words: string): void\n</code></pre>\n<p>}</p>\n<p>interface Speakable2 {<br />\nage: number;<br />\n}</p>\n<p>class Dog implements Speakable, Speakable2 {<br />\nname!: string;<br />\nage = 18;</p>\n<pre><code>speak(words: string) &#123;\n    console.log(words);\n&#125;\n</code></pre>\n<p>}</p>\n<p>let dog = new Dog();<br />\ndog.speak (' 汪汪汪 ');<br />\n13、什么是混合类型接口？<br />\n一个对象可以同时做为函数和对象使用</p>\n<p>interface FnType {<br />\n(getName:string):string;<br />\n}</p>\n<p>interface MixedType extends FnType{<br />\nname:string;<br />\nage:number;<br />\n}<br />\ninterface Counter {<br />\n(start: number): string;<br />\ninterval: number;<br />\nreset(): void;<br />\n}</p>\n<p>function getCounter(): Counter {<br />\nlet counter = &lt;Counter&gt;function (start: number) { };<br />\ncounter.interval = 123;<br />\ncounter.reset = function () { };<br />\nreturn counter;<br />\n}</p>\n<p>let c = getCounter();<br />\nc(10);<br />\nc.reset();<br />\nc.interval = 5.0;<br />\n14、never 和 void 的区别？<br />\nvoid 表示没有任何类型（可以被赋值为 null 和 undefined）。<br />\nnever 表示一个不包含值的类型，即表示永远不存在的值。<br />\n拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。</p>\n<p>15、TS 的学前基础？<br />\n因为 TypeScript 是对 JavaScript 的扩展，更准确的说是 ECMAScript。所以，我们学习我们这套 TypeScript 的课程，需要具备 ECMAScript 语言的基础：</p>\n<p>熟悉语法基础（变量、语句、函数等基础概念）<br />\n掌握内置对象（Array、Date 等）的使用<br />\n面向对象基本概念（构造函数、原型、继承）</p>\n",
            "tags": [
                "前端面试",
                "TypeScript",
                "前端面试"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/07.Vue/",
            "url": "https://aaaa8880788.github.io/web-interview/07.Vue/",
            "title": "Vue",
            "date_published": "2024-03-02T02:52:21.679Z",
            "content_html": "<h2 id=\"vue-面试专题\"><a class=\"anchor\" href=\"#vue-面试专题\">#</a> Vue 面试专题</h2>\n<h3 id=\"简述mvvm\"><a class=\"anchor\" href=\"#简述mvvm\">#</a> 简述 MVVM</h3>\n<p><strong>什么是 MVVM？</strong></p>\n<p><code>视图模型双向绑定</code> ，是 <code>Model-View-ViewModel</code>  的缩写，也就是把 <code>MVC</code>  中的 <code>Controller</code>  演变成 <code>ViewModel。Model</code>  层代表数据模型， <code>View</code>  代表 UI 组件， <code>ViewModel</code>  是 <code>View</code>  和 <code>Model</code>  层的桥梁，数据会绑定到 <code>viewModel</code>  层并自动将数据渲染到页面中，视图变化的时候会通知 <code>viewModel</code>  层更新数据。以前是操作 DOM 结构更新视图，现在是 <code>数据驱动视图</code> 。</p>\n<p><strong>MVVM 的优点：</strong></p>\n<p>1. <code>低耦合</code> 。视图（View）可以独立于 Model 变化和修改，一个 Model 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变化，当 Model 变化的时候 View 也可以不变；<br />\n2. <code>可重用性</code> 。你可以把一些视图逻辑放在一个 Model 里面，让很多 View 重用这段视图逻辑。<br />\n3. <code>独立开发</code> 。开发人员可以专注于业务逻辑和数据的开发 (ViewModel)，设计人员可以专注于页面设计。<br />\n4. <code>可测试</code> 。</p>\n<h3 id=\"vue底层实现原理\"><a class=\"anchor\" href=\"#vue底层实现原理\">#</a> Vue 底层实现原理</h3>\n<p>vue.js 是采用数据劫持结合发布者 - 订阅者模式的方式，通过 Object.defineProperty () 来劫持各个属性的 setter 和 getter，在数据变动时发布消息给订阅者，触发相应的监听回调<br />\n Vue 是一个典型的 MVVM 框架，模型（Model）只是普通的 javascript 对象，修改它则试图（View）会自动更新。这种设计让状态管理变得非常简单而直观</p>\n<p><strong>Observer（数据监听器）</strong> : Observer 的核心是通过 Object.defineProprtty () 来监听数据的变动，这个函数内部可以定义 setter 和 getter，每当数据发生变化，就会触发 setter。这时候 Observer 就要通知订阅者，订阅者就是 Watcher</p>\n<p><strong>Watcher（订阅者）</strong> : Watcher 订阅者作为 Observer 和 Compile 之间通信的桥梁，主要做的事情是：</p>\n<ol>\n<li>在自身实例化时往属性订阅器 (dep) 里面添加自己</li>\n<li>自身必须有一个 update () 方法</li>\n<li>待属性变动 dep.notice () 通知时，能调用自身的 update () 方法，并触发 Compile 中绑定的回调</li>\n</ol>\n<p><strong>Compile（指令解析器）</strong> : Compile 主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图</p>\n<p>传送门：☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk0OTU5OTk4MjgzOTA3MTAyI2hlYWRpbmctMg==\">20 分钟吃透 Diff 算法核心原理</span></p>\n<h3 id=\"谈谈对vue生命周期的理解\"><a class=\"anchor\" href=\"#谈谈对vue生命周期的理解\">#</a> 谈谈对 vue 生命周期的理解？</h3>\n<p>每个 <code>Vue</code>  实例在创建时都会经过一系列的初始化过程， <code>vue</code>  的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件</p>\n<ul>\n<li><code>create阶段</code> ：vue 实例被创建<br />\n <code>beforeCreate</code> : 最初调用触发，创建前，此时 data 和 methods 中的数据都还没有初始化，data 和 events 都不能用<br />\n <code>created</code> ： 创建完毕，data 中有值，未挂载，data 和 events 已经初始化好，data 已经具有响应式；在这里可以发送请求</li>\n<li><code>mount阶段</code> ： vue 实例被挂载到真实 DOM 节点<br />\n <code>beforeMount</code> ：在模版编译之后，渲染之前触发，可以发起服务端请求，去数据，ssr 中不可用，基本用不上这个 hook<br />\n <code>mounted</code> : 在渲染之后触发，此时可以操作 DOM，并能访问组件中的 DOM 以及 $ref,SSR 中不可用</li>\n<li><code>update阶段</code> ：当 vue 实例里面的 data 数据变化时，触发组件的重新渲染<br />\n <code>beforeUpdate</code>  : 更新前，在数据变化后，模版改变前触发，切勿使用它监听数据变化<br />\n <code>updated</code> ：更新后，在数据改变后，模版改变后触发，常用于重渲染案后的打点，性能检测或触发 vue 组件中非 vue 组件的更新</li>\n<li><code>destroy阶段</code> ：vue 实例被销毁<br />\n <code>beforeDestroy</code> ：实例被销毁前，组件卸载前触发，此时可以手动销毁一些方法，可以在此时清理事件、计时器或者取消订阅操作<br />\n <code>destroyed</code> : 卸载完毕后触发，销毁后，可以做最后的打点或事件触发操作</li>\n</ul>\n<h4 id=\"组件生命周期\"><a class=\"anchor\" href=\"#组件生命周期\">#</a> 组件生命周期</h4>\n<p>生命周期（父子组件） 父组件 beforeCreate --&gt; 父组件 created --&gt; 父组件 beforeMount --&gt; 子组件 beforeCreate --&gt; 子组件 created --&gt; 子组件 beforeMount --&gt; 子组件 mounted --&gt; 父组件 mounted --&gt; 父组件 beforeUpdate --&gt; 子组件 beforeDestroy--&gt; 子组件 destroyed --&gt; 父组件 updated</p>\n<p><strong>加载渲染过程</strong> 父 beforeCreate-&gt; 父 created-&gt; 父 beforeMount-&gt; 子 beforeCreate-&gt; 子 created-&gt; 子 beforeMount-&gt; 子 mounted-&gt; 父 mounted</p>\n<p><strong>挂载阶段</strong> 父 created-&gt; 子 created-&gt; 子 mounted-&gt; 父 mounted</p>\n<p><strong>父组件更新阶段</strong> 父 beforeUpdate-&gt; 父 updated</p>\n<p><strong>子组件更新阶段</strong> 父 beforeUpdate-&gt; 子 beforeUpdate-&gt; 子 updated-&gt; 父 updated</p>\n<p><strong>销毁阶段</strong> 父 beforeDestroy-&gt; 子 beforeDestroy-&gt; 子 destroyed-&gt; 父 destroyed</p>\n<h3 id=\"computed与watch\"><a class=\"anchor\" href=\"#computed与watch\">#</a>  <code>computed与watch</code></h3>\n<p>通俗来讲，既能用 computed 实现又可以用 watch 监听来实现的功能，推荐用 computed， 重点在于 computed 的缓存功能 computed 计算属性是用来声明式的描述一个值依赖了其它的值，当所依赖的值或者变量 改变时，计算属性也会跟着改变； watch 监听的是已经在 data 中定义的变量，当该变量变化时，会触发 watch 中的方法。</p>\n<p><strong>watch 属性监听</strong> 是一个对象，键是需要观察的属性，值是对应回调函数，主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作，监听属性的变化，需要在数据变化时执行异步或开销较大的操作时使用</p>\n<p><strong>computed 计算属性</strong> 属性的结果会被 <code>缓存</code> ，当 <code>computed</code>  中的函数所依赖的属性没有发生改变的时候，那么调用当前函数的时候结果会从缓存中读取。除非依赖的响应式属性变化时才会重新计算，主要当做属性来使用  <code>computed</code>  中的函数必须用 <code>return</code>  返回最终的结果  <code>computed</code>  更高效，优先使用。 <code>data 不改变，computed 不更新。</code></p>\n<p><strong>使用场景</strong>  <code>computed</code> ：当一个属性受多个属性影响的时候使用，例：购物车商品结算功能  <code>watch</code> ：当一条数据影响多条数据的时候使用，例：搜索数据</p>\n<h4 id=\"组件中的data为什么是一个函数\"><a class=\"anchor\" href=\"#组件中的data为什么是一个函数\">#</a> 组件中的 data 为什么是一个函数？</h4>\n<p>1. 一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。 2. 如果 data 是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间 data 不冲突，data 必须是一个函数。</p>\n<h4 id=\"为什么v-for和v-if不建议用在一起\"><a class=\"anchor\" href=\"#为什么v-for和v-if不建议用在一起\">#</a> 为什么 v-for 和 v-if 不建议用在一起</h4>\n<p>1. 当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费<br />\n 2. 这种场景建议使用 computed，先对数据进行过滤</p>\n<p>注意：3.x 版本中  <code>v-if</code>  总是优先于  <code>v-for</code>  生效。由于语法上存在歧义，建议避免在同一元素上同时使用两者。比起在模板层面管理相关逻辑，更好的办法是通过创建计算属性筛选出列表，并以此创建可见元素。</p>\n<p>解惑传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly92My5jbi52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3YtaWYtdi1mb3IuaHRtbCMlRTYlQTYlODIlRTglQTclODg=\"># v-if 与 v-for 的优先级对比非兼容</span></p>\n<h3 id=\"reactvue-项目中-key-的作用\"><a class=\"anchor\" href=\"#reactvue-项目中-key-的作用\">#</a> React/Vue 项目中 key 的作用</h3>\n<ul>\n<li>\n<p>key 的作用是为了在 diff 算法执行时更快的找到对应的节点， <code>提高diff速度，更高效的更新虚拟DOM</code> ;</p>\n<p>vue 和 react 都是采用 diff 算法来对比新旧虚拟节点，从而更新节点。在 vue 的 diff 函数中，会根据新节点的 key 去对比旧节点数组中的 key，从而找到相应旧节点。如果没找到就认为是一个新增节点。而如果没有 key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个 map 映射，另一种是遍历查找。相比而言。map 映射的速度更快。</p>\n</li>\n<li>\n<p>为了在数据变化时强制更新组件，以避免 <code>“就地复用”</code>  带来的副作用。</p>\n<p>当 Vue.js 用  <code>v-for</code>  更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。重复的 key 会造成渲染错误。</p>\n</li>\n</ul>\n<h3 id=\"数组扁平化转换\"><a class=\"anchor\" href=\"#数组扁平化转换\">#</a> 数组扁平化转换</h3>\n<p>在说到模版编译的时候，有可能会提到数组的转换，一般就用递归处理<br />\n将 [1,2,3,[4,5]] 转换成</p>\n<pre><code>&#123;\n    children:[\n        &#123;\n            value:1\n        &#125;,\n        &#123;\n            value:2\n        &#125;,\n        &#123;\n            value:3\n        &#125;,\n        &#123;\n            children:[\n                &#123;\n                    value:4\n                &#125;,\n                &#123;\n                    value:5\n                &#125;\n            ]\n        &#125;,\n    ]\n&#125;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 测试数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>，<span class=\"token number\">3</span>，<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 转换函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 准备一个接收结果数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 遍历传入的 arr 的每一项</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 如果遍历到的数字是 number，直接放进入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 如果遍历到这个项目是数组，那么就递归</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"vue组件的通信方式\"><a class=\"anchor\" href=\"#vue组件的通信方式\">#</a> vue 组件的通信方式</h3>\n<ul>\n<li>\n<p><code>props</code> / <code>$emit</code>  父子组件通信</p>\n<p>父 -&gt; 子 <code>props</code> ，子 -&gt; 父  <code>$on、$emit</code>  获取父子组件实例  <code>parent、children</code>   <code>Ref </code> 获取实例的方式调用组件的属性或者方法 父 -&gt; 子孙  <code>Provide、inject</code>  官方不推荐使用，但是写组件库时很常用</p>\n</li>\n<li>\n<p><code>$emit</code> / <code>$on</code>  自定义事件 兄弟组件通信</p>\n<p><code>Event Bus</code>  实现跨组件通信  <code>Vue.prototype.$bus = new Vue()</code>  自定义事件</p>\n</li>\n<li>\n<p>vuex 跨级组件通信</p>\n<p>Vuex、 <code>$attrs、$listeners</code>   <code>Provide、inject</code></p>\n</li>\n</ul>\n<h3 id=\"emit-后面的两个参数是什么\"><a class=\"anchor\" href=\"#emit-后面的两个参数是什么\">#</a> $emit 后面的两个参数是什么</h3>\n<p>1、父组件可以使用 props 把数据传给子组件。<br />\n2、子组件可以使用 $emit, 让父组件监听到自定义事件 。</p>\n<p><code>vm.$emit( event, arg );</code> // 触发当前实例上的事件，要传递的参数<br />\n <code>vm.$on( event, fn );</code> // 监听 event 事件后运行 fn；</p>\n<p>子组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;train-city&quot;&gt;\n    &lt;h3&gt;父组件传给子组件的toCity:&#123;&#123;sendData&#125;&#125;&lt;/h3&gt; \n    &lt;br/&gt;&lt;button @click='select(`大连`)'&gt;点击此处将‘大连’发射给父组件&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default &#123;\n    name:'trainCity',\n    props:['sendData'], // 用来接收父组件传给子组件的数据\n    methods:&#123;\n      select(val) &#123;\n        let data = &#123;\n          cityName: val\n        &#125;;\n        this.$emit('showCityName',data);//select事件触发后，自动触发showCityName事件\n      &#125;\n    &#125;\n  &#125;\n&lt;/script&gt;\n</code></pre>\n<p>父组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n    &lt;div&gt;\n        &lt;div&gt;父组件的toCity&#123;&#123;toCity&#125;&#125;&lt;/div&gt;\n        &lt;train-city @showCityName=&quot;updateCity&quot; :sendData=&quot;toCity&quot;&gt;&lt;/train-city&gt;\n    &lt;/div&gt;\n&lt;template&gt;\n&lt;script&gt;\n  export default &#123;\n    name:'index',\n    components: &#123;&#125;,\n    data () &#123;\n      return &#123;\n        toCity:&quot;北京&quot;\n      &#125;\n    &#125;,\n    methods:&#123;\n      updateCity(data)&#123;//触发子组件城市选择-选择城市的事件\n        this.toCity = data.cityName;//改变了父组件的值\n        console.log('toCity:'+this.toCity)\n      &#125;\n    &#125;\n  &#125;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"nexttick的实现\"><a class=\"anchor\" href=\"#nexttick的实现\">#</a> nextTick 的实现</h3>\n<ol>\n<li><code>nextTick</code>  是 <code>Vue</code>  提供的一个全局 <code>API</code> , 是在下次 <code>DOM</code>  更新循环结束之后执行延迟回调，在修改数据之后使用 <code>$nextTick</code> ，则可以在回调中获取更新后的 <code>DOM</code> ；</li>\n<li>Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化， <code>Vue</code>  将开启 1 个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code>  被多次触发，只会被推入到队列中 - 次。这种在缓冲时去除重复数据对于避免不必要的计算和 <code>DOM</code>  操作是非常重要的。 <code>nextTick</code>  方法会在队列中加入一个回调函数，确保该函数在前面的 dom 操作完成后才调用；</li>\n<li>比如，我在干什么的时候就会使用 nextTick，传一个回调函数进去，在里面执行 dom 操作即可；</li>\n<li>我也有简单了解 <code>nextTick</code>  实现，它会在 <code>callbacks</code>  里面加入我们传入的函数，然后用 <code>timerFunc</code>  异步方式调用它们，首选的异步方式会是 <code>Promise</code> 。这让我明白了为什么可以在 <code>nextTick</code>  中看到 <code>dom</code>  操作结果。</li>\n</ol>\n<h3 id=\"nexttick的实现原理是什么\"><a class=\"anchor\" href=\"#nexttick的实现原理是什么\">#</a> nextTick 的实现原理是什么？</h3>\n<p>在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。 nextTick 主要使用了宏任务和微任务。 根据执行环境分别尝试采用 Promise、MutationObserver、setImmediate，如果以上都不行则采用 setTimeout 定义了一个异步方法，多次调用 nextTick 会将方法存入队列中，通过这个异步方法清空当前队列。</p>\n<h3 id=\"使用过插槽么用的是具名插槽还是匿名插槽或作用域插槽\"><a class=\"anchor\" href=\"#使用过插槽么用的是具名插槽还是匿名插槽或作用域插槽\">#</a> 使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽</h3>\n<p>vue 中的插槽是一个非常好用的东西 slot 说白了就是一个占位的 在 vue 当中插槽包含三种一种是默认插槽（匿名）一种是具名插槽还有一种就是作用域插槽 匿名插槽就是没有名字的只要默认的都填到这里具名插槽指的是具有名字的</p>\n<h3 id=\"keep-alive的实现\"><a class=\"anchor\" href=\"#keep-alive的实现\">#</a> keep-alive 的实现</h3>\n<p>keep-alive 是 Vue.js 的一个内置组件。它能够不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实 DOM 中，也不会出现在父组件链中。</p>\n<p>作用：实现组件缓存，保持这些组件的状态，以避免反复渲染导致的性能问题。 需要缓存组件 频繁切换，不需要重复渲染</p>\n<p>场景：tabs 标签页 后台导航，vue 性能优化</p>\n<p>原理： <code>Vue.js</code>  内部将 <code>DOM</code>  节点抽象成了一个个的 <code>VNode</code>  节点， <code>keep-alive</code>  组件的缓存也是基于 <code>VNode</code>  节点的而不是直接存储 <code>DOM</code>  结构。它将满足条件 <code>（pruneCache与pruneCache）</code> 的组件在 <code>cache</code>  对象中缓存起来，在需要重新渲染的时候再将 <code>vnode</code>  节点从 <code>cache</code>  对象中取出并渲染。</p>\n<h3 id=\"keep-alive-的属性\"><a class=\"anchor\" href=\"#keep-alive-的属性\">#</a> keep-alive 的属性</h3>\n<p>它提供了 include 与 exclude 两个属性，允许组件有条件地进行缓存。</p>\n<p>include 定义缓存白名单，keep-alive 会缓存命中的组件；exclude 定义缓存黑名单，被命中的组件将不会被缓存；max 定义缓存组件上限，超出上限使用 LRU 的策略置换缓存数据。</p>\n<p>在动态组件中的应用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"whiteList\"</span> <span class=\"token operator\">:</span>exclude<span class=\"token operator\">=</span><span class=\"token string\">\"blackList\"</span> <span class=\"token operator\">:</span>max<span class=\"token operator\">=</span><span class=\"token string\">\"amount\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"currentComponent\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在 vue-router 中的应用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive <span class=\"token operator\">:</span>include<span class=\"token operator\">=</span><span class=\"token string\">\"whiteList\"</span> <span class=\"token operator\">:</span>exclude<span class=\"token operator\">=</span><span class=\"token string\">\"blackList\"</span> <span class=\"token operator\">:</span>max<span class=\"token operator\">=</span><span class=\"token string\">\"amount\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>router<span class=\"token operator\">-</span>view<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr></table></figure><p>vue 中完整示例</p>\n<pre><code>&lt;keep-alive&gt;\n    &lt;coma v-if=&quot;test&quot;&gt;&lt;/coma&gt;\n    &lt;comb v-else=&quot;test&quot;&gt;&lt;/comb&gt;\n&lt;/keep-alive&gt;\n&lt;button @click=&quot;test=handleClick&quot;&gt;请点击&lt;/button&gt;\n\nexport default &#123;\n    data () &#123;\n        return &#123;\n            test: true\n        &#125;\n    &#125;,\n    methods: &#123;\n        handleClick () &#123;\n            this.test = !this.test;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>参考:<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLyNrZWVwLWFsaXZl\">keep-alive 官网</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85NTIzYmI0Mzk5NTA=\">keep-alive 实现原理</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODE4OTg0Mi9hcnRpY2xlL2RldGFpbHMvMTAzOTk5OTg5\">Vue keep-alive 的实现原理</span></p>\n<h3 id=\"mixin\"><a class=\"anchor\" href=\"#mixin\">#</a> mixin</h3>\n<p>mixin 项目变得复杂的时候，多个组件间有重复的逻辑就会用到 mixin<br />\n 多个组件有相同的逻辑，抽离出来<br />\n mixin 并不是完美的解决方案，会有一些问题<br />\n vue3 提出的 Composition API 旨在解决这些问题【追求完美是要消耗一定的成本的，如开发成本】<br />\n场景：PC 端新闻列表和详情页一样的右侧栏目，可以使用 mixin 进行混合<br />\n劣势：1. 变量来源不明确，不利于阅读 2. 多 mixin 可能会造成命名冲突 3.mixin 和组件可能出现多对多的关系，使得项目复杂度变高</p>\n<h3 id=\"vue-如何实现模拟-v-model-指令\"><a class=\"anchor\" href=\"#vue-如何实现模拟-v-model-指令\">#</a> vue 如何实现模拟 v-model 指令</h3>\n<p>可以使用 vue 自定义指令 Vue.directive () 模拟</p>\n<p>具体参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5MTU3OTQ0L2FydGljbGUvZGV0YWlscy8xMDYyNjI1NDY=\">vue 自定义指令模拟 v-model 指令</span></p>\n<h3 id=\"如何实现-v-model说下思路\"><a class=\"anchor\" href=\"#如何实现-v-model说下思路\">#</a> 如何实现 v-model, 说下思路</h3>\n<h3 id=\"vue-router-相关\"><a class=\"anchor\" href=\"#vue-router-相关\">#</a> Vue Router 相关</h3>\n<h3 id=\"vuex的理解及使用场景\"><a class=\"anchor\" href=\"#vuex的理解及使用场景\">#</a> Vuex 的理解及使用场景</h3>\n<p>Vuex 是一个专为 Vue 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。</p>\n<ol>\n<li>Vuex 的状态存储是响应式的；当 Vue 组件从 store 中读取状态的时候，</li>\n</ol>\n<p>若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新 2. 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation， 这样使得我们可以方便地跟踪每一个状态的变化 Vuex 主要包括以下几个核心模块：</p>\n<ol>\n<li>State：定义了应用的状态数据</li>\n<li>Getter：在 store 中定义 “getter”（可以认为是 store 的计算属性），</li>\n</ol>\n<p>就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算 3. Mutation：是唯一更改 store 中状态的方法，且必须是同步函数 4. Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作 5. Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7249773a1634f779c48f3f0ffabf968~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n",
            "tags": [
                "前端面试",
                "前端面试",
                "Vue"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/08.React/",
            "url": "https://aaaa8880788.github.io/web-interview/08.React/",
            "title": "React",
            "date_published": "2024-03-02T02:52:21.679Z",
            "content_html": "<h2 id=\"react-面试专题\"><a class=\"anchor\" href=\"#react-面试专题\">#</a> React 面试专题</h2>\n<h3 id=\"reactjs是-mvvm-框架吗\"><a class=\"anchor\" href=\"#reactjs是-mvvm-框架吗\">#</a> React.js 是 MVVM 框架吗？</h3>\n<p>React 就是 Facebook 的一个开源 JS 框架，专注的层面为 View 层，不包括数据访问层或者那种 Hash 路由（不过 React 有插件支持），与 Angularjs，Emberjs 等大而全的框架不同，React 专注的中心是 Component，即组件。React 认为一切页面元 素都可以抽象成组件，比如一个表单，或者表单中的某一项。</p>\n<p>React 可以作为 MVVM 中第二个 V，也就是 View，但是并不是 MVVM 框架。MVVM 一个最显著的特征：双向绑定。React 没有这个，它是单向数据绑定的。React 是一个单向数据流的库，状态驱动视图。react 整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在 react 中，是单向数据流，推崇结合 immutable 来实现数据不可变。</p>\n<h3 id=\"hooks用过吗聊聊react中class组件和函数组件的区别\"><a class=\"anchor\" href=\"#hooks用过吗聊聊react中class组件和函数组件的区别\">#</a> hooks 用过吗？聊聊 react 中 class 组件和函数组件的区别</h3>\n<p>类组件是使用 ES6 的 class 来定义的组件。 函数组件是接收一个单一的  <code>props</code>  对象并返回一个 React 元素。</p>\n<p>关于 React 的两套 API（类（class）API 和基于函数的钩子（hooks） API）。官方推荐使用钩子（函数），而不是类。因为钩子更简洁，代码量少，用起来比较 &quot;轻&quot;，而类比较 &quot;重&quot;。而且，钩子是函数，更符合 React 函数式的本质。</p>\n<p>函数一般来说，只应该做一件事，就是返回一个值。 如果你有多个操作，每个操作应该写成一个单独的函数。而且，数据的状态应该与操作方法分离。根据函数这种理念，React 的函数组件只应该做一件事情：返回组件的 HTML 代码，而没有其他的功能。函数的返回结果只依赖于它的参数。不改变函数体外部数据、函数执行过程里面没有副作用。</p>\n<p>类（class）是数据和逻辑的封装。 也就是说，组件的状态和操作方法是封装在一起的。如果选择了类的写法，就应该把相关的数据和操作，都写在同一个 class 里面。</p>\n<p><strong>类组件的缺点</strong> :</p>\n<p>大型组件很难拆分和重构，也很难测试。<br />\n业务逻辑分散在组件的各个方法之中，导致重复逻辑或关联逻辑。<br />\n组件类引入了复杂的编程模式，比如 render props 和高阶组件。<br />\n难以理解的 class，理解 JavaScript 中  <code>this</code>  的工作方式。</p>\n<p><strong>区别</strong>：</p>\n<p>函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。</p>\n<p>1. 状态的有无<br />\n hooks 出现之前，函数组件 <code>没有实例</code> ， <code>没有生命周期</code> ， <code>没有state</code> ， <code>没有this</code> ，所以我们称函数组件为无状态组件。 hooks 出现之前，react 中的函数组件通常只考虑负责 UI 的渲染，没有自身的状态没有业务逻辑代码，是一个纯函数。它的输出只由参数 props 决定，不受其他任何因素影响。</p>\n<p>2. 调用方式的不同<br />\n函数组件重新渲染，将重新调用组件方法返回新的 react 元素。类组件重新渲染将 new 一个新的组件实例，然后调用 render 类方法返回 react 元素，这也说明为什么类组件中 this 是可变的。</p>\n<p>3. 因为调用方式不同，在函数组件使用中会出现问题<br />\n在操作中改变状态值，类组件可以获取最新的状态值，而函数组件则会按照顺序返回状态值</p>\n<p><strong>React Hooks（钩子的作用）</strong></p>\n<p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>React Hooks 的几个常用钩子:</p>\n<ol>\n<li><code>useState()</code>  // 状态钩子</li>\n<li><code>useContext()</code>  // 共享状态钩子</li>\n<li><code>useReducer()</code>  //action 钩子</li>\n<li><code>useEffect()</code>  // 副作用钩子</li>\n</ol>\n<p>还有几个不常见的大概的说下，后续会专门写篇文章描述下</p>\n<ul>\n<li>\n<p>1.useCallback 记忆函数 一般把<strong>函数式组件理解为 class 组件 render 函数的语法糖</strong>，所以每次重新渲染的时候，函数式组件内部所有的代码都会重新执行一遍。而有了 useCallback 就不一样了，你可以通过 useCallback 获得一个记忆后的函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> memoizedHandleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Click happened'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空数组代表无论什么情况下该函数都不会发生改变</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>SomeComponent onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>memoizedHandleClick<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click Me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SomeComponent<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二个参数传入一个数组，数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染。</p>\n</li>\n<li>\n<p>2.useMemo 记忆组件 useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的。 唯一的区别是：<strong>useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个函数并且将函数执行结果返回给你</strong>。<br />\n所以 useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件。</p>\n</li>\n<li>\n<p>3.useRef 保存引用值</p>\n<p>useRef 跟 createRef 类似，都可以用来生成对 DOM 对象的引用。useRef 返回的值传递给组件或者 DOM 的 ref 属性，就可以通过 ref.current 值<strong>访问组件或真实的 DOM 节点，重点是组件也是可以访问到的</strong>，从而可以对 DOM 进行一些操作，比如监听事件等等。</p>\n</li>\n<li>\n<p>4.useImperativeHandle 穿透 Ref</p>\n<p>通过 useImperativeHandle 用于让父组件获取子组件内的索引</p>\n</li>\n<li>\n<p>5.useLayoutEffect 同步执行副作用</p>\n<p>大部分情况下，使用 useEffect 就可以帮我们处理组件的副作用，但是如果想要同步调用一些副作用，比如对 DOM 的操作，就需要使用 useLayoutEffect，useLayoutEffect 中的副作用会在 DOM 更新之后同步执行。</p>\n<p><strong>useEffect 和 useLayoutEffect 有什么区别</strong>：简单来说就是调用时机不同，useLayoutEffect 和原来 componentDidMount&amp;componentDidUpdate 一致，在 react 完成 DOM 更新后马上同步调用的代码，会阻塞页面渲染。而 useEffect 是会在整个页面渲染完才会调用的代码。 <code>官方建议优先使用useEffect</code></p>\n</li>\n</ul>\n<h3 id=\"react-组件通信方式\"><a class=\"anchor\" href=\"#react-组件通信方式\">#</a> React 组件通信方式</h3>\n<p>react 组件间通信常见的几种情况:</p>\n<ul>\n<li>\n<ol>\n<li>父组件向子组件通信</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>子组件向父组件通信</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>跨级组件通信</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>非嵌套关系的组件通信</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"1父组件向子组件通信\"><a class=\"anchor\" href=\"#1父组件向子组件通信\">#</a> 1）父组件向子组件通信</h4>\n<p>父组件通过 props 向子组件传递需要的信息。父传子是在父组件中直接绑定一个正常的属性，这个属性就是指具体的值，在子组件中，用 props 就可以获取到这个值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 子组件: Child</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 父组件 Parent</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Parent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Child name<span class=\"token operator\">=</span><span class=\"token string\">\"京程一灯\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Child<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2子组件向父组件通信\"><a class=\"anchor\" href=\"#2子组件向父组件通信\">#</a> 2）子组件向父组件通信</h4>\n<p>props + 回调的方式，使用公共组件进行状态提升。子传父是先在父组件上绑定属性设置为一个函数，当子组件需要给父组件传值的时候，则通过 props 调用该函数将参数传入到该函数当中，此时就可以在父组件中的函数中接收到该参数了，这个参数则为子组件传过来的值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 子组件: Child</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          props<span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"京程一灯欢迎你!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>京程一灯欢迎你<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 父组件 Parent</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Child callback<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">callback</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Child<span class=\"token operator\">></span>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3跨级组件通信\"><a class=\"anchor\" href=\"#3跨级组件通信\">#</a> 3）跨级组件通信</h4>\n<p>即父组件向子组件的子组件通信，向更深层子组件通信。</p>\n<ul>\n<li>使用 props，利用中间组件层层传递，但是如果父组件结构较深，那么中间每一层组件都要去传递 props，增加了复杂度，并且这些 props 并不是中间组件自己需要的。</li>\n<li>使用 context，context 相当于一个大容器，我们可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用 context 实现。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//context 方式实现跨级组件通信 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Context 设计目的是为了共享那些对于一个组件树而言是 “全局” 的数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> BatteryContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//  子组件的子组件 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GrandChild</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&lt;</span>BatteryContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token parameter\">color</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">>></span>我是红色的<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BatteryContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//  子组件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token operator\">&lt;</span>GrandChild<span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 父组件</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span><span class=\"token string\">\"red\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>color<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token operator\">&lt;</span>BatteryContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              <span class=\"token operator\">&lt;</span>Child<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Child<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>BatteryContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4非嵌套关系的组件通信\"><a class=\"anchor\" href=\"#4非嵌套关系的组件通信\">#</a> 4）非嵌套关系的组件通信</h4>\n<p>即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。</p>\n<ul>\n<li>\n<ol>\n<li>可以使用自定义事件通信（发布订阅模式），使用 pubsub-js</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>可以通过 redux 等进行全局状态管理</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点，结合父子间通信方式进行通信。</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>也可以 new 一个 Vue 的 EventBus, 进行事件监听，一边执行监听，一边执行新增 VUE 的 eventBus 就是发布订阅模式，是可以在 React 中使用的；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"setstate-既存在异步情况也存在同步情况\"><a class=\"anchor\" href=\"#setstate-既存在异步情况也存在同步情况\">#</a> setState 既存在异步情况也存在同步情况</h3>\n<p>1. 异步情况 在 <code>React事件当中是异步操作</code></p>\n<p>2. 同步情况 如果是在 <code>setTimeout事件或者自定义的dom事件</code> 中，都是同步的</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//setTimeout 事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Count</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>count<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>btnAction<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>增加<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function-variable function\">btnAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 不能直接修改 state，需要通过 setState 进行修改</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 同步</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Count<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自定义 dom 事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Count</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>count<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span><span class=\"token operator\">></span>绑定点击事件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 自定义 dom 事件，也是同步修改</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Count<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h3>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bae01e6eb804d849e5bb889f787707d~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>安装</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>当组件的实例被创建并插入到 <span class=\"token constant\">DOM</span> 中时，这些方法按以下顺序调用：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>更新中</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>更新可能由道具或状态的更改引起。当重新渲染组件时，这些方法按以下顺序调用：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>卸载</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>当组件从 <span class=\"token constant\">DOM</span> 中移除时调用此方法：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"说一下-react-fiber\"><a class=\"anchor\" href=\"#说一下-react-fiber\">#</a> 说一下 react-fiber</h3>\n<h4 id=\"1背景\"><a class=\"anchor\" href=\"#1背景\">#</a> 1）背景</h4>\n<p>react-fiber 产生的根本原因，是 <code>大量的同步计算任务阻塞了浏览器的 UI 渲染</code> 。默认情况下，JS 运算、页面布局和页面绘制都是运行在浏览器的主线程当中，他们之间是互斥的关系。如果 JS 运算持续占用主线程，页面就没法得到及时的更新。当我们调用 <code>setState</code>  更新页面的时候，React 会遍历应用的所有节点，计算出差异，然后再更新 UI。如果页面元素很多，整个过程占用的时机就可能超过 16 毫秒，就容易出现掉帧的现象。</p>\n<h4 id=\"2实现原理\"><a class=\"anchor\" href=\"#2实现原理\">#</a> 2）实现原理</h4>\n<ul>\n<li>\n<p>react 内部运转分三层：</p>\n<ul>\n<li>Virtual DOM 层，描述页面长什么样。</li>\n<li>Reconciler 层，负责调用组件生命周期方法，进行 Diff 运算等。</li>\n<li>Renderer 层，根据不同的平台，渲染出相应的页面，比较常见的是 ReactDOM 和 ReactNative。</li>\n</ul>\n</li>\n</ul>\n<p><code>Fiber 其实指的是一种数据结构，它可以用一个纯 JS 对象来表示</code> ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fiber <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    stateNode<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 节点实例</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    child<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 子节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sibling<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 兄弟节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 父节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>为了实现不卡顿，就需要有一个调度器 (Scheduler) 来进行任务分配。优先级高的任务（如键盘输入）可以打断优先级低的任务（如 Diff）的执行，从而更快的生效。任务的优先级有六种：</p>\n<ul>\n<li>synchronous，与之前的 Stack Reconciler 操作一样，同步执行</li>\n<li>task，在 next tick 之前执行</li>\n<li>animation，下一帧之前执行</li>\n<li>high，在不久的将来立即执行</li>\n<li>low，稍微延迟执行也没关系</li>\n<li>offscreen，下一次 render 时或 scroll 时才执行</li>\n</ul>\n</li>\n<li>\n<p>Fiber Reconciler（react ）执行过程分为 2 个阶段：</p>\n<ul>\n<li>阶段一，生成 Fiber 树，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。阶段一可被打断的特性，让优先级更高的任务先执行，从框架层面大大降低了页面掉帧的概率。</li>\n<li>阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。</li>\n</ul>\n</li>\n<li>\n<p>Fiber 树：React 在 render 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。Fiber Tree 一个重要的特点是链表结构，将递归遍历编程循环遍历，然后配合 requestIdleCallback API, 实现任务拆分、中断与恢复。</p>\n</li>\n</ul>\n<p>从 Stack Reconciler 到 Fiber Reconciler，源码层面其实就是干了一件递归改循环的事情</p>\n<p>传送门 ☞<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAyMjUwMjU4ODI2NjU3Nzk5\"># 深入了解 Fiber</span></p>\n<h3 id=\"portals\"><a class=\"anchor\" href=\"#portals\">#</a> Portals</h3>\n<p>Portals 提供了一种一流的方式来将子组件渲染到存在于父组件的 DOM 层次结构之外的 DOM 节点中。结构不受外界的控制的情况下就可以使用 portals 进行创建</p>\n<h3 id=\"何时要使用异步组件如和使用异步组件\"><a class=\"anchor\" href=\"#何时要使用异步组件如和使用异步组件\">#</a> 何时要使用异步组件？如和使用异步组件</h3>\n<ul>\n<li>加载大组件的时候</li>\n<li>路由异步加载的时候</li>\n</ul>\n<p>react 中要配合 Suspense 使用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步懒加载</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> Box <span class=\"token operator\">=</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./components/Box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用组件的时候要用 suspense 进行包裹</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>Box<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"react-事件绑定原理\"><a class=\"anchor\" href=\"#react-事件绑定原理\">#</a> React 事件绑定原理</h3>\n<p>React 并不是将 click 事件绑在该 div 的真实 DOM 上，而是 <code>在document处监听所有支持的事件</code> ，当事件发生并冒泡至 document 处时，React 将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。<br />\n另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用  <code>event.preventDefault</code> 。</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2089718f74b342869de15f01588f033f~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"react事件绑定原理\" /></p>\n<h3 id=\"reactlazy-实现的原理\"><a class=\"anchor\" href=\"#reactlazy-实现的原理\">#</a> React.lazy () 实现的原理</h3>\n<p>React 的懒加载示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Suspense <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> OtherComponent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./OtherComponent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>OtherComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Suspense<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>React.lazy 原理</strong></p>\n<p>以下 React 源码基于 16.8.0 版本</p>\n<p>React.lazy 的源码实现如下：</p>\n<p>export function lazy&lt;T, R&gt;(ctor: () =&gt; Thenable&lt;T, R&gt;): LazyComponent&lt;T&gt; {<br />\nlet lazyType = {<br />\n$$typeof: REACT_LAZY_TYPE,<br />\n_ctor: ctor,<br />\n// React uses these fields to store the result.<br />\n_status: -1,<br />\n_result: null,<br />\n};</p>\n<p>return lazyType;<br />\n}<br />\n 可以看到其返回了一个 LazyComponent 对象。</p>\n<p>而对于 LazyComponent 对象的解析：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token literal-property property\">LazyComponent</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> elementType <span class=\"token operator\">=</span> workInProgress<span class=\"token punctuation\">.</span>elementType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">mountLazyComponent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    current<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    workInProgress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    elementType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    updateExpirationTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    renderExpirationTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mountLazyComponent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token parameter\">_current<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  workInProgress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  elementType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  updateExpirationTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  renderExpirationTime<span class=\"token punctuation\">,</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> Component <span class=\"token operator\">=</span> <span class=\"token function\">readLazyComponentType</span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Pending = 0, Resolved = 1, Rejected = 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> readLazyComponentType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>lazyComponent<span class=\"token operator\">:</span> LazyComponent<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> lazyComponent<span class=\"token punctuation\">.</span>_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> lazyComponent<span class=\"token punctuation\">.</span>_result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">Resolved</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">Component</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> Component<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">Rejected</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">error</span><span class=\"token operator\">:</span> mixed <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">Pending</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">thenable</span><span class=\"token operator\">:</span> Thenable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> mixed<span class=\"token operator\">></span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">throw</span> thenable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//lazyComponent 首次被渲染</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      lazyComponent<span class=\"token punctuation\">.</span>_status <span class=\"token operator\">=</span> Pending<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">const</span> ctor <span class=\"token operator\">=</span> lazyComponent<span class=\"token punctuation\">.</span>_ctor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">const</span> thenable <span class=\"token operator\">=</span> <span class=\"token function\">ctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      thenable<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token parameter\">moduleObject</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyComponent<span class=\"token punctuation\">.</span>_status <span class=\"token operator\">===</span> Pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">const</span> defaultExport <span class=\"token operator\">=</span> moduleObject<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            lazyComponent<span class=\"token punctuation\">.</span>_status <span class=\"token operator\">=</span> Resolved<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            lazyComponent<span class=\"token punctuation\">.</span>_result <span class=\"token operator\">=</span> defaultExport<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lazyComponent<span class=\"token punctuation\">.</span>_status <span class=\"token operator\">===</span> Pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            lazyComponent<span class=\"token punctuation\">.</span>_status <span class=\"token operator\">=</span> Rejected<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            lazyComponent<span class=\"token punctuation\">.</span>_result <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// Handle synchronous thenables.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>lazyComponent<span class=\"token punctuation\">.</span>_status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">Resolved</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token keyword\">return</span> lazyComponent<span class=\"token punctuation\">.</span>_result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">Rejected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token keyword\">throw</span> lazyComponent<span class=\"token punctuation\">.</span>_result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      lazyComponent<span class=\"token punctuation\">.</span>_result <span class=\"token operator\">=</span> thenable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">throw</span> thenable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注：如果 readLazyComponentType 函数多次处理同一个 lazyComponent，则可能进入 Pending、Rejected 等 case 中。</p>\n<p>从上述代码中可以看出，对于最初 React.lazy () 所返回的 LazyComponent 对象，其 _status 默认是 -1，所以首次渲染时，会进入 readLazyComponentType 函数中的 default 的逻辑，这里才会真正异步执行 import (url) 操作，由于并未等待，随后会检查模块是否 Resolved，如果已经 Resolved 了（已经加载完毕）则直接返回 moduleObject.default（动态加载的模块的默认导出），否则将通过 throw 将 thenable 抛出到上层。</p>\n<p>为什么要 throw 它？这就要涉及到 Suspense 的工作原理，我们接着往下分析。</p>\n<p><strong>Suspense 原理</strong></p>\n<p>由于 React 捕获异常并处理的代码逻辑比较多，这里就不贴源码，感兴趣可以去看 throwException 中的逻辑，其中就包含了如何处理捕获的异常。简单描述一下处理过程，React 捕获到异常之后，会判断异常是不是一个 thenable，如果是则会找到 SuspenseComponent ，如果 thenable 处于 pending 状态，则会将其 children 都渲染成 fallback 的值，一旦 thenable 被 resolve 则 SuspenseComponent 的子组件会重新渲染一次。</p>\n<p>为了便于理解，我们也可以用 componentDidCatch 实现一个自己的 Suspense 组件，如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Suspense</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">promise</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">componentDidCatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 判断 err 是否是 thenable</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> err <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> err<span class=\"token punctuation\">.</span>then <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">promise</span><span class=\"token operator\">:</span> err <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        err<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token literal-property property\">promise</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> fallback<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> promise <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span> promise <span class=\"token operator\">?</span> fallback <span class=\"token operator\">:</span> children <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此，我们分析完了 React 的懒加载原理。简单来说，React 利用 React.lazy 与 import () 实现了渲染时的动态加载 ，并利用 Suspense 来处理异步加载资源时页面应该如何显示的问题。</p>\n<p>参考传送门☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly90aG9hbXN5LmdpdGh1Yi5pby9ibG9ncy9yZWFjdC1sYXp5Lw==\">React Lazy 的实现原理</span></p>\n",
            "tags": [
                "前端面试",
                "前端面试",
                "React"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/02.%E6%B5%8F%E8%A7%88%E5%99%A8/",
            "url": "https://aaaa8880788.github.io/web-interview/02.%E6%B5%8F%E8%A7%88%E5%99%A8/",
            "title": "浏览器知识",
            "date_published": "2024-03-02T02:52:21.678Z",
            "content_html": "<h1 id=\"浏览器\"><a class=\"anchor\" href=\"#浏览器\">#</a> 浏览器</h1>\n<h3 id=\"从输入url到页面加载的全过程\"><a class=\"anchor\" href=\"#从输入url到页面加载的全过程\">#</a> 从输入 URL 到页面加载的全过程</h3>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e44aa8a92602405db3c12161b71e2094~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"从输入URL到页面加载的主干流程\" /></p>\n<ol>\n<li>\n<p>首先在浏览器中输入 URL</p>\n</li>\n<li>\n<p>查找缓存：浏览器先查看浏览器缓存 - 系统缓存 - 路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。</p>\n<ul>\n<li>浏览器缓存：浏览器会记录 DNS 一段时间，因此，只是第一个地方解析 DNS 请求；</li>\n<li>操作系统缓存：如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录 (保存最近的 DNS 查询缓存)；</li>\n<li>路由器缓存：如果上述两个步骤均不能成功获取 DNS 记录，继续搜索路由器缓存；</li>\n<li>ISP 缓存：若上述均失败，继续向 ISP 搜索。</li>\n</ul>\n</li>\n<li>\n<p>DNS 域名解析：浏览器向 DNS 服务器发起请求，解析该 URL 中的域名对应的 IP 地址。 <code>DNS服务器是基于UDP的，因此会用到UDP协议</code> 。</p>\n</li>\n<li>\n<p>建立 TCP 连接：解析出 IP 地址后，根据 IP 地址和默认 80 端口，和服务器建立 TCP 连接</p>\n</li>\n<li>\n<p>发起 HTTP 请求：浏览器发起读取文件的 HTTP 请求，，该请求报文作为 TCP 三次握手的第三次数据发送给服务器</p>\n</li>\n<li>\n<p>服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的 html 文件发送给浏览器</p>\n</li>\n<li>\n<p>关闭 TCP 连接：通过四次挥手释放 TCP 连接</p>\n</li>\n<li>\n<p>浏览器渲染：客户端（浏览器）解析 HTML 内容并渲染出来，浏览器接收到数据包后的解析流程为：</p>\n<ul>\n<li>构建 DOM 树：词法分析然后解析成 DOM 树（dom tree），是由 dom 元素及属性节点组成，树的根是 document 对象</li>\n<li>构建 CSS 规则树：生成 CSS 规则树（CSS Rule Tree）</li>\n<li>构建 render 树：Web 浏览器将 DOM 和 CSSOM 结合，并构建出渲染树（render tree）</li>\n<li>布局（Layout）：计算出每个节点在屏幕中的位置</li>\n<li>绘制（Painting）：即遍历 render 树，并使用 UI 后端层绘制每个节点。</li>\n</ul>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a90660027f0d4c559732519bad4c6323~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"浏览器渲染流程图\" /></p>\n</li>\n<li>\n<p>JS 引擎解析过程：调用 JS 引擎执行 JS 代码（JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p>\n<ul>\n<li>创建 window 对象：window 对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于 window 的属性和方法，而 DOM Tree 也会映射在 window 的 doucment 对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。</li>\n<li>加载文件：完成 js 引擎分析它的语法与词法是否合法，如果合法进入预编译</li>\n<li>预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为 window 的属性加入到 window 对象中，并给变量赋值为 'undefined'；寻找全局函数声明，把它作为 window 的方法加入到 window 对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在 ES6 中已经解决了，函数提升还存在。</li>\n<li>解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在 ES5 非严格模式下这个变量会成为 window 的一个属性，也就是成为全局变量。string、int 这样的值就是直接把值放在变量的存储空间里，object 对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS 作用域其实就是这样的执行流机制实现的。</li>\n</ul>\n</li>\n</ol>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY4NDkxMDY3MTYyNjU1\"># DNS 域名解析过程</span> ☞<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyNTk3NzYwOTM1NDYwOTAx\"># 浏览器的工作原理</span></p>\n<h3 id=\"在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议\"><a class=\"anchor\" href=\"#在浏览器中输入url到显示页面经历哪些过程涉及到哪些协议\">#</a> 在浏览器中输入 URL 到显示页面经历哪些过程，涉及到哪些协议？</h3>\n<p>浏览器要将 URL 解析为 IP 地址，解析域名就要用到 DNS 协议，首先主机会查询 DNS 的缓存，如果没有就给本地 DNS 发送查询请求。DNS 查询分为两种方式，一种是递归查询，一种是迭代查询。如果是迭代查询，本地的 DNS 服务器，向根域名服务器发送查询请求，根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求，然后依次类推直到查询到该域名的 IP 地址。 <code>DNS服务器是基于UDP的，因此会用到UDP协议。</code></p>\n<p>得到 IP 地址后，浏览器就要与服务器建立一个 http 连接。因此要用到 http 协议。http 生成一个 get 请求报文，将该报文传给 TCP 层处理，所以还会用到 TCP 协议。如果采用 https 还会使用 https 协议先对 http 数据进行加密。TCP 层如果有需要先将 HTTP 数据包分片，分片依据路径 MTU 和 MSS。TCP 的数据包然后会发送给 IP 层，用到 IP 协议。IP 层通过路由选路，一跳一跳发送到目的地址。当然在一个网段内的寻址是通过以太网协议实现 (也可以是其他物理层协议，比如 PPP，SLIP)，以太网协议需要直到目的 IP 地址的物理地址，有需要 ARP 协议。</p>\n<p>其中：</p>\n<p>1、 <code>DNS协议，http协议，https协议属于应用层</code></p>\n<p>应用层是体系结构中的最高层。应用层确定进程之间通信的性质以满足用户的需要。这里的进程就是指正在运行的程序。应用层不仅要提供应用进程所需要的信息交换和远地操作，而且还要作为互相作用的应用进程的用户代理，来完成一些为进行语义上有意义的信息交换所必须的功能。应用层直接为用户的应用进程提供服务。</p>\n<p>2、 <code>TCP/UDP属于传输层</code></p>\n<p>传输层的任务就是负责主机中两个进程之间的通信。因特网的传输层可使用两种不同协议：即面向连接的传输控制协议 TCP，和无连接的用户数据报协议 UDP。面向连接的服务能够提供可靠的交付，但无连接服务则不保证提供可靠的交付，它只是 “尽最大努力交付”。这两种服务方式都很有用，备有其优缺点。在分组交换网内的各个交换结点机都没有传输层。</p>\n<p>3、 <code>IP协议，ARP协议属于网络层</code></p>\n<p>网络层负责为分组交换网上的不同主机提供通信。在发送数据时，网络层将运输层产生的报文段或用户数据报封装成分组或包进行传送。在 TCP/IP 体系中，分组也叫作 IP 数据报，或简称为数据报。网络层的另一个任务就是要选择合适的路由，使源主机运输层所传下来的分组能够交付到目的主机。</p>\n<p>4、数据链路层</p>\n<p>当发送数据时，数据链路层的任务是将在网络层交下来的 IP 数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制、以及流量控制信息等）。控制信息使接收端能够知道 — 个帧从哪个比特开始和到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错。</p>\n<p>5、物理层</p>\n<p>物理层的任务就是透明地传送比特流。在物理层上所传数据的单位是比特。传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆等，并不在物理层之内而是在物理层的下面。因此也有人把物理媒体当做第 0 层。</p>\n<h3 id=\"浏览器的主要功能\"><a class=\"anchor\" href=\"#浏览器的主要功能\">#</a> 浏览器的主要功能</h3>\n<p>浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。</p>\n<h3 id=\"浏览器的工作原理\"><a class=\"anchor\" href=\"#浏览器的工作原理\">#</a> 浏览器的工作原理</h3>\n<p>渲染引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。</p>\n<p>然后进行如下所示的基本流程：</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ef6cb226b374e89914a2315e4ca9ba9~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" /></p>\n<p>图：渲染引擎的基本流程。</p>\n<p>渲染引擎将开始 <code>解析 HTML 文档</code> ，并将各标记逐个转化成 “内容树” 上的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM0RPTQ==\">DOM</span> 节点。同时也会 <code>解析外部 CSS 文件以及样式元素中的样式数据</code> 。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23Render_tree_construction\" title=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Render_tree_construction\"> <code>渲染树</code> </a>。</p>\n<p>渲染树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。</p>\n<p>渲染树构建完毕之后，进入 “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM2xheW91dA==\">布局</span>” 处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cuaHRtbDVyb2Nrcy5jb20lMkZ6aCUyRnR1dG9yaWFscyUyRmludGVybmFscyUyRmhvd2Jyb3dzZXJzd29yayUyRiUyM1BhaW50aW5n\">绘制</span> - 渲染引擎会遍历渲染树，由用户界面后端层将每个节点绘制出来。</p>\n<p>需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，渲染引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，渲染引擎会将部分内容解析并显示出来。</p>\n<h3 id=\"浏览器的主要组成部分是什么\"><a class=\"anchor\" href=\"#浏览器的主要组成部分是什么\">#</a> 浏览器的主要组成部分是什么？</h3>\n<ol>\n<li><strong>用户界面</strong> - 包括地址栏、前进 / 后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。</li>\n<li><strong>浏览器引擎</strong> - 在用户界面和呈现引擎之间传送指令。</li>\n<li><strong>呈现引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li>\n<li><strong>网络</strong> - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。</li>\n<li><strong>用户界面后端</strong> - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。</li>\n<li><strong>JavaScript 解释器</strong>。用于解析和执行 JavaScript 代码。</li>\n<li><strong>数据存储</strong>。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了 “网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。<br />\n<img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f83cb61cb9de4a65abeb95e50608af48~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"\" /></li>\n</ol>\n<p>图：浏览器的主要组件。</p>\n<p>值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p>\n<h3 id=\"浏览器是如何渲染ui的\"><a class=\"anchor\" href=\"#浏览器是如何渲染ui的\">#</a> 浏览器是如何渲染 UI 的？</h3>\n<ol>\n<li>浏览器获取 HTML 文件，然后对文件进行解析，形成 DOM Tree</li>\n<li>与此同时，进行 CSS 解析，生成 Style Rules</li>\n<li>接着将 DOM Tree 与 Style Rules 合成为 Render Tree</li>\n<li>接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标</li>\n<li>随后调用 GPU 进行绘制（Paint），遍历 Render Tree 的节点，并将元素呈现出来</li>\n</ol>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67b1336692f540c9a81756f93e82c2f5~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<h3 id=\"dom-tree是如何构建的\"><a class=\"anchor\" href=\"#dom-tree是如何构建的\">#</a> DOM Tree 是如何构建的？</h3>\n<ol>\n<li>转码：浏览器将接收到的二进制数据按照指定编码格式转化为 HTML 字符串</li>\n<li>生成 Tokens: 之后开始 parser，浏览器会将 HTML 字符串解析成 Tokens</li>\n<li>构建 Nodes: 对 Node 添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope</li>\n<li>生成 DOM Tree: 通过 node 包含的指针确定的关系构建出 DOM<br />\nTree</li>\n</ol>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1dc0f577836c4705bb582b2ac15bc5d1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"2019-06-22-11-48-00\" /></p>\n<h3 id=\"浏览器重绘与重排的区别\"><a class=\"anchor\" href=\"#浏览器重绘与重排的区别\">#</a> 浏览器重绘与重排的区别？</h3>\n<ul>\n<li><code>重排/回流（Reflow）</code> ：当 <code>DOM</code>  的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。</li>\n<li><code>重绘(Repaint)</code> : 当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变</li>\n</ul>\n<p>单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分</p>\n<p>重排和重绘代价是高昂的，它们会破坏用户体验，并且让 UI 展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。</p>\n<p>『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。</p>\n<h3 id=\"如何触发重排和重绘\"><a class=\"anchor\" href=\"#如何触发重排和重绘\">#</a> 如何触发重排和重绘？</h3>\n<p>任何改变用来构建渲染树的信息都会导致一次重排或重绘：</p>\n<ul>\n<li>添加、删除、更新 DOM 节点</li>\n<li>通过 display: none 隐藏一个 DOM 节点 - 触发重排和重绘</li>\n<li>通过 visibility: hidden 隐藏一个 DOM 节点 - 只触发重绘，因为没有几何变化</li>\n<li>移动或者给页面中的 DOM 节点添加动画</li>\n<li>添加一个样式表，调整样式属性</li>\n<li>用户行为，例如调整窗口大小，改变字号，或者滚动。</li>\n</ul>\n<h3 id=\"如何避免重绘或者重排\"><a class=\"anchor\" href=\"#如何避免重绘或者重排\">#</a> 如何避免重绘或者重排？</h3>\n<ol>\n<li>\n<p><code>集中改变样式</code> ，不要一条一条地修改 DOM 的样式。</p>\n</li>\n<li>\n<p>不要把 DOM 结点的属性值放在循环里当成循环里的变量。</p>\n</li>\n<li>\n<p>为动画的 HTML 元件使用  <code>fixed</code>  或  <code>absoult</code>  的  <code>position</code> ，那么修改他们的 CSS 是不会 reflow 的。</p>\n</li>\n<li>\n<p>不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。</p>\n</li>\n<li>\n<p>尽量只修改 <code>position：absolute</code>  或 <code>fixed</code>  元素，对其他元素影响不大</p>\n</li>\n<li>\n<p>动画开始 <code>GPU</code>  加速， <code>translate</code>  使用 <code>3D</code>  变化</p>\n</li>\n<li>\n<p>提升为合成层</p>\n<p>将元素提升为合成层有以下优点：</p>\n<ul>\n<li>合成层的位图，会交由 GPU 合成，比 CPU 处理要快</li>\n<li>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li>\n<li>对于 transform 和 opacity 效果，不会触发 layout 和 paint</li>\n</ul>\n<p>提升合成层的最好方式是使用 CSS 的 will-change 属性：</p>\n<pre><code>#target &#123;\n  will-change: transform;\n&#125;\n</code></pre>\n<blockquote>\n<p>关于合成层的详解请移步<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbj90YXJnZXQ9aHR0cCUzQSUyRiUyRnRhb2Jhb2ZlZC5vcmclMkZibG9nJTJGMjAxNiUyRjA0JTJGMjUlMkZwZXJmb3JtYW5jZS1jb21wb3NpdGUlMkY=\">无线性能优化：Composite</span></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"介绍下304过程\"><a class=\"anchor\" href=\"#介绍下304过程\">#</a> 介绍下 304 过程</h3>\n<ul>\n<li>a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。</li>\n<li>b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。</li>\n<li>c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。</li>\n</ul>\n<h3 id=\"浏览器的缓存机制-强制缓存-协商缓存\"><a class=\"anchor\" href=\"#浏览器的缓存机制-强制缓存-协商缓存\">#</a> 浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3>\n<p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/487144abaada4b9a8b34bc9375191ec7~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"图片\" /></p>\n<p>由上图我们可以知道：</p>\n<ul>\n<li>浏览器每次发起请求，都会 <code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li>\n<li>浏览器每次拿到返回的请求结果都会 <code>将该结果和缓存标识存入浏览器缓存中</code></li>\n</ul>\n<p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 <code>强制缓存</code> 和 <code>协商缓存</code> 。</p>\n<ul>\n<li>\n<p><strong>强制缓存</strong></p>\n<p><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code> 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  <code>Expires</code>  和  <code>Cache-Control</code> ，其中 Cache-Control 优先级比 Expires 高。</p>\n<p>强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：</p>\n<ol>\n<li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li>\n<li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li>\n<li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li>\n</ol>\n</li>\n<li>\n<p><strong>协商缓存</strong></p>\n<p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code> ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： <code>Last-Modified / If-Modified-Since</code>  和  <code>Etag / If-None-Match</code> ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：</p>\n<ol>\n<li>协商缓存生效，返回 304</li>\n<li>协商缓存失效，返回 200 和请求结果结果</li>\n</ol>\n</li>\n</ul>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx\"># 彻底理解浏览器的缓存机制</span></p>\n<h3 id=\"cookie-sessionstorage-localstorage-的区别\"><a class=\"anchor\" href=\"#cookie-sessionstorage-localstorage-的区别\">#</a> Cookie、sessionStorage、localStorage 的区别</h3>\n<p><strong>相同点</strong>：</p>\n<ul>\n<li>存储在客户端</li>\n</ul>\n<p><strong>不同点</strong>：</p>\n<ul>\n<li>cookie 数据大小不能超过 4k；sessionStorage 和 localStorage 的存储比 cookie 大得多，可以达到 5M+</li>\n<li>cookie 设置的过期时间之前一直有效；localStorage 永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage 数据在当前浏览器窗口关闭后自动删除</li>\n<li>cookie 的数据会自动的传递到服务器；sessionStorage 和 localStorage 数据保存在本地</li>\n</ul>\n<h3 id=\"说下进程-线程和协程\"><a class=\"anchor\" href=\"#说下进程-线程和协程\">#</a> 说下进程、线程和协程</h3>\n<p><strong>进程</strong>是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程， <code>是操作系统进行资源分配和调度的一个独立单位</code> ，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。</p>\n<p><strong>线程</strong>是程序执行中一个单一的顺序控制流程，是 <code>程序执行流的最小单元</code> ，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间 (也就是所在进程的内存空间)。一个标准的线程由线程 ID、当前指令指针 (PC)、寄存器和堆栈组成。而进程由内存空间 (代码、数据、进程空间、打开的文件) 和一个或多个线程组成。</p>\n<p><strong>协程</strong>，英文 Coroutines，是一种 <code>基于线程之上，但又比线程更加轻量级的存在</code> ，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。</p>\n<p><strong>进程和线程的区别与联系</strong></p>\n<p>【区别】：</p>\n<p>调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；</p>\n<p>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；</p>\n<p>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</p>\n<p>系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。</p>\n<p>【联系】：</p>\n<p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；</p>\n<p>资源分配给进程，同一进程的所有线程共享该进程的所有资源；</p>\n<p>处理机分给线程，即真正在处理机上运行的是线程；</p>\n<p>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA1NDY1MzgxNzkxODc1MTA5\"># 一文搞懂进程、线程、协程及 JS 协程的发展</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4zNjBkb2MuY29tL2NvbnRlbnQvMjAvMDQxNy8xNC8zMjE5NjUwN185MDY2Mjg4NTcuc2h0bWw=\">☞了解更多</span></p>\n<p>关于浏览器传送门 ☞<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkzMDk1MzQ1NTc2MDgzNDg2\"># 深入了解现代 Web 浏览器</span></p>\n<h3 id=\"进程间的通信方式\"><a class=\"anchor\" href=\"#进程间的通信方式\">#</a> 进程间的通信方式</h3>\n<p><code>进程通信</code> ：<br />\n每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程 A 把数据从用户空间拷到内核缓冲区，进程 B 再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信。</p>\n<p>进程间的通信方式：管道、有名管道、信号、消息队列、共享内存、信号量、socket</p>\n<p><code>匿名管道( pipe )</code> ： 管道是一种半双工的通信方式，数据只能<strong>单向流动</strong>，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指<strong>父子进程关系</strong>。</p>\n<p><code>高级管道(popen)</code> ：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p>\n<p><code>有名管道 (named pipe) </code> ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>\n<p><code>消息队列( message queue )</code>  ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>\n<p><code>信号量( semophore )</code>  ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>\n<p><code>信号 ( sinal )</code>  ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>\n<p><code>共享内存( shared memory )</code>  ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>\n<p><code>套接字( socket ) 通信</code> ： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信</p>\n<h3 id=\"浏览器样式兼容\"><a class=\"anchor\" href=\"#浏览器样式兼容\">#</a> 浏览器样式兼容</h3>\n<h4 id=\"一-css初始化\"><a class=\"anchor\" href=\"#一-css初始化\">#</a> 一、CSS 初始化</h4>\n<p>每个浏览器的 css 默认样式不尽相同，所以最简单有效的方式就是对其进行初始化（覆盖默认样式）</p>\n<blockquote>\n<p margin:=\"\" 0;=\"\" padding:=\"\" 0;=\"\">常见 :  *</p>\n<p>库：normalize.css</p>\n</blockquote>\n<h4 id=\"二-浏览器私有属性\"><a class=\"anchor\" href=\"#二-浏览器私有属性\">#</a> 二、<strong>浏览器私有属性</strong></h4>\n<blockquote>\n<p>常用的前缀有：</p>\n<p>firefox 浏览器 ：-moz-</p>\n<p>chrome、safari ：-webkit-</p>\n<p>opera ：-o- / -xv-</p>\n<p>IE 浏览器 ：-ms-（目前只有 IE 8 + 支持）</p>\n</blockquote>\n<h4 id=\"三-css-hack条件hack-属性级hack-选择符级hack\"><a class=\"anchor\" href=\"#三-css-hack条件hack-属性级hack-选择符级hack\">#</a> <strong>三、CSS hack（条件 hack、属性级 hack、选择符级 hack）</strong></h4>\n<h3 id=\"js垃圾回收机制\"><a class=\"anchor\" href=\"#js垃圾回收机制\">#</a> JS 垃圾回收机制</h3>\n<ol>\n<li>\n<p>项目中，如果存在大量不被释放的内存（堆 / 栈 / 上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。</p>\n</li>\n<li>\n<p>浏览器垃圾回收机制 / 内存回收机制:</p>\n<blockquote>\n<p>浏览器的 <code>Javascript</code>  具有自动垃圾回收机制 ( <code>GC:Garbage Collecation</code> )，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p>\n</blockquote>\n<p><strong>标记清除</strong>：在 <code>js</code>  中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为 “进入环境”，当变量离开执行环境时，会被标记为 “离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。<br />\n<strong>谷歌浏览器</strong>：“查找引用”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收。<br />\n<strong>IE 浏览器</strong>：“引用计数法”，当前内存被占用一次，计数累加 1 次，移除占用就减 1，减到 0 时，浏览器就回收它。</p>\n</li>\n<li>\n<p>优化手段：内存优化；手动释放：取消内存的占用即可。</p>\n<p>（1）堆内存：fn = null 【null：空指针对象】</p>\n<p>（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。</p>\n</li>\n<li>\n<p>内存泄漏</p>\n<p>在 JS 中，常见的内存泄露主要有 4 种，全局变量、闭包、DOM 元素的引用、定时器</p>\n</li>\n</ol>\n",
            "tags": [
                "前端面试",
                "前端面试",
                "浏览器知识"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/03.HTML%20&&%20CSS/",
            "url": "https://aaaa8880788.github.io/web-interview/03.HTML%20&&%20CSS/",
            "title": "Html-css",
            "date_published": "2024-03-02T02:52:21.678Z",
            "content_html": "<h2 id=\"html-css\"><a class=\"anchor\" href=\"#html-css\">#</a> HTML &amp;&amp; CSS</h2>\n<h3 id=\"html5-新特性-语义化\"><a class=\"anchor\" href=\"#html5-新特性-语义化\">#</a> HTML5 新特性、语义化</h3>\n<ol>\n<li>\n<p><strong>概念</strong>：</p>\n<p>HTML5 的语义化指的是 <code>合理正确的使用语义化的标签来创建页面结构</code> 。【正确的标签做正确的事】</p>\n</li>\n<li>\n<p><strong>语义化标签</strong>：</p>\n<p>header nav main article section aside footer</p>\n</li>\n<li>\n<p><strong>语义化的优点</strong>:</p>\n<ul>\n<li>在 <code>没CSS样式的情况下，页面整体也会呈现很好的结构效果</code></li>\n<li><code>代码结构清晰</code> ，易于阅读，</li>\n<li><code>利于开发和维护</code>  方便其他设备解析（如屏幕阅读器）根据语义渲染网页。</li>\n<li><code>有利于搜索引擎优化（SEO）</code> ，搜索引擎爬虫会根据不同的标签来赋予不同的权重</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"html5新特性有哪些\"><a class=\"anchor\" href=\"#html5新特性有哪些\">#</a> HTML5 新特性有哪些</h3>\n<ul>\n<li>语义化标签</li>\n<li>音视频处理 API (audio,video)</li>\n<li>canvas / webGL</li>\n<li>拖拽释放 (Drag and drop) API</li>\n<li>history API</li>\n<li>requestAnimationFrame</li>\n<li>地理位置 (Geolocation) API</li>\n<li>webSocket</li>\n<li>web 存储 localStorage、SessionStorage</li>\n<li>表单控件，calendar、date、time、email、url、search</li>\n</ul>\n<h3 id=\"css-选择器及优先级\"><a class=\"anchor\" href=\"#css-选择器及优先级\">#</a> CSS 选择器及优先级</h3>\n<p><strong>选择器</strong></p>\n<ul>\n<li>id 选择器 (#myid)</li>\n<li>类选择器 (.myclass)</li>\n<li>属性选择器 (a [rel=&quot;external&quot;])</li>\n<li>伪类选择器 (a:hover, li:nth-child)</li>\n<li>标签选择器 (div, h1,p)</li>\n<li>相邻选择器（h1 + p）</li>\n<li>子选择器 (ul&gt; li)</li>\n<li>后代选择器 (li a)</li>\n<li>通配符选择器 (*)</li>\n</ul>\n<p><strong>优先级：</strong></p>\n<ul>\n<li><code>!important</code></li>\n<li>内联样式（1000）</li>\n<li>ID 选择器（0100）</li>\n<li>类选择器 / 属性选择器 / 伪类选择器（0010）</li>\n<li>元素选择器 / 伪元素选择器（0001）</li>\n<li>关系选择器 / 通配符选择器（0000）</li>\n</ul>\n<p>带！important 标记的样式属性优先级最高； 样式表的来源相同时：<br />\n <code>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p>\n<h3 id=\"渐进增强与优雅降级的理解及区别\"><a class=\"anchor\" href=\"#渐进增强与优雅降级的理解及区别\">#</a> 渐进增强与优雅降级的理解及区别</h3>\n<p><strong>渐进增强（Progressive Enhancement）：</strong><br />\n一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p>\n<p><strong>优雅降级（Graceful Degradation）：</strong><br />\n一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。<br />\n<strong>两者区别</strong><br />\n 1、广义：<br />\n其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级<br />\n 2、狭义：<br />\n渐进增强一般说的是使用 CSS3 技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现 html 标签的语义，以便在 js/css 的加载失败 / 被禁用时，也不影响用户的相应功能。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 例子 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.transition</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 渐进增强写法 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.transition</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 优雅降级写法 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> all .5s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"常见的兼容性问题\"><a class=\"anchor\" href=\"#常见的兼容性问题\">#</a> 常见的兼容性问题</h3>\n<ol>\n<li margin:0;padding:0;=\"\">\n<p>不同浏览器的标签默认的 margin 和 padding 不一样。*</p>\n</li>\n<li>\n<p>IE6 双边距 bug：块属性标签 float 后，又有横行的 margin 情况下，在 IE6 显示 margin 比设置的大。hack：display:inline; 将其转化为行内属性。</p>\n</li>\n<li>\n<p>设置较小高度标签（一般小于 10px），在 IE6，IE7 中高度超出自己设置高度。hack：给超出高度的标签设置 overflow:hidden; 或者设置行高 line-height 小于你设置的高度。</p>\n</li>\n<li>\n<p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示，可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</p>\n</li>\n<li>\n<p>超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不再具有 hover 和 active 了。解决方法是改变 CSS 属性的排列顺序：L-V-H-A (love hate): a:link {} a:visited {} a:hover {} a:active {}</p>\n</li>\n</ol>\n<h3 id=\"css3新特性\"><a class=\"anchor\" href=\"#css3新特性\">#</a> CSS3 新特性</h3>\n<ul>\n<li>过渡</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 所有属性从原始值到制定值的一个过渡，运动曲线 ease, 运动时间 0.5 秒 */</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>transition：all<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span>5s</pre></td></tr></table></figure><ul>\n<li>动画</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//animation：动画名称，一个周期花费时间，运动曲线（默认 ease），动画延迟（默认 0），播放次数（默认 1），是否反向播放动画（默认 normal），是否暂停动画（默认 running）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 执行一次 logo2-line 动画，运动时间 2 秒，运动曲线为 linear*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">animation</span><span class=\"token operator\">:</span> logo2<span class=\"token operator\">-</span>line 2s linear<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>形状转换</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//transform: 适用于 2D 或 3D 转换的元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//transform-origin：转换元素的位置（围绕那个点进行转换）。默认 (x,y,z)：(50%,50%,0)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>30px<span class=\"token punctuation\">,</span>30px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>选择器:nth-of-type ()</p>\n</li>\n<li>\n<p>阴影<br />\n文字阴影: text-shadow: 2px 2px 2px #000;(水平阴影，垂直阴影，模糊距离，阴影颜色) 盒子阴影: box-shadow: 10px 10px 5px #999</p>\n</li>\n<li>\n<p>边框 border-image: url (border.png);</p>\n</li>\n<li>\n<p>背景</p>\n</li>\n<li>\n<p>文字</p>\n</li>\n<li>\n<p>渐变</p>\n</li>\n<li>\n<p>Filter（滤镜）</p>\n</li>\n<li>\n<p>弹性布局、栅格布局、多列布局</p>\n</li>\n<li>\n<p>媒体查询</p>\n</li>\n</ul>\n<h3 id=\"position-属性的值有哪些及其区别\"><a class=\"anchor\" href=\"#position-属性的值有哪些及其区别\">#</a> position 属性的值有哪些及其区别</h3>\n<p><strong>固定定位 fixed</strong>： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。</p>\n<p><strong>相对定位 relative</strong>： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素 “相对于” 它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</p>\n<p><strong>绝对定位 absolute</strong>： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。</p>\n<p><strong>粘性定位 sticky</strong>： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。</p>\n<p><strong>默认定位 Static</strong>： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。</p>\n<h3 id=\"box-sizing属性\"><a class=\"anchor\" href=\"#box-sizing属性\">#</a> box-sizing 属性</h3>\n<p>box-sizing 规定两个并排的带边框的框，语法为 box-sizing：content-box/border-box/inherit</p>\n<p><strong>content-box</strong>：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。【标准盒子模型】</p>\n<p><strong>border-box</strong>：为元素设定的宽度和高度决定了元素的边框盒。【IE 盒子模型】</p>\n<p><strong>inherit</strong>：继承父元素的 box-sizing 值。</p>\n<h3 id=\"css-盒子模型\"><a class=\"anchor\" href=\"#css-盒子模型\">#</a> CSS 盒子模型</h3>\n<p>CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。<br />\n在标准的盒子模型中， <code>width 指 content 部分的宽度</code> 。<br />\n在 IE 盒子模型中， <code>width 表示 content+padding+border 这三个部分的宽度</code> 。</p>\n<p>故在计算盒子的宽度时存在差异：</p>\n<p><strong>标准盒模型：</strong> 一个块的总宽度 = width+margin (左右)+padding (左右)+border (左右)</p>\n<p><strong>怪异盒模型：</strong> 一个块的总宽度 = width+margin（左右）（既 width 已经包含了 padding 和 border 值）</p>\n<h3 id=\"bfc块级格式上下文\"><a class=\"anchor\" href=\"#bfc块级格式上下文\">#</a> BFC（块级格式上下文）</h3>\n<p><strong>BFC 的概念</strong></p>\n<p><code>BFC</code>  是  <code>Block Formatting Context </code> 的缩写，即块级格式化上下文。 <code>BFC</code>  是 CSS 布局的一个概念，是一个独立的渲染区域，规定了内部 box 如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。</p>\n<p><strong>BFC 的原理布局规则</strong></p>\n<ul>\n<li>内部的 Box 会在 <code>垂直方向</code> ，一个接一个地放置</li>\n<li>Box <code>垂直方向的距离由margin决定</code> 。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li>\n<li>每个元素的 margin box 的左边， 与包含块 border box 的左边相接触 (对于从左往右的格式化，否则相反</li>\n<li>BFC 的区域 <code>不会与float box重叠</code></li>\n<li>BFC 是一个独立容器，容器里面的 <code>子元素不会影响到外面的元素</code></li>\n<li>计算 BFC 的高度时， <code>浮动元素也参与计算高度</code></li>\n<li>元素的类型和 <code>display属性，决定了这个Box的类型</code> 。不同类型的 Box 会参与不同的 <code>Formatting Context</code> 。</li>\n</ul>\n<p><strong>如何创建 BFC？</strong></p>\n<ul>\n<li>根元素，即 HTML 元素</li>\n<li>float 的值不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 的值为 inline-block、table-cell、table-caption</li>\n<li>overflow 的值不为 visible</li>\n</ul>\n<p><strong>BFC 的使用场景</strong></p>\n<ul>\n<li>去除边距重叠现象</li>\n<li>清除浮动（让父元素的高度包含子浮动元素）</li>\n<li>避免某元素被浮动元素覆盖</li>\n<li>避免多列布局由于宽度计算四舍五入而自动换行</li>\n</ul>\n<h3 id=\"让一个元素水平垂直居中\"><a class=\"anchor\" href=\"#让一个元素水平垂直居中\">#</a> 让一个元素水平垂直居中</h3>\n<ul>\n<li>\n<p><strong>水平居中</strong></p>\n<ul>\n<li>\n<p>对于 行内元素 :  <code>text-align: center</code> ;</p>\n</li>\n<li>\n<p>对于确定宽度的块级元素：</p>\n<p>（1）width 和 margin 实现。 <code>margin: 0 auto</code> ;</p>\n<p>（2）绝对定位和 margin-left: margin-left: (父 width - 子 width）/2, 前提是父元素 position: relative</p>\n</li>\n<li>\n<p>对于宽度未知的块级元素</p>\n<p>（1） <code>table标签配合margin左右auto实现水平居中</code> 。使用 table 标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右 margin 为 auto。</p>\n<p>（2）inline-block 实现水平居中方法。display：inline-block 和 text-align:center 实现水平居中。</p>\n<p>（3） <code>绝对定位+transform</code> ，translateX 可以移动本身元素的 50%。</p>\n<p>（4）flex 布局使用 <code>justify-content:center</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>垂直居中</strong></p>\n<ol>\n<li>利用  <code>line-height</code>  实现居中，这种方法适合纯文字类</li>\n<li>通过设置父容器 相对定位 ，子级设置  <code>绝对定位</code> ，标签通过 margin 实现自适应居中</li>\n<li>弹性布局 flex : 父级设置 display: flex; 子级设置 margin 为 auto 实现自适应居中</li>\n<li>父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现</li>\n<li><code>table 布局</code> ，父级通过转换成表格形式， <code>然后子级设置 vertical-align 实现</code> 。（需要注意的是：vertical-align: middle 使用的前提条件是内联元素以及 display 值为 table-cell 的元素）。</li>\n</ol>\n</li>\n</ul>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDA4MzQ4NTI0NTMwMTA2Mzgx\"># 图解 CSS 水平垂直居中常见面试方法</span></p>\n<h3 id=\"隐藏页面中某个元素的方法\"><a class=\"anchor\" href=\"#隐藏页面中某个元素的方法\">#</a> 隐藏页面中某个元素的方法</h3>\n<p>1. <code>opacity：0</code> ，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如 click 事件，那么点击该区域，也能触发点击事件的</p>\n<p>2. <code>visibility：hidden</code> ，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p>\n<p>3. <code>display：none</code> ，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流 + 重绘）</p>\n<blockquote>\n<p>该问题会引出 回流和重绘</p>\n</blockquote>\n<h3 id=\"用css实现三角符号\"><a class=\"anchor\" href=\"#用css实现三角符号\">#</a> 用 CSS 实现三角符号</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 记忆口诀：盒子宽高均为零，三面边框皆透明。 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">div:after</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 100px solid #ff0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 100px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"页面布局\"><a class=\"anchor\" href=\"#页面布局\">#</a> 页面布局</h3>\n<h4 id=\"1flex-布局\"><a class=\"anchor\" href=\"#1flex-布局\">#</a> 1.Flex 布局</h4>\n<p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>Flex 是 Flexible Box 的缩写，意为 &quot;弹性布局&quot;, 用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。</p>\n<p>容器的属性：</p>\n<ul>\n<li>flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;</li>\n<li>flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;</li>\n<li flex-flow:=\"\" ||=\"\" ;=\"\">flex-flow： .box</li>\n<li>justify-content：对其方式，水平主轴对齐方式</li>\n<li>align-items：对齐方式，竖直轴线方向</li>\n<li>align-content</li>\n</ul>\n<p>项目的属性（元素的属性）：</p>\n<ul>\n<li>order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0</li>\n<li>flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大</li>\n<li>flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小</li>\n<li>flex-basis 属性：定义了在分配多余的空间，项目占据的空间。</li>\n<li>flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</li>\n<li>align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖</li>\n<li>align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局</li>\n</ul>\n<h4 id=\"2rem-布局\"><a class=\"anchor\" href=\"#2rem-布局\">#</a> 2.Rem 布局</h4>\n<p>首先 Rem 相对于根 (html) 的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;, 那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。</p>\n<p><strong>优点</strong>：可以快速适用移动端布局，字体，图片高度</p>\n<p><strong>缺点</strong>：</p>\n<p>①目前 ie 不支持，对 pc 页面来讲使用次数不多；<br />\n②数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；<br />\n③在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。</p>\n<h4 id=\"3百分比布局\"><a class=\"anchor\" href=\"#3百分比布局\">#</a> 3. 百分比布局</h4>\n<p>通过百分比单位 &quot;%&quot; 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。</p>\n<p><strong>缺点</strong>：</p>\n<p>（1）计算困难<br />\n（2）各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。</p>\n<h4 id=\"4浮动布局\"><a class=\"anchor\" href=\"#4浮动布局\">#</a> 4. 浮动布局</h4>\n<p>浮动布局：当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。</p>\n<p><strong>优点</strong></p>\n<p>这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与 inline-block 还是有一些区别的，第一个就是关于横向排序的时候，float 可以设置方向而 inline-block 方向是固定的；还有一个就是 inline-block 在使用时有时会有空白间隙的问题</p>\n<p><strong>缺点</strong></p>\n<p>最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素， <code>会造成父级元素高度塌陷</code> 。</p>\n<h3 id=\"如何使用rem或viewport进行移动端适配\"><a class=\"anchor\" href=\"#如何使用rem或viewport进行移动端适配\">#</a> 如何使用 rem 或 viewport 进行移动端适配</h3>\n<p><strong>rem 适配原理：</strong></p>\n<p>改变了一个元素在不同设备上占据的 css 像素的个数</p>\n<p>rem 适配的优缺点</p>\n<ul>\n<li>优点：没有破坏完美视口</li>\n<li>缺点：px 值转换 rem 太过于复杂 (下面我们使用 less 来解决这个问题)</li>\n</ul>\n<p><strong>viewport 适配的原理</strong></p>\n<p>viewport 适配方案中，每一个元素在不同设备上占据的 css 像素的个数是一样的。但是 css 像素和物理像素的比例是不一样的，等比的</p>\n<p>viewport 适配的优缺点</p>\n<ul>\n<li>在我们设计图上所量取的大小即为我们可以设置的像素大小，即所量即所设</li>\n<li>缺点破坏完美视口</li>\n</ul>\n<h3 id=\"清除浮动的方式\"><a class=\"anchor\" href=\"#清除浮动的方式\">#</a> 清除浮动的方式</h3>\n<ul>\n<li>添加额外标签</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    //添加额外标签并且添加clear属性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    //也可以加一个br标签</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>父级添加 overflow 属性，或者设置高度</li>\n<li>建立伪类选择器清除浮动</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 css 中添加:after 伪元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>parent<span class=\"token operator\">:</span>after<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 设置添加子元素的内容是空 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/* 设置添加子元素为块级元素 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/* 设置添加的子元素的高度 0 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/* 设置添加子元素看不见 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">visibility</span><span class=\"token operator\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/* 设置 clear：both */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">clear</span><span class=\"token operator\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"css预处理器sass-less-stylus的区别\"><a class=\"anchor\" href=\"#css预处理器sass-less-stylus的区别\">#</a> CSS 预处理器 Sass、Less、Stylus 的区别</h3>\n<p>什么事 CSS 预处理器？</p>\n<p>CSS 预处理器是一种语言用来为 CSS 增加一些变成的特性，无需考虑浏览器兼容问题，例如你可以在 CSS 中使用变量，简单的程序逻辑、函数等在编程语言中的一些基本技巧，可以让 CSS 更加简洁，适应性更强，代码更直观等诸多好处<br />\n基本语法区别</p>\n<p>Sass 是以.sass 为扩展名，Less 是以.less 为扩展名，Stylus 是以.styl 为扩展名<br />\n变量的区别</p>\n<p>Sass 变量必须是以 <code>$</code>  开头的，然后变量和值之间使用冒号（：）隔开，和 css 属性是一样的。<br />\nLess 变量是以 <code>@</code> 开头的，其余 sass 都是一样的。<br />\nStylus 对变量是没有任何设定的，可以是以 $ 开头或者任意字符，而且变量之间可以冒号，空格隔开，但是在 stylus 中不能用 @开头<br />\n三种预处理器都有：嵌套、运算符、颜色函数、导入、继承、混入。Stylus 还有一些高级特性。例如循环、判断等</p>\n",
            "tags": [
                "前端面试",
                "前端面试",
                "Html-css"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/04.JavaScript/",
            "url": "https://aaaa8880788.github.io/web-interview/04.JavaScript/",
            "title": "Javascript",
            "date_published": "2024-03-02T02:52:21.678Z",
            "content_html": "<h2 id=\"javascript\"><a class=\"anchor\" href=\"#javascript\">#</a> JavaScript</h2>\n<h3 id=\"js中的8种数据类型及区别\"><a class=\"anchor\" href=\"#js中的8种数据类型及区别\">#</a> JS 中的 8 种数据类型及区别</h3>\n<p>包括值类型 (基本对象类型) 和引用类型 (复杂对象类型)</p>\n<p><strong>基本类型 (值类型)：</strong> Number (数字),String (字符串),Boolean (布尔),Symbol (符号),null (空),undefined (未定义) 在内存中占据固定大小，保存在栈内存中</p>\n<p><strong>引用类型 (复杂数据类型)：</strong> Object (对象)、Function (函数)。其他还有 Array (数组)、Date (日期)、RegExp (正则表达式)、特殊的基本包装类型 (String、Number、Boolean) 以及单体内置对象 (Global、Math) 等 引用类型的值是对象 保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p>\n<p><strong>使用场景：</strong></p>\n<p>Symbol：使用 Symbol 来作为对象属性名 (key)  利用该特性，把一些不需要对外操作和访问的属性使用 Symbol 来定义</p>\n<p>BigInt：由于在 Number 与 BigInt 之间进行转换会损失精度，因而建议仅在值可能大于 253 时使用 BigInt 类型，并且不在两种类型之间进行相互转换。</p>\n<p>传送门 ☞<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAwNzU0ODEzODAxNzc1MTEx\"># JavaScript 数据类型之 Symbol、BigInt</span></p>\n<h3 id=\"js中的数据类型检测方案\"><a class=\"anchor\" href=\"#js中的数据类型检测方案\">#</a> JS 中的数据类型检测方案</h3>\n<h4 id=\"1typeof\"><a class=\"anchor\" href=\"#1typeof\">#</a> 1.typeof</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'mc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Symbol<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>优点：能够快速区分基本数据类型</p>\n<p>缺点：不能将 Object、Array 和 Null 区分，都返回 object</p>\n<h4 id=\"2instanceof\"><a class=\"anchor\" href=\"#2instanceof\">#</a> 2.instanceof</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>优点：能够区分 Array、Object 和 Function，适合用于判断自定义的类实例对象</p>\n<p>缺点：Number，Boolean，String 基本数据类型不能判断</p>\n<h4 id=\"3objectprototypetostringcall\"><a class=\"anchor\" href=\"#3objectprototypetostringcall\">#</a> 3.Object.prototype.toString.call()</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> toString <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//[object Number]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//[object Boolean]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//[object String]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//[object Array]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//[object Object]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[object Function]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//[object Undefined]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[object Null]</span></pre></td></tr></table></figure><p>优点：精准判断数据类型</p>\n<p>缺点：写法繁琐不容易记，推荐进行封装后使用</p>\n<h4 id=\"instanceof-的作用\"><a class=\"anchor\" href=\"#instanceof-的作用\">#</a> instanceof 的作用</h4>\n<p>用于判断一个引用类型是否属于某构造函数；</p>\n<p>还可以在继承关系中用来判断一个实例是否属于它的父类型。</p>\n<h4 id=\"instanceof-和-typeof-的区别\"><a class=\"anchor\" href=\"#instanceof-和-typeof-的区别\">#</a> instanceof 和 typeof 的区别：</h4>\n<p>typeof 在对值类型 number、string、boolean 、null 、 undefined、 以及引用类型的 function 的反应是精准的；但是，对于对象 {} 、数组 [] 、null 都会返回 object</p>\n<p>为了弥补这一点，instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型。</p>\n<h3 id=\"var-let-const\"><a class=\"anchor\" href=\"#var-let-const\">#</a> var &amp;&amp; let &amp;&amp; const</h3>\n<p>ES6 之前创建变量用的是 var, 之后创建变量用的是 let/const</p>\n<p><strong>三者区别</strong>：</p>\n<ol>\n<li>var 定义的变量， <code>没有块的概念，可以跨块访问</code> ，不能跨函数访问。<br />\nlet 定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。<br />\nconst 用来定义常量，使用时必须初始化 (即必须赋值)，只能在块作用域里访问，且不能修改。</li>\n<li>var 可以 <code>先使用，后声明</code> ，因为存在变量提升；let 必须先声明后使用。</li>\n<li>var 是允许在相同作用域内 <code>重复声明同一个变量</code> 的，而 let 与 const 不允许这一现象。</li>\n<li>在全局上下文中，基于 let 声明的全局变量和全局对象 GO（window）没有任何关系；<br />\nvar 声明的变量会和 GO 有映射关系；</li>\n<li><code>会产生暂时性死区</code> ：</li>\n</ol>\n<blockquote>\n<p>暂时性死区是浏览器的 bug：检测一个未被声明的变量类型时，不会报错，会返回 undefined<br />\n 如：console.log (typeof a) //undefined<br />\n 而：console.log (typeof a)// 未声明之前不能使用<br />\n let a</p>\n</blockquote>\n<ol start=\"6\">\n<li>let /const/function 会把当前所在的大括号 (除函数之外) 作为一个全新的块级上下文，应用这个机制，在开发项目的时候，遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于 let 的块作用特征即可解决</li>\n</ol>\n<h3 id=\"作用域和作用域链\"><a class=\"anchor\" href=\"#作用域和作用域链\">#</a> 作用域和作用域链</h3>\n<p>创建函数的时候，已经声明了当前函数的作用域 ==&gt; <code>当前创建函数所处的上下文</code> 。如果是在全局下创建的函数就是 <code>[[scope]]:EC(G)</code> ，函数执行的时候，形成一个全新的私有上下文 <code>EC(FN)</code> ，供字符串代码执行 (进栈执行)</p>\n<p>定义：简单来说作用域就是变量与函数的可访问范围， <code>由当前环境与上层环境的一系列变量对象组成</code> <br />\n 1. 全局作用域：代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。<br />\n2. 函数作用域：在固定的代码片段才能被访问</p>\n<p>作用：作用域最大的用处就是 <code>隔离变量</code> ，不同作用域下同名变量不会有冲突。</p>\n<p><strong>作用域链参考链接</strong>一般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p>\n<h3 id=\"闭包的两大作用保存保护\"><a class=\"anchor\" href=\"#闭包的两大作用保存保护\">#</a> 闭包的两大作用：保存 / 保护</h3>\n<ul>\n<li>\n<p><strong>闭包的概念</strong></p>\n<p>函数执行时形成的私有上下文 EC (FN)，正常情况下，代码执行完会出栈后释放；但是特殊情况下，如果当前私有上下文中的某个东西被上下文以外的事物占用了，则上下文不会出栈释放，从而形成不销毁的上下文。 函数执行函数执行过程中，会形成一个全新的私有上下文，可能会被释放，可能不会被释放，不论释放与否，他的作用是：</p>\n</li>\n</ul>\n<p>（1）保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）；</p>\n<p>（2）保存：如果当前上下文不被释放【只要上下文中的某个东西被外部占用即可】，则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来了；</p>\n<p>我们把函数执行形成私有上下文，来保护和保存私有变量机制称为 <code>闭包</code> 。</p>\n<blockquote>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数 --《JavaScript 高级程序设计》</p>\n</blockquote>\n<p><strong>稍全面的回答</strong>： 在 js 中变量的作用域属于函数作用域，在函数执行完后，作用域就会被清理，内存也会随之被回收，但是由于闭包函数是建立在函数内部的子函数，由于其可访问上级作用域，即使上级函数执行完，作用域也不会随之销毁，这时的子函数 (也就是闭包), 便拥有了访问上级作用域中变量的权限，即使上级函数执行完后作用域内的值也不会被销毁。</p>\n<ul>\n<li>\n<p><strong>闭包的特性</strong>：</p>\n<ul>\n<li>\n<p>1、内部函数可以访问定义他们外部函数的参数和变量。(作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁) 设计私有的方法和变量，避免全局变量的污染。</p>\n<p>1.1. 闭包是密闭的容器，，类似于 set、map 容器，存储数据的</p>\n<p>1.2. 闭包是一个对象，存放数据的格式为 key-value 形式</p>\n</li>\n<li>\n<p>2、函数嵌套函数</p>\n</li>\n<li>\n<p>3、本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>闭包形成的条件</strong>：</p>\n<ol>\n<li>函数的嵌套</li>\n<li>内部函数引用外部函数的局部变量，延长外部函数的变量生命周期</li>\n</ol>\n</li>\n<li>\n<p><strong>闭包的用途</strong>：</p>\n<ol>\n<li>模仿块级作用域</li>\n<li>保护外部函数的变量 能够访问函数定义时所在的词法作用域 (阻止其被回收)</li>\n<li>封装私有化变量</li>\n<li>创建模块</li>\n</ol>\n</li>\n<li>\n<p><strong>闭包应用场景</strong></p>\n<p>闭包的两个场景，闭包的两大作用： <code>保存/保护</code> 。 在开发中，其实我们随处可见闭包的身影，大部分前端 JavaScript 代码都是 “事件驱动” 的，即一个事件绑定的回调方法；发送 ajax 请求成功 | 失败的回调；setTimeout 的延时回调；或者一个函数内部返回另一个匿名函数，这些都是闭包的应用。</p>\n</li>\n<li>\n<p><strong>闭包的优点</strong>：延长局部变量的生命周期</p>\n</li>\n<li>\n<p><strong>闭包缺点</strong>：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</p>\n</li>\n</ul>\n<h3 id=\"js-中-this-的情况\"><a class=\"anchor\" href=\"#js-中-this-的情况\">#</a> JS 中 this 的情况</h3>\n<ol>\n<li>普通函数调用：通过函数名 () 直接调用： <code>this</code>  指向 <code>全局对象window</code> （注意 let 定义的变量不是 window 属性，只有 window.xxx 定义的才是。即 let a =’aaa’; this.a 是 undefined）</li>\n<li>构造函数调用：函数作为构造函数，用 new 关键字调用时： <code>this</code>  指向 <code>新new出的对象</code></li>\n<li>对象函数调用：通过对象。函数名 () 调用的： <code>this</code>  指向 <code>这个对象</code></li>\n<li>箭头函数调用：箭头函数里面没有 this ，所以 <code>永远是上层作用域this</code> （上下文）</li>\n<li>apply 和 call 调用：函数体内 this 的指向的是 call/apply 方法 <code>第一个参数</code> ，若为空默认是指向全局对象 window。</li>\n<li>函数作为数组的一个元素，通过数组下标调用的：this 指向这个数组</li>\n<li>函数作为 window 内置函数的回调函数调用：this 指向 window（如 setInterval setTimeout 等）</li>\n</ol>\n<h3 id=\"callapplybind-的区别\"><a class=\"anchor\" href=\"#callapplybind-的区别\">#</a> call/apply/bind 的区别</h3>\n<p>相同：</p>\n<p>1、都是用来改变函数的 this 对象的指向的。<br />\n2、第一个参数都是 this 要指向的对象。<br />\n3、都可以利用后续参数传参。</p>\n<p>不同：</p>\n<p>apply 和 call 传入的参数列表形式不同。apply 接收 arguments，call 接收一串参数列表</p>\n<pre><code>fn.call(obj, 1, 2);\nfn.apply(obj, [1, 2]);\n</code></pre>\n<p>bind：语法和 call 一模一样，区别在于立即执行还是等待执行，bind 不兼容 IE6~8<br />\nbind 主要就是将函数绑定到某个对象，bind () 会创建一个函数，返回对应函数便于稍后调用；而 apply、call 则是立即调用。</p>\n<p>总结：基于 Function.prototype 上的  <code>apply 、 call 和 bind </code> 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。 <code>apply</code>  接收参数的是数组， <code>call</code>  接受参数列表，`` bind <code>方法通过传入一个对象，返回一个</code>  this  <code>绑定了传入对象的新函数。这个函数的 </code> this <code>指向除了使用</code>  new ` 时会被改变，其他情况下都不会改变。若为空默认是指向全局对象 window。</p>\n<p>参考：☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hleGlueXVfMTAyMi9hcnRpY2xlL2RldGFpbHMvODI3OTU1MTc=\">call、apply、bind 三者的用法和区别</span></p>\n<h3 id=\"箭头函数的特性\"><a class=\"anchor\" href=\"#箭头函数的特性\">#</a> 箭头函数的特性</h3>\n<ol>\n<li><code>箭头函数没有自己的this</code> ，会捕获其所在的上下文的 this 值，作为自己的 this 值</li>\n<li><code>箭头函数没有constructor</code> ，是匿名函数，不能作为构造函数，不能通过 new 调用；</li>\n<li><code>没有new.target 属性</code> 。在通过 new 运算符被初始化的函数或构造方法中，new.target 返回一个指向构造方法或函数的引用。在普通的函数调用中，new.target 的值是 undefined</li>\n<li><code>箭头函数不绑定Arguments 对象</code> 。取而代之用 rest 参数... 解决。由于 箭头函数没有自己的 this 指针，通过 call () 或 apply () 方法调用一个函数时，只能传递参数（不能绑定 this），他们的第一个参数会被忽略。（这种现象对于 bind 方法同样成立）</li>\n<li>箭头函数通过 call ()  或   apply () 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。</li>\n<li>箭头函数没有原型属性 Fn.prototype 值为 undefined</li>\n<li>箭头函数不能当做 Generator 函数，不能使用 yield 关键字</li>\n</ol>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYml1Yml1eGl4aXlhL3AvODYxMDU5NC5odG1s\">箭头函数与普通函数的区别</span></p>\n<h3 id=\"原型-原型链\"><a class=\"anchor\" href=\"#原型-原型链\">#</a> 原型 &amp;&amp; 原型链</h3>\n<p><strong>原型关系：</strong></p>\n<ul>\n<li>每个 class 都有显示原型 prototype</li>\n<li>每个实例都有隐式原型  <code>__proto__</code></li>\n<li>实例的  <code>__proto__</code>  指向对应 class 的 prototype</li>\n</ul>\n<p>‌ <strong>原型:</strong>  在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个 <code>函数对象</code> 都有一个 <code>prototype</code>  属性，这个属性指向函数的 <code>原型对象</code> 。</p>\n<p>原型链：函数的原型链对象 constructor 默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__, 该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向 Object 的原型对象上，而 Object 原型对象用 Object.prototype.__ proto__ = null 表示原型链顶端。如此形成了 js 的原型链继承。同时所有的 js 对象都有 Object 的基本防范</p>\n<p><strong>特点:</strong>   <code>JavaScript</code>  对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p>\n<h3 id=\"new运算符的实现机制\"><a class=\"anchor\" href=\"#new运算符的实现机制\">#</a> new 运算符的实现机制</h3>\n<ol>\n<li>首先创建了一个新的 <code>空对象</code></li>\n<li><code>设置原型</code> ，将对象的原型设置为函数的 <code>prototype</code>  对象。</li>\n<li>让函数的 <code>this</code>  指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li>\n<li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li>\n</ol>\n<h3 id=\"eventloop-事件循环\"><a class=\"anchor\" href=\"#eventloop-事件循环\">#</a> EventLoop 事件循环</h3>\n<p><code>JS</code>  是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是， <code>Promise.then</code> ， <code>MutationObserver</code> ，宏任务的话就是 <code>setImmediate setTimeout setInterval</code></p>\n<p>JS 运行的环境。一般为浏览器或者 Node。 在浏览器环境中，有 JS 引擎线程和渲染线程，且两个线程互斥。 Node 环境中，只有 JS 线程。 不同环境执行机制有差异，不同任务进入不同 Event Queue 队列。 当主程结束，先执行准备好微任务，然后再执行准备好的宏任务，一个轮询结束。</p>\n<h4 id=\"浏览器中的事件环event-loop\"><a class=\"anchor\" href=\"#浏览器中的事件环event-loop\">#</a> <strong>浏览器中的事件环（Event Loop)</strong></h4>\n<p>事件环的运行机制是，先会执行栈中的内容，栈中的内容执行后执行微任务，微任务清空后再执行宏任务，先取出一个宏任务，再去执行微任务，然后在取宏任务清微任务这样不停的循环。</p>\n<ul>\n<li>\n<p>eventLoop 是由 JS 的宿主环境（浏览器）来实现的；</p>\n</li>\n<li>\n<p>事件循环可以简单的描述为以下四个步骤:</p>\n<ol>\n<li>函数入栈，当 Stack 中执行到异步任务的时候，就将他丢给 WebAPIs, 接着执行同步任务，直到 Stack 为空；</li>\n<li>此期间 WebAPIs 完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列）</li>\n<li>执行栈为空时，Event Loop 把微任务队列执行清空；</li>\n<li>微任务队列清空后，进入宏任务队列，取队列的第一项任务放入 Stack (栈）中执行，执行完成后，查看微任务队列是否有任务，有的话，清空微任务队列。重复 4，继续从宏任务中取任务执行，执行完成之后，继续清空微任务，如此反复循环，直至清空所有的任务。</li>\n</ol>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/342e581223d2471d9484fc48beb9f8e1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"事件循环流程\" /></p>\n</li>\n<li>\n<p>浏览器中的任务源 (task):</p>\n<ul>\n<li><code>宏任务(macrotask)</code> ：<br />\n宿主环境提供的，比如浏览器<br />\n ajax、setTimeout、setInterval、setTmmediate (只兼容 ie)、script、requestAnimationFrame、messageChannel、UI 渲染、一些浏览器 api</li>\n<li><code>微任务(microtask)</code> ：<br />\n语言本身提供的，比如 promise.then<br />\nthen、queueMicrotask (基于 then)、mutationObserver (浏览器提供)、messageChannel 、mutationObersve</li>\n</ul>\n</li>\n</ul>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAxODgxNzgxMTI1MjUxMDg2\"># 宏任务和微任务</span></p>\n<h4 id=\"node-环境中的事件环event-loop\"><a class=\"anchor\" href=\"#node-环境中的事件环event-loop\">#</a> <strong>Node 环境中的事件环（Event Loop)</strong></h4>\n<p><code>Node</code>  是基于 V8 引擎的运行在服务端的 <code>JavaScript</code>  运行环境，在处理高并发、I/O 密集 (文件操作、网络操作、数据库操作等) 场景有明显的优势。虽然用到也是 V8 引擎，但由于服务目的和环境不同，导致了它的 API 与原生 JS 有些区别，其 Event Loop 还要处理一些 I/O，比如新的网络连接等，所以 Node 的 Event Loop (事件环机制) 与浏览器的是不太一样。</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e362c1770f62428fbf3faabd99d2a64c~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"2020120317343116.png\" /> 执行顺序如下：</p>\n<ul>\n<li><code>timers</code> : 计时器，执行 setTimeout 和 setInterval 的回调</li>\n<li><code>pending callbacks</code> : 执行延迟到下一个循环迭代的 I/O 回调</li>\n<li><code>idle, prepare</code> : 队列的移动，仅系统内部使用</li>\n<li><code>poll轮询</code> ：检索新的 I/O 事件；执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。</li>\n<li><code>check</code> : 执行 <code>setImmediate</code>  回调，setImmediate 在这里执行</li>\n<li><code>close callbacks</code> : 执行 <code>close</code>  事件的 <code>callback</code> ，一些关闭的回调函数，如：socket.on ('close', ...)</li>\n</ul>\n<h3 id=\"settimeout-promise-asyncawait-的区别\"><a class=\"anchor\" href=\"#settimeout-promise-asyncawait-的区别\">#</a> setTimeout、Promise、Async/Await 的区别</h3>\n<ol>\n<li>\n<p>setTimeout</p>\n<p>settimeout 的回调函数放到宏任务队列里，等到执行栈清空以后执行。</p>\n</li>\n<li>\n<p>Promise</p>\n<p>Promise 本身是<strong>同步的立即执行函数</strong>， 当在 executor 中执行 resolve 或者 reject 的时候，此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span></pre></td></tr></table></figure></li>\n<li>\n<p>async/await</p>\n<p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->async1 start->async2->script end->async1 end</span></pre></td></tr></table></figure></li>\n</ol>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk5NjUxMDExMzA0MzU3OTI1\"># JavaScript Promise 专题</span></p>\n<h3 id=\"asyncawait-如何通过同步的方式实现异步\"><a class=\"anchor\" href=\"#asyncawait-如何通过同步的方式实现异步\">#</a> Async/Await 如何通过同步的方式实现异步</h3>\n<p>Async/Await 就是一个<strong>自执行</strong>的 generate 函数。利用 generate 函数的特性把异步的代码写成 “同步” 的形式，第一个请求的返回值作为后面一个请求的参数，其中每一个参数都是一个 promise 对象.</p>\n<h3 id=\"介绍节流防抖原理-区别以及应用\"><a class=\"anchor\" href=\"#介绍节流防抖原理-区别以及应用\">#</a> 介绍节流防抖原理、区别以及应用</h3>\n<p><code>节流</code> ：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。</p>\n<p><code>防抖</code> ：多次触发事件，事件处理函数只能执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发准备执行事件函数前，会等待一定的时间（这时间是码农自己去定义的，比如 1 秒），如果没有再次被触发，那么就执行，如果被触发了，那就本次作废，重新从新触发的时间开始计算，并再次等待 1 秒，直到能最终执行！</p>\n<p><code>使用场景</code> ：<br />\n节流：滚动加载更多、搜索框搜的索联想功能、高频点击、表单重复提交……<br />\n 防抖：搜索框搜索输入，并在输入完以后自动搜索、手机号，邮箱验证输入检测、窗口大小 resize 变化后，再重新渲染。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 节流函数 一个函数执行一次后，只有大于设定的执行周期才会执行第二次。有个需要频繁触发的函数，出于优化性能的角度，在规定时间内，只让函数触发的第一次生效，后面的不生效。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param fn 要被节流的函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param delay 规定的时间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 记录上一次函数触发的时间</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">var</span> lastTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 记录当前函数触发的时间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">var</span> nowTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nowTime <span class=\"token operator\">-</span> lastTime <span class=\"token operator\">></span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 修正 this 指向问题</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 同步执行结束时间</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            lastTime <span class=\"token operator\">=</span> nowTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>document<span class=\"token punctuation\">.</span>onscroll <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scllor事件被触发了'</span> <span class=\"token operator\">+</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * 防抖函数  一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * @param fn 要被节流的函数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * @param delay 规定的时间</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 记录上一次的延时器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token comment\">// 清除上一次的演示器</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 重新设置新的延时器</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 修正 this 指向问题</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按钮被点击了'</span> <span class=\"token operator\">+</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "前端面试",
                "Javascript",
                "前端面试"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/web-interview/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "https://aaaa8880788.github.io/web-interview/01.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络",
            "date_published": "2024-03-02T02:52:21.678Z",
            "content_html": "<h1 id=\"http-和-https\"><a class=\"anchor\" href=\"#http-和-https\">#</a> HTTP 和 HTTPS</h1>\n<h3 id=\"http-的基本概念\"><a class=\"anchor\" href=\"#http-的基本概念\">#</a> HTTP 的基本概念</h3>\n<p>http: 是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端 <code>请求和应答的标准（TCP）</code> ，用于从 WWW 服务器传输超文本到本地浏览器的 <code>超文本传输协议</code> 。</p>\n<h3 id=\"http工作原理\"><a class=\"anchor\" href=\"#http工作原理\">#</a> HTTP 工作原理</h3>\n<p>HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。</p>\n<h3 id=\"http请求响应的步骤\"><a class=\"anchor\" href=\"#http请求响应的步骤\">#</a> HTTP 请求 / 响应的步骤</h3>\n<ul>\n<li>1. 客户端连接到 Web 服务器</li>\n<li>2. 发送 HTTP 请求</li>\n<li>3. 服务器接受请求并返回 HTTP 响应</li>\n<li>4. 释放 TCP 连接</li>\n<li>5. 客户端（浏览器）解析 HTML 内容</li>\n</ul>\n<blockquote>\n<p>记忆口诀：连接发送加响应，释放解析整过程。</p>\n</blockquote>\n<h3 id=\"http-的-5-种方法\"><a class=\"anchor\" href=\"#http-的-5-种方法\">#</a> HTTP 的 5 种方法</h3>\n<ul>\n<li>GET--- 获取资源</li>\n<li>POST--- 传输资源</li>\n<li>PUT--- 更新资源</li>\n<li>DELETE--- 删除资源</li>\n<li>HEAD--- 获取报文首部</li>\n</ul>\n<h3 id=\"get与post的区别\"><a class=\"anchor\" href=\"#get与post的区别\">#</a> GET 与 POST 的区别</h3>\n<p><strong>1. 浏览器回退表现不同</strong> GET 在浏览器回退时是无害的，而 POST 会再次提交请求<br />\n<strong> 2. 浏览器对请求地址的处理不同</strong> GET 请求地址会被浏览器主动缓存，而 POST 不会，除非手动设置<br />\n<strong> 3. 浏览器对响应的处理不同</strong> GET 请求参数会被完整的保留在浏览器历史记录里，而 POST 中的参数不会被保留<br />\n<strong> 4. 参数大小不同.</strong> GET 请求在 URL 中传送的参数是有长度的限制，而 POST 没有限制<br />\n<strong> 5. 安全性不同.</strong> GET 参数通过 URL 传递，会暴露，不安全；POST 放在 Request Body 中，相对更安全<br />\n<strong> 6. 针对数据操作的类型不同</strong>.GET 对数据进行查询，POST 主要对数据进行增删改！简单说，GET 是只读，POST 是写。</p>\n<h3 id=\"http报文的组成成分\"><a class=\"anchor\" href=\"#http报文的组成成分\">#</a> HTTP 报文的组成成分</h3>\n<p 状态行、响应头、空行、响应体=\"\">请求报文 {请求行、请求头、空行、请求体} 请求行：{http 方法、页面地址、http 协议、http 版本} 响应报文</p>\n<p><strong>Request Header:</strong></p>\n<ol>\n<li><strong>GET /sample.Jsp HTTP/1.1</strong>  // 请求行</li>\n<li><strong>Host:</strong>  www.uuid.online/// 请求的目标域名和端口号</li>\n<li><strong>Origin:</strong> <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxLw==\">http://localhost:8081/</span>  // 请求的来源域名和端口号 （跨域请求时，浏览器会自动带上这个头信息）</li>\n<li><strong>Referer:</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sb2NhbGhvc3Q6ODA4MS9saW5rP3F1ZXJ5PXh4eHh4\">https://localhost:8081/link?query=xxxxx</span> // 请求资源的完整 URI</li>\n<li><strong>User-Agent:</strong> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 // 浏览器信息</li>\n<li><strong>Cookie:</strong>  BAIDUID=FA89F036:FG=1; BD_HOME=1; sugstore=0  // 当前域名下的 Cookie</li>\n<li><strong>Accept:</strong> text/html,image/apng  // 代表客户端希望接受的数据类型是 html 或者是 png 图片类型</li>\n<li><strong>Accept-Encoding:</strong> gzip, deflate  // 代表客户端能支持 gzip 和 deflate 格式的压缩</li>\n<li><strong>Accept-Language:</strong> zh-CN,zh;q=0.9  // 代表客户端可以支持语言 zh-CN 或者 zh (值得一提的是 q (0~1) 是优先级权重的意思，不写默认为 1，这里 zh-CN 是 1，zh 是 0.9)</li>\n<li><strong>Connection:</strong> keep-alive  // 告诉服务器，客户端需要的 tcp 连接是一个长连接</li>\n</ol>\n<p><strong>Response Header:</strong></p>\n<ol>\n<li><strong>HTTP/1.1 200 OK</strong>  // 响应状态行</li>\n<li><strong>Date:</strong>  Mon, 30 Jul 2018 02:50:55 GMT  // 服务端发送资源时的服务器时间</li>\n<li><strong>Expires:</strong>  Wed, 31 Dec 1969 23:59:59 GMT // 比较过时的一种验证缓存的方式，与浏览器（客户端）的时间比较，超过这个时间就不用缓存（不和服务器进行验证），适合版本比较稳定的网页</li>\n<li><strong>Cache-Control:</strong>  no-cache  // 现在最多使用的控制缓存的方式，会和服务器进行缓存验证，具体见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYW1pZXpoYW5nL3AvOTM4OTUzNy5odG1s\">博文”Cache-Control“</span></li>\n<li><strong>etag:</strong>  &quot;fb8ba2f80b1d324bb997cbe188f28187-ssl-df&quot;  // 一般是<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50MDg2LmNvbS9hcnRpY2xlLzUyMDc=\"> Nginx 静态服务器</span>发来的静态文件签名，浏览在没有 “Disabled cache” 情况下，接收到 etag 后，同一个 url 第二次请求就会自动带上 “If-None-Match”</li>\n<li><strong>Last-Modified:</strong>  Fri, 27 Jul 2018 11:04:55 GMT // 是服务器发来的当前资源最后一次修改的时间，下次请求时，如果服务器上当前资源的修改时间大于这个时间，就返回新的资源内容</li>\n<li><strong>Content-Type:</strong>  text/html; charset=utf-8  // 如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是 utf8 编码，否则可能出现乱码</li>\n<li><strong>Content-Encoding:</strong>  gzip  // 告诉客户端，应该采用 gzip 对资源进行解码</li>\n<li><strong>Connection:</strong>  keep-alive  // 告诉客户端服务器的 tcp 连接也是一个长连接</li>\n</ol>\n<h3 id=\"https-的基本概念\"><a class=\"anchor\" href=\"#https-的基本概念\">#</a> https 的基本概念</h3>\n<p>https: 是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。</p>\n<p>https 协议的作用：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p>\n<h3 id=\"http-和-https-的区别\"><a class=\"anchor\" href=\"#http-和-https-的区别\">#</a> http 和 https 的区别？</h3>\n<ul>\n<li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。</li>\n<li>Https 协议需要 ca 证书，费用较高。</li>\n<li>使用不同的链接方式，端口也不同，一般，http 协议的端口为 80，https 的端口为 443。</li>\n<li>http 的连接很简单，是无状态的。</li>\n</ul>\n<blockquote>\n<p>记忆口诀：明文传输超文本，安全等级各不同。CA 证书费用高，无状连接端难同。</p>\n</blockquote>\n<h4 id=\"https-协议的工作原理\"><a class=\"anchor\" href=\"#https-协议的工作原理\">#</a> https 协议的工作原理</h4>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c42bc6f45451457fa6d614fb27534516~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：</p>\n<ol>\n<li>客户端使用 https url 访问服务器，则要求 web 服务器 <code>建立 ssl 链接</code> 。</li>\n<li>web 服务器接收到客户端的请求之后，会 <code>将网站的证书（证书中包含了公钥），传输给客户端</code> 。</li>\n<li>客户端和 web 服务器端开始 <code>协商 SSL 链接的安全等级</code> ，也就是加密等级。</li>\n<li>客户端浏览器通过双方协商一致的安全等级， <code>建立会话密钥</code> ，然后通过网站的公钥来加密会话密钥，并传送给网站。</li>\n<li>web 服务器 <code>通过自己的私钥解密出会话密钥</code> 。</li>\n<li>web 服务器 <code>通过会话密钥加密与客户端之间的通信</code> 。</li>\n</ol>\n<blockquote>\n<p>记忆口诀：一连二传三协商，四建五得六使用。</p>\n</blockquote>\n<h4 id=\"https-协议的优缺点\"><a class=\"anchor\" href=\"#https-协议的优缺点\">#</a> https 协议的优缺点</h4>\n<ul>\n<li>HTTPS 协议要比 http 协议 <code>安全</code> ，可防止数据在传输过程中被窃取、改变，确保数据的完整性。</li>\n<li>https 握手阶段比较 <code>费时</code> ，会使页面加载时间延长 50%，增加 10%~20% 的耗电。</li>\n<li>https  <code>缓存</code> 不如 http 高效，会增加数据开销。</li>\n<li>SSL 证书也需要钱，功能越强大的 <code>证书费</code> 用越高。</li>\n<li>SSL 证书需要绑定  <code>IP</code> ，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。</li>\n</ul>\n<h3 id=\"tcpip网络模型\"><a class=\"anchor\" href=\"#tcpip网络模型\">#</a> TCP/IP 网络模型</h3>\n<p>TCP/IP 模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p>\n<ul>\n<li>链路层：负责封装和解封装 IP 报文，发送和接受 ARP/RARP 报文等。</li>\n<li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li>\n<li>传输层：负责对报文进行分组和重组，并以 TCP 或 UDP 协议格式封装报文。</li>\n<li>应用层：负责向用户提供应用程序，比如 HTTP、FTP、Telnet、DNS、SMTP 等。</li>\n</ul>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa80b3b48a84bd18d8e708c56a1dc22~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<h3 id=\"tcp三次握手\"><a class=\"anchor\" href=\"#tcp三次握手\">#</a> TCP 三次握手</h3>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baf3d5df95a74f47a1d779ee50c3411f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<ol>\n<li>第一次握手： <code>建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认</code> ；SYN：同步序列编号（Synchronize Sequence Numbers）。</li>\n<li>第二次握手： <code>服务器收到syn包并确认客户的SYN</code> （ack=j+1）， <code>同时也发送一个自己的SYN包</code> （syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</li>\n<li>第三次握手： <code>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）</code> ，此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP 连接成功）状态，完成三次握手。</li>\n</ol>\n<pre><code>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。\n</code></pre>\n<h3 id=\"tcp-四次挥手\"><a class=\"anchor\" href=\"#tcp-四次挥手\">#</a> TCP 四次挥手</h3>\n<ol>\n<li><code>客户端进程发出连接释放报文</code> ，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为 seq=u（等于前面已经传送过来的数据的最后一个字节的序号加 1），此时，客户端进入 FIN-WAIT-1（终止等待 1）状态。 TCP 规定，FIN 报文段即使不携带数据，也要消耗一个序号。</li>\n</ol>\n<p>2） <code>服务器收到连接释放报文，发出确认报文</code> ，ACK=1，ack=u+1，并且带上自己的序列号 seq=v，此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。TCP 服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。</p>\n<p>3）客户端收到服务器的确认请求后，此时，客户端就进入 FIN-WAIT-2（终止等待 2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。</p>\n<p>4） <code>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文</code> ，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq=w，此时，服务器就进入了 LAST-ACK（最后确认）状态，等待客户端的确认。</p>\n<p>5） <code>客户端收到服务器的连接释放报文后，必须发出确认</code> ，ACK=1，ack=w+1，而自己的序列号是 seq=u+1，此时，客户端就进入了 TIME-WAIT（时间等待）状态。注意此时 TCP 连接还没有释放，必须经过 2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态。</p>\n<p>6）服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。可以看到，服务器结束 TCP 连接的时间要比客户端早一些。</p>\n<h3 id=\"tcp和udp的区别\"><a class=\"anchor\" href=\"#tcp和udp的区别\">#</a> TCP 和 UDP 的区别</h3>\n<ol>\n<li>\n<p>TCP 是面向 <code>连接</code> 的，而 UDP 是面向无连接的。</p>\n</li>\n<li>\n<p>TCP 仅支持 <code>单播传输</code> ，UDP 提供了单播，多播，广播的功能。</p>\n</li>\n<li>\n<p>TCP 的三次握手保证了连接的 <code>可靠性</code> ；UDP 是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</p>\n</li>\n<li>\n<p>UDP 的 <code>头部开销</code> 比 TCP 的更小，数据 <code>传输速率更高</code> ， <code>实时性更好</code> 。</p>\n</li>\n</ol>\n<h3 id=\"http-请求跨域问题\"><a class=\"anchor\" href=\"#http-请求跨域问题\">#</a> HTTP 请求跨域问题</h3>\n<ol>\n<li>\n<p>跨域的原理</p>\n<p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的 <code>同源策略</code> 造成的。<br />\n<strong>同源策略</strong>，是浏览器对 JavaScript 实施的安全限制，只要 <code>协议、域名、端口</code> 有任何一个不同，都被当作是不同的域。<br />\n<strong>跨域原理</strong>，即是通过各种方式， <code>避开浏览器的安全限制</code> 。</p>\n</li>\n<li>\n<p>解决方案</p>\n<p>最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()</p>\n<ul>\n<li>\n<p><strong>JSONP</strong>：<br />\najax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p>\n<p>步骤：</p>\n<ol>\n<li>去创建一个 script 标签</li>\n<li>script 的 src 属性设置接口地址</li>\n<li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li>\n<li>通过定义函数名去接受返回的数据</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 动态创建 script</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设置 script 的 src 属性，并设置请求地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3000/?callback=getData'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 让 script 生效</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>JSONP 的缺点</strong>:<br />\nJSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p>\n</li>\n<li>\n<p><strong>document.domain</strong>  基础域名相同 子域名不同</p>\n</li>\n<li>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></strong> 利用在一个浏览器窗口内，载入所有的域名都是共享一个 <span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></p>\n</li>\n<li>\n<p><strong>CORS</strong> CORS (Cross-origin resource sharing) 跨域资源共享 服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求</p>\n</li>\n<li>\n<p><strong>proxy 代理</strong> 目前常用方式</p>\n</li>\n<li>\n<p><strong>window.postMessage()</strong>  利用 h5 新特性 window.postMessage ()</p>\n</li>\n<li>\n<p><strong>Websocket</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"cookie-sessionstorage-localstorage-的区别\"><a class=\"anchor\" href=\"#cookie-sessionstorage-localstorage-的区别\">#</a> Cookie、sessionStorage、localStorage 的区别</h3>\n<p><strong>相同点</strong>：</p>\n<ul>\n<li>存储在客户端</li>\n</ul>\n<p><strong>不同点</strong>：</p>\n<ul>\n<li>cookie 数据大小不能超过 4k；sessionStorage 和 localStorage 的存储比 cookie 大得多，可以达到 5M+</li>\n<li>cookie 设置的过期时间之前一直有效；localStorage 永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage 数据在当前浏览器窗口关闭后自动删除</li>\n<li>cookie 的数据会自动的传递到服务器；sessionStorage 和 localStorage 数据保存在本地</li>\n</ul>\n<h3 id=\"http状态码及常见状态码\"><a class=\"anchor\" href=\"#http状态码及常见状态码\">#</a> HTTP 状态码及常见状态码</h3>\n<h4 id=\"http状态码\"><a class=\"anchor\" href=\"#http状态码\">#</a> HTTP 状态码</h4>\n<ul>\n<li>1xx：指示信息类，表示请求已接受，继续处理</li>\n<li>2xx：指示成功类，表示请求已成功接受</li>\n<li>3xx：指示重定向，表示要完成请求必须进行更近一步的操作</li>\n<li>4xx：指示客户端错误，请求有语法错误或请求无法实现</li>\n<li>5xx：指示服务器错误，服务器未能实现合法的请求</li>\n</ul>\n<h4 id=\"常见状态码\"><a class=\"anchor\" href=\"#常见状态码\">#</a> 常见状态码</h4>\n<ul>\n<li>\n<p>200 OK：客户端请求成功</p>\n</li>\n<li>\n<p>301 Moved Permanently：所请求的页面已经永久重定向至新的 URL</p>\n</li>\n<li>\n<p>302 Found：所请求的页面已经临时重定向至新的 URL</p>\n</li>\n<li>\n<p>304 Not Modified 未修改。</p>\n</li>\n<li>\n<p>403 Forbidden：对请求页面的访问被禁止</p>\n</li>\n<li>\n<p>404 Not Found：请求资源不存在</p>\n</li>\n<li>\n<p>500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用</p>\n</li>\n<li>\n<p>503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常</p>\n</li>\n<li>\n<p>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码</p>\n<ul>\n<li>100 - 继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</li>\n<li>101 - 切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换</li>\n</ul>\n</li>\n<li>\n<p>2xx（成功）表示成功处理了请求的状态码</p>\n<ul>\n<li><code>200</code>  - 成功 服务器已经成功处理了请求。通常，这表示服务器提供了请求的网页</li>\n<li>201 - 已创建 请求成功并且服务器创建了新的资源</li>\n<li>202 - 已接受 服务器已接受请求，但尚未处理</li>\n<li>203 - 非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源</li>\n<li>204 - 无内容 服务器成功处理了请求，但没有返回任何内容</li>\n<li>205 - 重置内容 服务器成功处理了请求，但没有返回任何内容</li>\n</ul>\n</li>\n<li>\n<p>3xx（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向</p>\n<ul>\n<li>300 - 多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择</li>\n<li><code>301</code>  - 永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</li>\n<li><code>302</code>  - 临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li>\n<li>303 - 查看其它位置 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li>\n<li><code>304</code>  - 未修改 自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</li>\n<li>305 - 使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</li>\n<li><code>307</code>  - 临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</li>\n</ul>\n</li>\n<li>\n<p>4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理</p>\n<ul>\n<li><code>400</code>  - 错误请求 服务器不理解请求的语法</li>\n<li><code>401</code>  - 未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</li>\n<li><code>403</code>  - 禁止 服务器拒绝请求</li>\n<li><code>404</code>  - 未找到 服务器找不到请求的网页</li>\n<li>405 - 方法禁用 禁用请求中指定的方法</li>\n<li>406 - 不接受 无法使用请求的内容特性响应请求的网页</li>\n<li><code>407</code>  - 需要代理授权 此状态码与 401（未授权）类似，但指定请求者应当授权使用代理</li>\n<li><code>408</code>  - 请求超时 服务器等候请求时发生超时</li>\n<li>410 - 已删除 如果请求的资源已永久删除，服务器就会返回此响应</li>\n<li><code>413</code>  - 请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</li>\n<li><code>414</code>  - 请求的 URI 过长 请求的 URI（通常为网址）过长，服务器无法处理</li>\n</ul>\n</li>\n<li>\n<p>5xx（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</p>\n<ul>\n<li><code>500</code>  - 服务器内部错误 服务器遇到错误，无法完成请求</li>\n<li>501 - 尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</li>\n<li><code>502</code>  - 错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应</li>\n<li><code>503</code>  - 服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</li>\n<li><code>504</code>  - 网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求</li>\n<li>505 - HTTP 版本不受支持 服务器不支持请求中所用的 HTTP 协议版本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"介绍下304过程\"><a class=\"anchor\" href=\"#介绍下304过程\">#</a> 介绍下 304 过程</h3>\n<ul>\n<li>\n<p>a. 浏览器请求资源时首先命中资源的 Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过 Cache-control: max-age 指定最大生命周期，状态仍然返回 200，但不会请求数据，在浏览器中能明显看到 from cache 字样。</p>\n</li>\n<li>\n<p>b. 强缓存失效，进入协商缓存阶段，首先验证 ETagETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据客户端上送的 If-None-Match 值来判断是否命中缓存。</p>\n</li>\n<li>\n<p>c. 协商缓存 Last-Modify/If-Modify-Since 阶段，客户端第一次请求资源时，服务服返回的 header 中会加上 Last-Modify，Last-modify 是一个时间标识该资源的最后修改时间。再次请求该资源时，request 的请求头中会包含 If-Modify-Since，该值为缓存之前返回的 Last-Modify。服务器收到 If-Modify-Since 后，根据资源的最后修改时间判断是否命中缓存。</p>\n</li>\n</ul>\n<h3 id=\"浏览器的缓存机制-强制缓存-协商缓存\"><a class=\"anchor\" href=\"#浏览器的缓存机制-强制缓存-协商缓存\">#</a> 浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3>\n<p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起 HTTP 请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中 HTTP 头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05b3fe9c411f4881a8b22fe37eae170b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"图片\" /></p>\n<p>由上图我们可以知道：</p>\n<ul>\n<li>浏览器每次发起请求，都会 <code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li>\n<li>浏览器每次拿到返回的请求结果都会 <code>将该结果和缓存标识存入浏览器缓存中</code></li>\n</ul>\n<p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起 HTTP 请求将缓存过程分为两个部分，分别是 <code>强制缓存</code> 和 <code>协商缓存</code> 。</p>\n<ul>\n<li>\n<p><strong>强制缓存</strong></p>\n<p><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code> 当浏览器向服务器发起请求时，服务器会将缓存规则放入 HTTP 响应报文的 HTTP 头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是  <code>Expires</code>  和  <code>Cache-Control</code> ，其中 Cache-Control 优先级比 Expires 高。</p>\n<p>强制缓存的情况主要有三种 (暂不分析协商缓存过程)，如下：</p>\n<ol>\n<li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li>\n<li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li>\n<li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li>\n</ol>\n</li>\n<li>\n<p><strong>协商缓存</strong></p>\n<p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code> ，同样，协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有： <code>Last-Modified / If-Modified-Since</code>  和  <code>Etag / If-None-Match</code> ，其中 Etag / If-None-Match 的优先级比 Last-Modified / If-Modified-Since 高。协商缓存主要有以下两种情况：</p>\n<ol>\n<li>协商缓存生效，返回 304</li>\n<li>协商缓存失效，返回 200 和请求结果结果</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0ce991db4847b98d9f049f9ffa5c93~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" /></p>\n<p>传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTkyODQzMTE3OTYzNTA5Nzkx\"># 彻底理解浏览器的缓存机制</span></p>\n<h3 id=\"http-请求跨域问题-2\"><a class=\"anchor\" href=\"#http-请求跨域问题-2\">#</a> HTTP 请求跨域问题</h3>\n<ol>\n<li>\n<p>跨域的原理</p>\n<p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的 <code>同源策略</code> 造成的。跨域访问是被各大浏览器所默认禁止的。<br />\n<strong>同源策略</strong>，是浏览器对 JavaScript 实施的安全限制，只要 <code>协议、域名、端口</code> 有任何一个不同，都被当作是不同的域。<br />\n<strong>跨域原理</strong>，即是通过各种方式， <code>避开浏览器的安全限制</code> 。</p>\n</li>\n<li>\n<p>解决方案</p>\n<p>最初做项目的时候，使用的是 jsonp，但存在一些问题，使用 get 请求不安全，携带数据较小，后来也用过 iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和 proxy 代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用 proxy，在服务器上使用 nginx 代理，这样开发过程中彼此都方便，效率也高；现在 h5 新特性还有 windows.postMessage ()</p>\n<ul>\n<li>\n<p><strong>JSONP</strong>：<br />\najax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p>\n<p>步骤：</p>\n<ol>\n<li>去创建一个 script 标签</li>\n<li>script 的 src 属性设置接口地址</li>\n<li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li>\n<li>通过定义函数名去接受返回的数据</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 动态创建 script</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设置 script 的 src 属性，并设置请求地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3000/?callback=getData'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 让 script 生效</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>JSONP 的缺点</strong>:<br />\nJSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p>\n</li>\n<li>\n<p><strong>document.domain</strong> 基础域名相同 子域名不同</p>\n</li>\n<li>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></strong> 利用在一个浏览器窗口内，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13aW5kb3ctOW03aWdsMjNibzhwMWQ4MTZhaW1uMW05YXdsbXVqZDV5OWd6NjdldzdmLm5hbWU=\">载入所有的域名都是共享一个 window.name</span></p>\n</li>\n<li>\n<p><strong>CORS</strong><br />\nCORS (Cross-origin resource sharing) 跨域资源共享 是一种机制，是目前主流的跨域解决方案，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。服务器设置对 CORS 的支持原理：服务器设置 Access-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求</p>\n<p>1. 浏览器端会自动向请求头添加 origin 字段，表明当前请求来源。<br />\n2. 服务器设置 Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers 等 HTTP 响应头字段之后，浏览器将会允许跨域请求。</p>\n<p><strong>预检</strong></p>\n<p>但是还有复杂一点的请求，我们需要先发 OPTIONS 请求，a.com 想请求 b.com 它需要发一个自定义的 Headers：X-ABC 和 content-type，这个时候就不是简单请求了， <span class=\"exturl\" data-url=\"aHR0cDovL2EueG4tLWNvbWItMjk1azQxNGMuY29t\">a.com 要给 b.com</span> 发一个 options 请求，它其实在问 b.com 我用 post 行不行，还想在 Headers 中带 X-ABC 和 content-type；并不是所有的 headers 都发这个 OPTIONS 请求，因为 X-ABC 是自定义的，所以需要发；b.com 看到 OPTIONS 请求，先不会返回数据，先检查自己的策略，看看能不能支持这次请求，如果支持就返回 200。</p>\n<p>OPTIONS 请求返回以下报文</p>\n<p>HTTP/2.0 20 OK<br />\nAccess-Control-Allow-Origin:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hLmNvbQ==\">https://a.com</span><br />\nAccess-Control-Allow-Methods:POST,GET,OPTIONS<br />\nAccess-Control-Allow-Headers:X-ABC,Content-Type<br />\nAccess-Control-Max-Age:86400 // 告诉浏览器这个策略生效时间为一个小时，在一个小时之内发送类似的请求，不用在问服务端了，相当于缓存了<br />\n浏览器收到了 OPTIONS 的返回，会在发一次，这一次才是真正的请求数据，这次 headers 会带上 X-ABC、contentType。</p>\n<p>整体的过程 cors 将请求分为 2 种，简单请求和复杂请求，需不需要发送 OPTIONS 浏览器说的算，浏览器判断是简单请求还是复杂请求，cors 是非常广泛的跨域手段 这里的缺点是 OPTIONS 请求也是一次请求，消耗带宽，真正的请求也会延迟。</p>\n</li>\n<li>\n<p>最方便的跨域方案 <strong>proxy 代理 + Nginx</strong><br />\nnginx 是一款极其强大的 web 服务器，其优点就是轻量级、启动快、高并发。</p>\n<p>跨域问题的产生是因为浏览器的同源政策造成的，但是服务器与服务器之间的数据交换是没有这个限制。</p>\n<p>反向代理就是采用这种方式，建立一个虚拟的代理服务器来接收 internet 上的链接请求，然后转发给内部网络上的服务器，并将从服务器上得到的结果，返回给 internet 上请求链接的客户端。现在的新项目中 nginx 几乎是首选，我们用 node 或者 java 开发的服务通常都需要经过 nginx 的反向代理。</p>\n</li>\n<li>\n<p><strong>window.postMessage()</strong> 利用 h5 新特性 window.postMessage ()</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>跨域传送门 ☞ <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDAzMjMyNzY5MTgyNTQ3OTk4\"># 跨域，不可不知的基础概念</span></p>\n<h3 id=\"观看记录\"><a class=\"anchor\" href=\"#观看记录\">#</a> ！！！！！！观看记录！！！！！！！！</h3>\n<h3 id=\"粘包问题分析与对策\"><a class=\"anchor\" href=\"#粘包问题分析与对策\">#</a> 粘包问题分析与对策</h3>\n<p>TCP 粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p>\n<p><strong>粘包出现原因</strong></p>\n<p>简单得说，在流传输中出现，UDP 不会出现粘包，因为它有<strong>消息边界</strong></p>\n<p>粘包情况有两种，一种是 <code>粘在一起的包都是完整的数据包</code> ，另一种情况是 <code>粘在一起的包有不完整的包</code> 。</p>\n<p>为了<strong>避免粘包</strong>现象，可采取以下几种措施：</p>\n<p>（1）对于发送方引起的粘包现象，用户可通过编程设置来避免， <code>TCP提供了强制数据立即传送的操作指令push</code> ，TCP 软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；</p>\n<p>（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、 <code>提高接收进程优先级等措施</code> ，使其及时接收数据，从而尽量避免出现粘包现象；</p>\n<p>（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。 <code>分包多发</code> 。</p>\n<p>以上提到的三种措施，都有其不足之处。</p>\n<p>（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。</p>\n<p>（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。</p>\n<p>（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。</p>\n<blockquote>\n<p>一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。</p>\n</blockquote>\n<h3 id=\"客户端与服务端长连接的几种方式\"><a class=\"anchor\" href=\"#客户端与服务端长连接的几种方式\">#</a> 客户端与服务端长连接的几种方式</h3>\n<ol>\n<li>\n<p><strong>ajax 轮询</strong><br />\n<strong>实现原理</strong>：ajax 轮询指客户端每间隔一段时间向服务端发起请求，保持数据的同步。</p>\n<p><strong>优点</strong>：可实现基础（指间隔时间较短）的数据更新。</p>\n<p><strong>缺点</strong>：这种方法也只是尽量的模拟即时传输，但并非真正意义上的即时通讯，很有可能出现客户端请求时，服务端数据并未更新。或者服务端数据已更新，但客户端未发起请求。导致多次请求资源浪费，效率低下。【 <code>数据更新不及时，效率低下</code> 】</p>\n</li>\n<li>\n<p><strong>long poll 长轮询</strong></p>\n<p><strong>实现原理</strong>：<br />\nlong poll 指的是客户端发送请求之后，如果没有数据返回，服务端会将请求挂起放入队列（不断开连接）处理其他请求，直到有数据返回给客户端。然后客户端再次发起请求，以此轮询。在 HTTP1.0 中客户端可以设置请求头 Connection:keep-alive，服务端收到该请求头之后知道这是一个长连接，在响应报文头中也添加 Connection:keep-alive。客户端收到之后表示长连接建立完成，可以继续发送其他的请求。在 HTTP1.1 中默认使用了 Connection:keep-alive 长连接。</p>\n<p><strong>优点</strong>：减少客户端的请求，降低无效的网络传输，保证每次请求都有数据返回，不会一直占用线程。</p>\n<p><strong>缺点</strong>：无法处理高并发，当客户端请求量大，请求频繁时对服务器的处理能力要求较高。服务器一直保持连接会消耗资源，需要同时维护多个线程，服务器所能承载的 TCP 连接数是有上限的，这种轮询很容易把连接数顶满。每次通讯都需要客户端发起，服务端不能主动推送。【 <code>无法处理高并发，消耗服务器资源严重，服务端不能主动推送</code> 】</p>\n</li>\n<li>\n<p><strong>iframe 长连接</strong></p>\n<p><strong>实现原理：</strong><br />\n在网页上嵌入一个 iframe 标签，该标签的 src 属性指向一个长连接请求。这样服务端就可以源源不断地给客户端传输信息。保障信息实时更新。</p>\n<p><strong>优点</strong>：消息及时传输。</p>\n<p><strong>缺点</strong>： <code>消耗服务器资源</code> 。</p>\n</li>\n<li>\n<p><strong>WebSocket</strong></p>\n<p><strong>实现原理</strong>：<br />\nWebsocket 实现了客户端与服务端的双向通信，只需要连接一次，就可以相互传输数据，很适合实时通讯、数据实时更新等场景。</p>\n<p>Websocket 协议与 HTTP 协议没有关系，它是一个建立在 TCP 协议上的全新协议，为了兼容 HTTP 握手规范，在握手阶段依然使用 HTTP 协议，握手完成之后，数据通过 TCP 通道进行传输。</p>\n<p>Websoket 数据传输是通过 frame 形式，一个消息可以分成几个片段传输。这样大数据可以分成一些小片段进行传输，不用考虑由于数据量大导致标志位不够的情况。也可以边生成数据边传递消息，提高传输效率。</p>\n<p><strong>优点</strong>：<br />\n双向通信。客户端和服务端双方都可以主动发起通讯。<br />\n没有同源限制。客户端可以与任意服务端通信，不存在跨域问题。<br />\n数据量轻。第一次连接时需要携带请求头，后面数据通信都不需要带请求头，减少了请求头的负荷。<br />\n传输效率高。因为只需要一次连接，所以数据传输效率高。</p>\n<p><strong>缺点</strong>：<br />\n长连接需要后端处理业务的代码更稳定，推送消息相对复杂；<br />\n长连接受网络限制比较大，需要处理好重连。<br />\n兼容性，WebSocket 只支持 IE10 及其以上版本。<br />\n服务器长期维护长连接需要一定的成本，各个浏览器支持程度不一；<br />\n成熟的 HTTP 生态下有大量的组件可以复用，WebSocket 则没有，遇到异常问题难以快速定位快速解决。【需要后端代码稳定，受网络限制大，兼容性差，维护成本高，生态圈小】</p>\n</li>\n</ol>\n<h3 id=\"利用socket建立网络连接的步骤\"><a class=\"anchor\" href=\"#利用socket建立网络连接的步骤\">#</a> 利用 Socket 建立网络连接的步骤</h3>\n<p>建立 Socket 连接至少需要一对套接字，其中一个运行于客户端，称为 ClientSocket ，另一个运行于服务器端，称为 ServerSocket 。</p>\n<p>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p>\n<p>1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p>\n<p>2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。</p>\n<p>为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p>\n<p>3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。</p>\n<p>而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>\n<h3 id=\"非对称加密rsa\"><a class=\"anchor\" href=\"#非对称加密rsa\">#</a> 非对称加密 RSA</h3>\n<p>简介：</p>\n<ol>\n<li>对称加密算法又称现代加密算法。</li>\n<li>非对称加密是计算机通信安全的基石，保证了加密数据不会被破解。</li>\n<li>非对称加密算法需要两个密钥：公开密钥 (publickey) 和私有密 (privatekey)</li>\n<li>公开密钥和私有密钥是一对</li>\n</ol>\n<p>如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。 <br />\n如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。</p>\n<p>特点： <br />\n算法强度复杂，安全性依赖于算法与密钥。 <br />\n加密解密速度慢。</p>\n<p>与对称加密算法的对比： <br />\n对称加密只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。 <br />\n非对称加密有两种密钥，其中一个是公开的。</p>\n<p>RSA 应用场景： <br />\n由于 RSA 算法的加密解密速度要比对称算法速度慢很多，在实际应用中，通常采取 <br />\n数据本身的加密和解密使用对称加密算法 (AES)。 用 RSA 算法加密并传输对称算法所需的密钥。</p>\n<h3 id=\"http1-http2-http3\"><a class=\"anchor\" href=\"#http1-http2-http3\">#</a> HTTP1、HTTP2、HTTP3</h3>\n<p>HTTP/2 相比于 HTTP/1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，虽如此但 HTTP/2 并非完美的，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。</p>\n<h3 id=\"http11-的缺陷\"><a class=\"anchor\" href=\"#http11-的缺陷\">#</a> <strong>HTTP1.1 的缺陷</strong></h3>\n<ol>\n<li>\n<p>高延迟 — 队头阻塞 (Head-Of-Line Blocking)</p>\n<p><code>队头阻塞</code> 是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。</p>\n<p>针对队头阻塞的解决办法:</p>\n<ul>\n<li><code>将同一页面的资源分散到不同域名下，提升连接上限</code> 。</li>\n<li><code>合并小文件减少资源数</code> ，使用精灵图。</li>\n<li><code>内联(Inlining)资源</code> 是另外一种防止发送很多小图请求的技巧，将图片的原始数据嵌入在 CSS 文件里面的 URL 里，减少网络请求次数。</li>\n<li><code>减少请求数量</code> ，合并文件。</li>\n</ul>\n</li>\n<li>\n<p>无状态特性 — 阻碍交互</p>\n<p><code>无状态是指协议对于连接状态没有记忆能力</code> 。纯净的 HTTP 是没有 cookie 等机制的，每一个连接都是一个新的连接。</p>\n<p><code>Header里携带的内容过大，在一定程度上增加了传输的成本</code> 。且请求响应报文里有大量字段值都是重复的。</p>\n</li>\n<li>\n<p>明文传输 — 不安全性</p>\n<p>HTTP/1.1 在传输数据时，所有 <code>传输的内容都是明文</code> ，客户端和服务器端都无法验证对方的身份，无法保证数据的安全性。</p>\n</li>\n<li>\n<p>不支持服务端推送</p>\n</li>\n</ol>\n<blockquote>\n<p>记忆口诀：队头阻塞高延迟，无状态阻交互，明文传输不安全，服务推送不支持。</p>\n</blockquote>\n<p><strong>HTTP 1.1 排队问题</strong></p>\n<p>HTTP 1.1 多个文件共用一个 TCP，这样可以减少 tcp 握手，这样 3 个文件就不用握手 9 次了，不过这样请求文件需要排队，请求和返回都需要排队， 如果第一个文件响应慢，会阻塞后面的文件，这样就产生了对头的等待问题。</p>\n<p>有的网站可能会有很多文件，浏览器处于对机器性能的考虑，它不可能让你无限制的发请求建连接，因为建立连接需要占用资源，浏览器不想把用户的网络资源都占用了，所以浏览器最多会建立 6 个 tcp 连接；如果有上百个文件可能都需要排队，http2.0 正在解决这个问题。</p>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ecdc60670194df7957ee59e1f56701f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<h3 id=\"spdy-协议与-http2-简介\"><a class=\"anchor\" href=\"#spdy-协议与-http2-简介\">#</a> SPDY 协议与 HTTP/2 简介</h3>\n<h4 id=\"1-http2-简介\"><a class=\"anchor\" href=\"#1-http2-简介\">#</a> 1、HTTP/2 简介</h4>\n<p>HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写。<strong>HTTP/2 基于 SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）</strong> 。</p>\n<h4 id=\"2-http2-新特性\"><a class=\"anchor\" href=\"#2-http2-新特性\">#</a> 2、HTTP/2 新特性</h4>\n<h4 id=\"1-二进制传输\"><a class=\"anchor\" href=\"#1-二进制传输\">#</a> 1、二进制传输</h4>\n<p><code>HTTP/2传输数据量的大幅减少,主要有两个原因:以二进制方式传输和Header 压缩</code> 。我们先来介绍二进制传输，HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。 <code>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码</code> 。</p>\n<h4 id=\"2-header-压缩\"><a class=\"anchor\" href=\"#2-header-压缩\">#</a> 2、Header 压缩</h4>\n<p>HTTP/2 并没有使用传统的压缩算法，而是开发了专门的 &quot;HPACK” 算法，在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。</p>\n<h4 id=\"3-多路复用\"><a class=\"anchor\" href=\"#3-多路复用\">#</a> 3、多路复用</h4>\n<p>在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输。</p>\n<p><img data-src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f756ad3403bc4fe18e970c56677c796e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<h4 id=\"4-server-push\"><a class=\"anchor\" href=\"#4-server-push\">#</a> 4、Server Push</h4>\n<p>HTTP2 还在一定程度上改变了传统的 “请求 - 应答” 工作模式，服务器不再是完全被动地响应请求，也可以新建 “流” 主动向客户端发送消息。减少等待的延迟，这被称为 &quot; <code>服务器推送</code>  &quot;（ Server Push，也叫 Cache push）</p>\n<h4 id=\"5-提高安全性\"><a class=\"anchor\" href=\"#5-提高安全性\">#</a> 5、提高安全性</h4>\n<p>出于兼容的考虑，HTTP/2 延续了 HTTP/1 的 “明文” 特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密。</p>\n<p>但由于 HTTPS 已经是大势所趋，而且主流的浏览器 Chrome、Firefox 等都公开宣布只支持加密的 HTTP/2，<strong>所以 “事实上” 的 HTTP/2 是加密的</strong>。也就是说，互联网上通常所能见到的 HTTP/2 都是使用 &quot;https” 协议名，跑在 TLS 上面。HTTP/2 协议定义了两个字符串标识符：“h2&quot; 表示加密的 HTTP/2，“h2c” 表示明文的 HTTP/2。</p>\n<h4 id=\"6-防止对头阻塞\"><a class=\"anchor\" href=\"#6-防止对头阻塞\">#</a> 6、防止对头阻塞</h4>\n<p>http1.1 如果第一个文件阻塞，第二个文件也就阻塞了。</p>\n<p><img data-src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b67bd1f793a3425d9e8a415cae9b7863~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>http2.0 的解决，把 3 个请求打包成一个小块发送过去，即使第一个阻塞了，后面 2 个也可以回来；相当于 3 个文件同时请求，就看谁先回来谁后回来，阻塞的可能就后回来，对带宽的利用是最高的；但没有解决 TCP 的对头阻塞，如果 TCP 发过去的一个分包发丢了，他会重新发一次；http2.0 的解决了大文件的阻塞。</p>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77d8ae8e0de44f3aa693f0626a346d4c~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" /></p>\n<p>一个分包请求 3 个文件，即使第一个阻塞了，第二个也能返回</p>\n<h3 id=\"http2-的缺点\"><a class=\"anchor\" href=\"#http2-的缺点\">#</a> HTTP/2 的缺点</h3>\n<p>虽然 HTTP/2 解决了很多之前旧版本的问题，但它还是存在一个巨大的问题，<strong>主要是底层支撑的 TCP 协议造成的</strong>。HTTP/2 的缺点主要有以下几点：</p>\n<ol>\n<li>TCP 以及 TCP+TLS 建立连接时延时</li>\n<li>TCP 的队头阻塞并没有彻底解决</li>\n<li>多路复用导致服务器压力上升也容易 Timeout</li>\n</ol>\n<h3 id=\"http3-新特性\"><a class=\"anchor\" href=\"#http3-新特性\">#</a> HTTP/3 新特性</h3>\n<h4 id=\"1-http3简介\"><a class=\"anchor\" href=\"#1-http3简介\">#</a> 1、HTTP/3 简介</h4>\n<p>Google 在推 SPDY 的时候就搞了个基于 UDP 协议的 “QUIC” 协议，让 HTTP 跑在 QUIC 上而不是 TCP 上。而 “HTTP over QUIC” 就是 HTTP/3，真正 “完美” 地解决了 “队头阻塞” 问题。</p>\n<p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。</p>\n<h4 id=\"2-quic新功能\"><a class=\"anchor\" href=\"#2-quic新功能\">#</a> 2、QUIC 新功能</h4>\n<p>QUIC 基于 UDP，而 UDP 是 “无连接” 的，根本就不需要 “握手” 和 “挥手”，所以就比 TCP 来得快。此外 QUIC 也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似 HTTP/2 的 “流” 和 “多路复用”，单个 “流 &quot; 是有序的，可能会因为丢包而阻塞，但其他 “流” 不会受到影响。具体来说 QUIC 协议有以下特点：</p>\n<ul>\n<li>\n<p><strong>实现了类似 TCP 的流量控制、传输可靠性的功能</strong></p>\n<p>虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。</p>\n</li>\n<li>\n<p><strong>实现了快速握手功能</strong></p>\n<p>由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。<strong>0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势</strong>。</p>\n</li>\n<li>\n<p><strong>集成了 TLS 加密功能</strong></p>\n</li>\n<li>\n<p><strong>多路复用，彻底解决 TCP 中队头阻塞的问题</strong></p>\n<p>和 TCP 不同，QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流。实现了数据流的单独传输，就解决了 TCP 中队头阻塞的问题。</p>\n</li>\n<li>\n<p><strong>连接迁移</strong></p>\n<p>TCP 是按照 4 要素（客户端 IP、端口，服务器 IP、端口）确定一个连接的。而 QUIC 则是让客户端生成一个 Connection ID （64 位）来区别不同连接。只要 Connection ID 不变，连接就不需要重新建立，即便是客户端的网络发生变化。由于迁移客户端继续使用相同的会话密钥来加密和解密数据包，QUIC 还提供了迁移客户端的自动加密验证。</p>\n</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>HTTP/1.1 有两个主要的缺点：安全不足和性能不高。</li>\n<li>HTTP/2 完全兼容 HTTP/1，是 “更安全的 HTTP、更快的 HTTPS&quot;，二进制传输、头部压缩、多路复用、服务器推送等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；</li>\n<li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</li>\n</ul>\n<h3 id=\"理解xsscsrfddos攻击原理以及避免方式\"><a class=\"anchor\" href=\"#理解xsscsrfddos攻击原理以及避免方式\">#</a> 理解 xss，csrf，ddos 攻击原理以及避免方式</h3>\n<p><code>XSS</code> ( <code>Cross-Site Scripting</code> ，<strong>跨站脚本攻击</strong>) 是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取  <code>cookie，session tokens</code> ，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。</p>\n<p><code>CSRF</code> （ <code>Cross-site request forgery</code> ）<strong>跨站请求伪造</strong>：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p>\n<p><strong>XSS 避免方式：</strong></p>\n<ol>\n<li><code>url</code>  参数使用 <code>encodeURIComponent</code>  方法转义</li>\n<li>尽量不是有 <code>InnerHtml</code>  插入 <code>HTML</code>  内容</li>\n<li>使用特殊符号、标签转义符。</li>\n</ol>\n<p><code>CSRF</code>  避免方式：</p>\n<ol>\n<li>\n<p>添加验证码</p>\n</li>\n<li>\n<p>使用 token</p>\n<ul>\n<li>服务端给用户生成一个 token，加密后传递给用户</li>\n<li>用户在提交请求时，需要携带这个 token</li>\n<li>服务端验证 token 是否正确</li>\n</ul>\n</li>\n</ol>\n<p><code>DDoS</code>  又叫分布式拒绝服务，全称  <code>Distributed Denial of Service</code> ，其原理就是利用大量的请求造成资源过载，导致服务不可用。</p>\n<p><strong> <code>DDos</code>  避免方式：</strong></p>\n<ol>\n<li>限制单 IP 请求频率。</li>\n<li>防火墙等防护设置禁止 <code>ICMP</code>  包等</li>\n<li>检查特权端口的开放</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXprek56STBNRE14TlE9PSZhbXA7bWlkPTIyNDc0ODcxMTYmYW1wO2lkeD0xJmFtcDtzbj0wOTE4N2VlYjdlNDVmYWExYmVlODZmZjQ4YWUxNGJlMSZhbXA7c291cmNlPTQxI3dlY2hhdF9yZWRpcmVjdA==\">360 技术：嗨，送你一张 Web 性能优化地图</span></p>\n",
            "tags": [
                "前端面试",
                "前端面试",
                "计算机网络"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%EF%BC%88%E6%9D%83%E9%99%90%E8%8F%9C%E5%8D%95%EF%BC%89/",
            "url": "https://aaaa8880788.github.io/vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%EF%BC%88%E6%9D%83%E9%99%90%E8%8F%9C%E5%8D%95%EF%BC%89/",
            "title": "Vue3+Ts中实现动态路由菜单",
            "date_published": "2024-03-02T02:52:21.670Z",
            "content_html": "<h1 id=\"vue3实现动态路由权限菜单\"><a class=\"anchor\" href=\"#vue3实现动态路由权限菜单\">#</a> Vue3 实现动态路由（权限菜单）</h1>\n<h2 id=\"步骤一分析数据\"><a class=\"anchor\" href=\"#步骤一分析数据\">#</a> 步骤一：分析数据</h2>\n<p>假设后端发来的数据是这样的</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153724675.png\" alt=\"image-20220506153724675\" /></p>\n<p>type ===1 时是二级菜单（也就是可以展开的菜单，里面有各个子菜单）</p>\n<p>type === 2 时是一级菜单（不可展开）</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153736724.png\" alt=\"image-20220506153736724\" /></p>\n<h2 id=\"步骤二创建组件和路由\"><a class=\"anchor\" href=\"#步骤二创建组件和路由\">#</a> 步骤二：创建组件和路由</h2>\n<p>先将需要的所有路由都创建出来（后续再根据什么用户权限对应注册哪些路由，菜单也是根据后端数据动态生成的）</p>\n<p>只有一级菜单才创建，创建的路径跟传过来的 url 一致，因为 url 对应的其实就是 path</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153747335.png\" alt=\"image-20220506153747335\" /></p>\n<p>例如这里的 url 是 /main/system/role  所以我就在 views/main/system/role 下面创建 role.vue</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153759070.png\" alt=\"image-20220506153759070\" /></p>\n<p>同时在 router/main/system/role 下面创建 role.ts</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153809838.png\" alt=\"image-20220506153809838\" /></p>\n<p>其内容为路由的注册信息</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153821382.png\" alt=\"image-20220506153821382\" /></p>\n<p>这里因为要创建太多的组件和路由，所以用一个工具来快速创建 (coderwhy 提供的)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i coderwhy <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><p>安装成功后敲命令，它就会创建出相应路径的 role.vue 和 role.ts</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// coderwhy add3page<span class=\"token punctuation\">(</span>如果是vue2就用addpage<span class=\"token punctuation\">)</span> 组件名 <span class=\"token parameter variable\">-d</span> 组件存放路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// 例如</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>coderwhy add3page role <span class=\"token parameter variable\">-d</span> src/views/main/system/role</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>coderwhy add3page user <span class=\"token parameter variable\">-d</span> src/views/main/system/user</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>注意：自己一个个创建组件和路由都可以，路径也自己可以顶，弄这么长的路径其实只是为了利用这个工具而已</p>\n<p>命令分析：它会在创建完组件后，会根据 - d 后面的路径替换 views 为 router 创建它的路由规则，而且路径都是一一对应的，相当方便</p>\n<h2 id=\"步骤三根据菜单权限获取路由规则数组\"><a class=\"anchor\" href=\"#步骤三根据菜单权限获取路由规则数组\">#</a> 步骤三：根据菜单权限获取路由规则数组</h2>\n<p>创建完所有组件和路由规则后</p>\n<p>在 src/utils 下创建 map-menus.ts 文件，该文件是根据用户菜单权限拿到对应的路由规则</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> RouteRecordRaw <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapMenusToRoutes</span><span class=\"token punctuation\">(</span>userMenus<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> RouteRecordRaw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> RouteRecordRaw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 1. 先去加载默认所有的 routes</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> allRoutes<span class=\"token operator\">:</span> RouteRecordRaw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 这里的三个参数分别为①加载文件路径②是否递归加载，如果为 false，只会加载路径下文件，如果 true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 路径里面文件夹的文件也会加载③正则表达式（加载什么文件）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> routeFiles <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">.</span><span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/router/main'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.ts</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  routeFiles<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/router/main'</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    allRoutes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 2. 根据菜单获取需要添加的 routes</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// userMenus:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// type === 1 -> children -> type === 1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// type === 2 -> route</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_recurseGetRoute</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>menus<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> menu <span class=\"token keyword\">of</span> menus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> allRoutes<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> route<span class=\"token punctuation\">.</span>path <span class=\"token operator\">===</span> menu<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span> routes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">_recurseGetRoute</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token function\">_recurseGetRoute</span><span class=\"token punctuation\">(</span>userMenus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">return</span> routes</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"步骤四注册路由\"><a class=\"anchor\" href=\"#步骤四注册路由\">#</a> 步骤四：注册路由</h2>\n<p>大概实现思路就是这样，不同的情况可以适当修改，思路是一致的，</p>\n<p>最后使用的话只需要导入该文件（map-menus.ts），在获取到用户菜单权限后调用该文件导出的函数 mapMenusToRoutes（传入的菜单数据）就可以得到相应的路由规则，然后遍历注册就可以了</p>\n<p>我这里是在登录成功后获取数据并将数据存入 vuex 里面，所以我在存的时候顺便注册路由（vuex 存的操作就不说了，直接调用就好了）</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/image-20220506153842905.png\" alt=\"image-20220506153842905\" /></p>\n<p>当然，vuex 的特点就是刷新页面丢失，因为我是在登录成功才会进行存 vuex 的操作，而注册动态路由也放在这个操作里面，所以刷新 vuex 没了，动态路由的注册也没了，所以我们在登录成功后保存用户菜单信息到 vuex 之前，先将它存到本地，这样的话在登录成功后，vuex 和 localStorage 里面都有我们的菜单信息了，然后再定义一个函数（该函数作用是获取 localStorage 的菜单信息，然后将他存入 vuex，也就是再次调用存 vuex 的操作，这样也就间接的又注册了动态路由），在每次页面刷新都调用该函数</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里是 vuex 里面的 actions 函数，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 从本地缓存取数据保存入 vuex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">loadLocalLogin</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeToken'</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">const</span> userInfo <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userInfo'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeUserInfo'</span><span class=\"token punctuation\">,</span> userInfo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> userMenus <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userMenus'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userMenus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeUserMenusInfo'</span><span class=\"token punctuation\">,</span> userMenus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该函数定义在哪里随意，最后在 main.js 里面调用就好了</p>\n<pre><code>// 在每次页面重新加载时(刷新或第一次打开时),将本地缓存中vuex需要的数据存入vuex\nexport function setupStore() &#123;\n  // 从本地缓存获取Login模块需要的vuex数据\n  store.dispatch('login/loadLocalLogin')\n&#125;\n</code></pre>\n<p>这里注意该函数的调用一定要在 app.use (router) 之前，因为在 app.use (router) 后，页面路径就会去匹配路由，这时动态路由还没注册，这时页面路径是 router 里面的还好，可以正常显示，如果是动态路由的路径，那就 gg，找不到页面...</p>\n<p>可以放上面试一试，刷新一下页面，会发现页面空白～</p>\n<pre><code>import &#123; createApp &#125; from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport &#123; setupStore &#125; from './store'\n\nconst app = createApp(App)\n// 在每次页面重新加载时(刷新或第一次打开时),将本地缓存中vuex需要的数据存入vuex\n// 该函数要放在app.use(router)之前,因为在函数里面注册了动态路由，如果放后面\n// 路径是动态路由的路径的话，刷新会页面丢失，因为这时动态路由还没注册，匹配不到路径\nsetupStore()\napp.use(router)\napp.use(store)\napp.mount('#app')\n\n</code></pre>\n",
            "tags": [
                "Vue",
                "Vue3",
                "TypeScript"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue%E4%B8%ADrender%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%B7%E5%80%BC/",
            "url": "https://aaaa8880788.github.io/vue/Vue%E4%B8%ADrender%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%B7%E5%80%BC/",
            "title": "Vue中render的使用价值",
            "date_published": "2024-03-02T02:52:21.670Z",
            "content_html": "<h2 id=\"vue中render的使用价值\"><a class=\"anchor\" href=\"#vue中render的使用价值\">#</a>  <code>Vue</code>  中 render 的使用价值</h2>\n<h2 id=\"场景\"><a class=\"anchor\" href=\"#场景\">#</a> 场景</h2>\n<p>假设说是低代码平台配置好的表单渲染，亦或者说自己封装的一个表单组件，通过传配置项来渲染，一般我们会怎么做呢？</p>\n<h2 id=\"常规做法\"><a class=\"anchor\" href=\"#常规做法\">#</a> 常规做法</h2>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;wrapper&quot;&gt;\n    &lt;div  \n      v-for=&quot;item in item&quot;\n      :key=&quot;item.id&quot;&gt;\n      &lt;template v-if=&quot;item.type === 'input'&quot;&gt;\n        &lt;input&gt;&lt;/input&gt;\n      &lt;/template&gt;\n      &lt;template v-else-if=&quot;item.type === 'select'&quot;&gt;\n        &lt;select&gt;&lt;/select&gt;\n      &lt;/template&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import input from '@/component/input'\n  import select from '@/component/select'\n  export default &#123;\n    data()&#123;\n      return &#123;\n        item:[\n          &#123;\n            id:'1'\n            type:'input'\n          &#125;,\n          &#123;\n            id:'2'\n            type:'select'\n          &#125;\n        ]\n      &#125;\n    &#125;,\n    components:&#123;\n      input,\n      select\n    &#125;\n  &#125;\n&lt;/script&gt;\n</code></pre>\n<h2 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h2>\n<p>从以上代码可以看出，如果说，我们有 30 个 <code>type</code> ，那我们就必须用 <code>import</code>  导入 30 个组件，在 <code>compoents</code>  里面注册 30 个组件，在模板里面写 30 个 <code>template</code> + <code>v-if</code> ，越多代码只会越来越冗余，但是我们用 render 的方式来渲染呢？</p>\n<p>所以从中看出，常规做法的可读性极强，但是代码太过冗余，重复代码太多</p>\n<h2 id=\"render使用\"><a class=\"anchor\" href=\"#render使用\">#</a> render 使用</h2>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;wrapper&quot;&gt;\n    &lt;div  \n      v-for=&quot;item in item&quot;\n      :key=&quot;item.id&quot;&gt;\n      &lt;business-component :item=&quot;item&quot;/&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import '@/utils/renderHandle.js'\n  export default &#123;\n    data()&#123;\n      return &#123;\n        item:[\n          &#123;\n            id:'1'\n            type:'input'\n          &#125;,\n          &#123;\n            id:'2'\n            type:'select'\n          &#125;\n        ]\n      &#125;\n    &#125;\n  &#125;\n&lt;/script&gt;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'business-component'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">,</span>context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>item</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@/components/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.vue</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span>context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error----'</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>从这两部分代码可以看出，我无论有多少个组件，都不用像常规做法那样疯狂注册，疯狂导入，所以显然这里用 render 的方法来渲染是很完美的，不过其实这并不完善，因为 <code>vue.componet</code>  方法的第二个参数可并不仅仅只有 <code>render</code>  方法，它还可以用很多其他属性，假设说我们需要在使用的时候去添加一下其他属性呢？总不可能直接在上面的这个 <code>business-component</code>  的注册函数里面加吧，它只是个中介而已，负责转发，所以我们需要一个玄妙的注册函数来反传回去给我们去加东西</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'business-component'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">,</span>context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> compoentKey <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>key</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>compoentKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>compoentKey<span class=\"token punctuation\">,</span>context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">registerFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">,</span>context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>item</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@/components/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.vue</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error----'</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;wrapper&quot;&gt;\n    &lt;div  \n      v-for=&quot;item in item&quot;\n      :key=&quot;item.id&quot;&gt;\n      &lt;business-component \n        :item=&quot;item&quot;\n        :key=&quot;key&quot;/&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  import &#123; registerFn &#125; '@/utils/renderHandle.js'\n  export default &#123;\n    data()&#123;\n      return &#123;\n        item:[\n          &#123;\n            id:'1'\n            type:'input'\n          &#125;,\n          &#123;\n            id:'2'\n            type:'select'\n          &#125;\n        ],\n        // 唯一的key\n        key:999\n      &#125;\n    &#125;,\n    created()&#123;\n      this.register\n    &#125;,\n    methods:&#123;\n      register()&#123;\n        registerFn(this.key,(context) =&gt; &#123;\n          const &#123;\n            item\n          &#125; = context.props\n          return &#123;\n            item,\n            on: &#123;\n              test1()&#123;\n                console.log('我要监听了');\n              &#125;\n            &#125;,\n            off: &#123;\n              test2()&#123;\n                console.log('我不监听了');\n              &#125;\n            &#125;\n          &#125;\n        &#125;)\n      &#125;\n    &#125;\n  &#125;\n&lt;/script&gt;\n\n</code></pre>\n<h2 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>是不是很简单呢，其实 <code>render</code>  也不是不能在 <code>vue</code>  中用的，有些场景它确实很好用</p>\n",
            "tags": [
                "Vue",
                "Vue2"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5%E9%81%87%E5%88%B0%E8%B7%A8%E5%9F%9F/",
            "url": "https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5%E9%81%87%E5%88%B0%E8%B7%A8%E5%9F%9F/",
            "title": "Vue3中开发阶段跨域解决",
            "date_published": "2024-03-02T02:52:21.670Z",
            "content_html": "<h1 id=\"vue3项目中开发阶段遇到跨域\"><a class=\"anchor\" href=\"#vue3项目中开发阶段遇到跨域\">#</a> Vue3 项目中开发阶段遇到跨域</h1>\n<p>可以在 vue.config.json 中配置</p>\n<pre><code>devServer: &#123;\n  proxy:&#123;\n    '^/api':&#123;\n      target:'http://XX.XX.XX.XX:XXXX',\n      pathRewrite:&#123;\n        '^api':''\n      &#125;,\n      changeOrigin:true\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<pre><code>module.exports = defineConfig(&#123;\n  transpileDependencies: true,\n  outputDir: './build',\n  // 位置放这里,配置好后需要去把baseURL设置成 BASE_URL = '/api',原本是BASE_URL = 'http://XX.XX.XX.XX:XXXX'\n  devServer: &#123;\n    proxy:&#123;\n     '^/api':&#123;\n      target:'http://XX.XX.XX.XX:XXXX',\n      pathRewrite:&#123;\n        '^api':''\n      &#125;,\n      changeOrigin:true\n    &#125;\n  &#125;\n&#125;\n&#125;)\n\n</code></pre>\n",
            "tags": [
                "Vue",
                "Vue3",
                "跨域"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "url": "https://aaaa8880788.github.io/vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "title": "Vue3项目搭建流程",
            "date_published": "2024-03-02T02:52:21.670Z",
            "content_html": "<h1 id=\"项目搭建规范\"><a class=\"anchor\" href=\"#项目搭建规范\">#</a> 项目搭建规范</h1>\n<h2 id=\"一-代码规范\"><a class=\"anchor\" href=\"#一-代码规范\">#</a> 一。代码规范</h2>\n<h3 id=\"11-集成editorconfig配置\"><a class=\"anchor\" href=\"#11-集成editorconfig配置\">#</a> 1.1. 集成 editorconfig 配置</h3>\n<p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># http://editorconfig.org</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root = true</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 表示所有文件适用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>charset = utf<span class=\"token punctuation\">-</span><span class=\"token number\">8</span> <span class=\"token comment\"># 设置文件字符集为 utf-8</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>indent_style = space <span class=\"token comment\"># 缩进风格（tab | space）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>indent_size = 2 <span class=\"token comment\"># 缩进大小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>end_of_line = lf <span class=\"token comment\"># 控制换行类型 (lf | cr | crlf)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>trim_trailing_whitespace = true <span class=\"token comment\"># 去除行首的任意空白字符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>insert_final_newline = true <span class=\"token comment\"># 始终在文件末尾插入一个新行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token important\">*.md</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 表示仅 md 文件适用以下规则</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>max_line_length = off</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>trim_trailing_whitespace = false</pre></td></tr></table></figure><p>VSCode 需要安装一个插件：EditorConfig for VS Code</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506134337889.png\" alt=\"image-20220506134337889\" /></p>\n<h3 id=\"12-使用prettier工具\"><a class=\"anchor\" href=\"#12-使用prettier工具\">#</a> 1.2. 使用 prettier 工具</h3>\n<p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p>\n<p>1. 安装 prettier</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> prettier <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><p>2. 配置.prettierrc 文件：</p>\n<ul>\n<li>useTabs：使用 tab 缩进还是空格缩进，选择 false；</li>\n<li>tabWidth：tab 是空格的情况下，是几个空格，选择 2 个；</li>\n<li>printWidth：当行字符的长度，推荐 80，也有人喜欢 100 或者 120；</li>\n<li>singleQuote：使用单引号还是双引号，选择 true，使用单引号；</li>\n<li>trailingComma：在多行输入的尾逗号是否添加，设置为  <code>none</code> ；</li>\n<li>semi：语句末尾是否要加分号，默认值 true，选择 false 表示不加；</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"useTabs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 创建.prettierignore 忽略文件</p>\n<pre><code>/dist/*\n.local\n.output.js\n/node_modules/**\n\n**/*.svg\n**/*.sh\n\n/public/*\n</code></pre>\n<p>4.VSCode 需要安装 prettier 的插件</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135533179.png\" alt=\"image-20220506135533179\" /></p>\n<p>5. 测试 prettier 是否生效</p>\n<ul>\n<li>测试一：在代码中保存代码；</li>\n<li>测试二：配置一次性修改的命令；</li>\n</ul>\n<p>在 package.json 中配置一个 scripts：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write .\"</span></pre></td></tr></table></figure><h3 id=\"13-使用eslint检测\"><a class=\"anchor\" href=\"#13-使用eslint检测\">#</a> 1.3. 使用 ESLint 检测</h3>\n<p>1. 在前面创建项目的时候，我们就选择了 ESLint，所以 Vue 会默认帮助我们配置需要的 ESLint 环境。</p>\n<p>2.VSCode 需要安装 ESLint 插件：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135616879.png\" alt=\"image-20220506135616879\" /></p>\n<p>3. 解决 eslint 和 prettier 冲突的问题：</p>\n<p>安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i eslint-plugin-prettier eslint-config-prettier <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><p>添加 prettier 插件：(在.eslintrc.js 文件中)</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module.exports = <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  root<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  env<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    node<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  extends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    'plugin<span class=\"token operator\">:</span>vue/vue3-essential'<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    'eslint<span class=\"token operator\">:</span>recommended'<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    '@vue/typescript/recommended'<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    'plugin<span class=\"token operator\">:</span>prettier/recommended' <span class=\"token comment\">// 加上这句话，一般会自动加</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  parserOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ecmaVersion<span class=\"token operator\">:</span> <span class=\"token number\">2020</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    'no-console'<span class=\"token operator\">:</span> process.env.NODE_ENV === 'production' ? 'warn' <span class=\"token operator\">:</span> 'off'<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    'no-debugger'<span class=\"token operator\">:</span> process.env.NODE_ENV === 'production' ? 'warn' <span class=\"token operator\">:</span> 'off'</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"14-git-husky和eslint\"><a class=\"anchor\" href=\"#14-git-husky和eslint\">#</a> 1.4. git Husky 和 eslint</h3>\n<p>虽然我们已经要求项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 中的问题解决掉了：</p>\n<ul>\n<li>\n<p>也就是我们希望保证代码仓库中的代码都是符合 eslint 规范的；</p>\n</li>\n<li>\n<p>那么我们需要在组员执行  <code>git commit </code>  命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进行修复；</p>\n</li>\n</ul>\n<p>那么如何做到这一点呢？可以通过 Husky 工具：</p>\n<ul>\n<li>husky 是一个 git hook 工具，可以帮助我们触发 git 提交的各个阶段：pre-commit、commit-msg、pre-push</li>\n</ul>\n<p>如何使用 husky 呢？</p>\n<p>这里我们可以使用自动配置命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx husky-init <span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>这里会做三件事：</p>\n<p>1. 安装 husky 相关的依赖：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135657968.png\" alt=\"image-20220506135657968\" /></p>\n<p>2. 在项目目录下创建  <code>.husky</code>  文件夹：</p>\n<pre><code>npx huksy install\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135710556.png\" alt=\"image-20220506135710556\" /></p>\n<p>3. 在 package.json 中添加一个脚本：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135721621.png\" alt=\"image-20220506135721621\" /></p>\n<p>接下来，我们需要去完成一个操作：在进行 commit 时，执行 lint 脚本：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135734035.png\" alt=\"image-20220506135734035\" /></p>\n<p>这个时候我们执行 git commit 的时候会自动对代码进行 lint 校验。</p>\n<h3 id=\"15-git-commit规范\"><a class=\"anchor\" href=\"#15-git-commit规范\">#</a> 1.5. git commit 规范</h3>\n<h4 id=\"151-代码提交风格\"><a class=\"anchor\" href=\"#151-代码提交风格\">#</a> 1.5.1. 代码提交风格</h4>\n<p>通常我们的 git commit 会按照统一的风格来提交，这样可以快速定位每次提交的内容，方便之后对版本进行控制。</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135748248.png\" alt=\"image-20220506135748248\" /></p>\n<p>但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen</p>\n<ul>\n<li>Commitizen 是一个帮助我们编写规范 commit message 的工具；</li>\n</ul>\n<p>1. 安装 Commitizen</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> commitizen <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><p>2. 安装 cz-conventional-changelog，并且初始化 cz-conventional-changelog：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx commitizen init cz-conventional-changelog --save-dev --save-exact</pre></td></tr></table></figure><p>这个命令会帮助我们安装 cz-conventional-changelog：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506140026044.png\" alt=\"image-20220506140026044\" /></p>\n<p>并且在 package.json 中进行配置：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135802278.png\" alt=\"image-20220506135802278\" /></p>\n<p>这个时候我们提交代码需要使用  <code>npx cz</code> ：</p>\n<ul>\n<li>第一步是选择 type，本次更新的类型</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>feat</td>\n<td>新增特性 (feature)</td>\n</tr>\n<tr>\n<td>fix</td>\n<td>修复 Bug (bug fix)</td>\n</tr>\n<tr>\n<td>docs</td>\n<td>修改文档 (documentation)</td>\n</tr>\n<tr>\n<td>style</td>\n<td>代码格式修改 (white-space, formatting, missing semi colons, etc)</td>\n</tr>\n<tr>\n<td>refactor</td>\n<td>代码重构 (refactor)</td>\n</tr>\n<tr>\n<td>perf</td>\n<td>改善性能 (A code change that improves performance)</td>\n</tr>\n<tr>\n<td>test</td>\n<td>测试 (when adding missing tests)</td>\n</tr>\n<tr>\n<td>build</td>\n<td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td>\n</tr>\n<tr>\n<td>ci</td>\n<td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td>\n</tr>\n<tr>\n<td>chore</td>\n<td>变更构建流程或辅助工具 (比如更改测试环境)</td>\n</tr>\n<tr>\n<td>revert</td>\n<td>代码回退</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>第二步选择本次修改的范围（作用域）</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135820858.png\" alt=\"image-20220506135820858\" /></p>\n<ul>\n<li>第三步选择提交的信息</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135828392.png\" alt=\"image-20220506135828392\" /></p>\n<ul>\n<li>第四步提交详细的描述信息</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135839782.png\" alt=\"image-20220506135839782\" /></p>\n<ul>\n<li>第五步是否是一次重大的更改</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135847203.png\" alt=\"image-20220506135847203\" /></p>\n<ul>\n<li>第六步是否影响某个 open issue</li>\n</ul>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135855311.png\" alt=\"image-20220506135855311\" /></p>\n<p>我们也可以在 scripts 中构建一个命令来执行 cz：</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/image-20220506135903118.png\" alt=\"image-20220506135903118\" /></p>\n<h4 id=\"152-代码提交验证\"><a class=\"anchor\" href=\"#152-代码提交验证\">#</a> 1.5.2. 代码提交验证</h4>\n<p>如果我们按照 cz 来规范了提交风格，但是依然有同事通过  <code>git commit</code>  按照不规范的格式提交应该怎么办呢？</p>\n<ul>\n<li>我们可以通过 commitlint 来限制提交；</li>\n</ul>\n<p>1. 安装 @commitlint/config-conventional 和 @commitlint/cli</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i @commitlint/config-conventional @commitlint/cli <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><p>2. 在根目录创建 commitlint.config.js 文件，配置 commitlint</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@commitlint/config-conventional'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 使用 husky 生成 commit-msg 文件，验证提交信息：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx husky <span class=\"token function\">add</span> .husky/commit-msg <span class=\"token string\">\"npx --no-install commitlint --edit <span class=\"token variable\">$1</span>\"</span></pre></td></tr></table></figure><h2 id=\"二-第三方库集成\"><a class=\"anchor\" href=\"#二-第三方库集成\">#</a> 二。第三方库集成</h2>\n<h3 id=\"21-vueconfigjs配置\"><a class=\"anchor\" href=\"#21-vueconfigjs配置\">#</a> 2.1. vue.config.js 配置</h3>\n<p>vue.config.js 有三种配置方式：</p>\n<ul>\n<li>方式一：直接通过 CLI 提供给我们的选项来配置：\n<ul>\n<li>比如 publicPath：配置应用程序部署的子目录（默认是  <code>/</code> ，相当于部署在  <code>https://www.my-app.com/</code> ）；</li>\n<li>比如 outputDir：修改输出的文件夹；</li>\n</ul>\n</li>\n<li>方式二：通过 configureWebpack 修改 webpack 的配置：\n<ul>\n<li>可以是一个对象，直接会被合并；</li>\n<li>可以是一个函数，会接收一个 config，可以通过 config 来修改配置；</li>\n</ul>\n</li>\n<li>方式三：通过 chainWebpack 修改 webpack 的配置：\n<ul>\n<li>是一个函数，会接收一个基于  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEtbmV1dHJpbm8vd2VicGFjay1jaGFpbg==\">webpack-chain</span> 的 config 对象，可以对配置进行修改；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">outputDir</span><span class=\"token operator\">:</span> <span class=\"token string\">'./build'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// configureWebpack: &#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//   resolve: &#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">//     alias: &#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//       views: '@/views'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">//   &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// configureWebpack: (config) => &#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//   config.resolve.alias = &#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//     '@': path.resolve(__dirname, 'src'),</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//     views: '@/views'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//   &#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// &#125;,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function-variable function\">chainWebpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    config<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>alias<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@/views'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"22-vue-router集成\"><a class=\"anchor\" href=\"#22-vue-router集成\">#</a> 2.2. vue-router 集成</h3>\n<p>安装 vue-router 的最新版本：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vue-router@next</pre></td></tr></table></figure><p>创建 router 对象：（在 src 目录下创建 router 文件夹 /index.ts）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHashHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> RouteRecordRaw <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> RouteRecordRaw<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    redirect<span class=\"token operator\">:</span> <span class=\"token string\">'/main'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/main'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../views/main/main.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../views/login/login.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr></table></figure><p>安装 router：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 App.vue 中配置跳转：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>首页<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"23-vuex集成\"><a class=\"anchor\" href=\"#23-vuex集成\">#</a> 2.3. vuex 集成</h3>\n<p>安装 vuex：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> vuex@next</pre></td></tr></table></figure><p>创建 store 对象：（在 src 目录下创建 store 文件夹 /index.ts）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">'coderwhy'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</pre></td></tr></table></figure><p>安装 store：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 App.vue 中使用：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"24-element-plus集成\"><a class=\"anchor\" href=\"#24-element-plus集成\">#</a> 2.4. element-plus 集成</h3>\n<p>Element Plus，一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库：</p>\n<ul>\n<li>相信很多同学在 Vue2 中都使用过 element-ui，而 element-plus 正是 element-ui 针对于 vue3 开发的一个 UI 组件库；</li>\n<li>它的使用方式和很多其他的组件库是一样的，所以学会 element-plus，其他类似于 ant-design-vue、NaiveUI、VantUI 都是差不多的；</li>\n</ul>\n<p>安装 element-plus</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> element-plus</pre></td></tr></table></figure><h4 id=\"241-全局引入\"><a class=\"anchor\" href=\"#241-全局引入\">#</a> 2.4.1. 全局引入</h4>\n<p>一种引入 element-plus 的方式是全局引入，代表的含义是所有的组件和插件都会被自动注册：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// main.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">'element-plus'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'element-plus/dist/index.css'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementPlus<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>引入字体图标</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// main.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引入 element plus 图标</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ElIcons <span class=\"token keyword\">from</span> <span class=\"token string\">'@element-plus/icons-vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 统一注册 Icon 图标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> iconName <span class=\"token keyword\">in</span> ElIcons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>iconName<span class=\"token punctuation\">,</span> ElIcons<span class=\"token punctuation\">[</span>iconName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"242-按需引入\"><a class=\"anchor\" href=\"#242-按需引入\">#</a> 2.4.2. 按需引入</h4>\n<p>首先你需要安装 <code>unplugin-vue-components</code>  和  <code>unplugin-auto-import</code>  这两款插件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> unplugin-vue-components unplugin-auto-import</pre></td></tr></table></figure><p>在 vue.config.js 中配置</p>\n<pre><code>const &#123; defineConfig &#125; = require('@vue/cli-service')\nconst AutoImport = require('unplugin-auto-import/webpack')\nconst Components = require('unplugin-vue-components/webpack')\nconst &#123; ElementPlusResolver &#125; = require('unplugin-vue-components/resolvers')\n\nmodule.exports = defineConfig(&#123;\n  configureWebpack: &#123;\n    // ...\n    plugins: [\n      AutoImport(&#123;\n        resolvers: [ElementPlusResolver()]\n      &#125;),\n      Components(&#123;\n        resolvers: [ElementPlusResolver()]\n      &#125;)\n    ]\n  &#125;\n&#125;)\n\n</code></pre>\n<h3 id=\"25-axios集成\"><a class=\"anchor\" href=\"#25-axios集成\">#</a> 2.5. axios 集成</h3>\n<p>安装 axios：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios</pre></td></tr></table></figure><p>封装 axios：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> AxiosInstance<span class=\"token punctuation\">,</span> AxiosRequestConfig<span class=\"token punctuation\">,</span> AxiosResponse <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Result <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useUserStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'/@/store/modules/user'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HYRequest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> instance<span class=\"token operator\">:</span> AxiosInstance</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> options<span class=\"token operator\">:</span> AxiosRequestConfig</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getToken</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>token<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 拦截响应的数据</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> AxiosResponse<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>>></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">patch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'PATCH'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">delete</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> <span class=\"token string\">'DELETE'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> HYRequest</pre></td></tr></table></figure>",
            "tags": [
                "Vue",
                "Vue3"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3%E4%B8%ADts%E7%9A%84%E5%B7%A7%E5%A6%99%E4%BD%BF%E7%94%A8/",
            "url": "https://aaaa8880788.github.io/vue/Vue3%E4%B8%ADts%E7%9A%84%E5%B7%A7%E5%A6%99%E4%BD%BF%E7%94%A8/",
            "title": "Vue3中Ts的使用技巧",
            "date_published": "2024-03-02T02:52:21.669Z",
            "content_html": "<h1 id=\"在vue3中ts的巧妙使用\"><a class=\"anchor\" href=\"#在vue3中ts的巧妙使用\">#</a> 在 vue3 中 ts 的巧妙使用</h1>\n<h1 id=\"技巧一取ref对象\"><a class=\"anchor\" href=\"#技巧一取ref对象\">#</a> 技巧一 (取 ref 对象)</h1>\n<h2 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明:</h2>\n<p>在获取组件的 ref 对象时，我们可以通过 &lt;InstanceType&lt;typeof 组件 ref&gt;&gt; 来给 ref 对象限制类型</p>\n<h2 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用：</h2>\n<p>在取到 ref 对象后，如果调用其组件内的方法，如果方法不存在会报错，增强代码安全性</p>\n<h2 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意：</h2>\n<p>子组件部分的 setup 写法如果用 script 标签方式，需要用 defineExpose 将方法暴露出去，否则父组件取不到子组件的方法 (官方文档有说，如果用 setup () 函数的方法就不用考虑)</p>\n<h2 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h2>\n<pre><code class=\"language-vue\">// 父组件\n&lt;template&gt;\n  &lt;div id=&quot;login&quot;&gt;\n    &lt;login-account ref=&quot;loginAccountRef&quot;&gt; &lt;/login-account&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport &#123; ref &#125; from 'vue'\nimport loginAccount from './cpns/login-account.vue'\n\n// 拿到loginAccount组件的ref对象\nconst loginAccountRef = ref&lt;InstanceType&lt;typeof loginAccount&gt;&gt;()\n\n&lt;/script&gt;\n\n</code></pre>\n<pre><code>// 子组件\n&lt;template&gt;\n  &lt;div&gt;哈哈&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\n// 定义方法\n// 点击登录触发\nconst loginAction = () =&gt; &#123;\n \tconsole.log('哈哈啊哈')\n&#125;\n\ndefineExpose(&#123;\n  loginAction\n&#125;)\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<h1 id=\"技巧二vuex\"><a class=\"anchor\" href=\"#技巧二vuex\">#</a> 技巧二（vuex）</h1>\n<h2 id=\"说明-2\"><a class=\"anchor\" href=\"#说明-2\">#</a> 说明:</h2>\n<p>直接使用 vuex 里的 store 对象时，我们取里面的 state 的值是 any 类型，这是我们可以用小技巧给他一些类型限制</p>\n<h2 id=\"作用-2\"><a class=\"anchor\" href=\"#作用-2\">#</a> 作用:</h2>\n<p>在调用 vuex 里面的 state 时随意乱写调用名称会报错，只有接口定义过的才能调用，增加代码安全性</p>\n<h2 id=\"用法-2\"><a class=\"anchor\" href=\"#用法-2\">#</a> 用法:</h2>\n<h3 id=\"根模块的接口类型定义\"><a class=\"anchor\" href=\"#根模块的接口类型定义\">#</a> 根模块的接口类型定义</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store/type.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> ILoginState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./login/type'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 根 state 的类型限制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRootState</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRootWithModule</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  login<span class=\"token operator\">:</span> ILoginState</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">IStoreType</span> <span class=\"token operator\">=</span> IRootState <span class=\"token operator\">&amp;</span> IRootWithModule</pre></td></tr></table></figure><h3 id=\"根模块\"><a class=\"anchor\" href=\"#根模块\">#</a> 根模块</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createStore<span class=\"token punctuation\">,</span> Store<span class=\"token punctuation\">,</span> useStore <span class=\"token keyword\">as</span> useVuexStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> login <span class=\"token keyword\">from</span> <span class=\"token string\">'./login/login'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> IRootState<span class=\"token punctuation\">,</span> IStoreType <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./type'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createStore</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IRootState<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    login</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 给 useStore 出来的实例对象 store 加 ts 类型限制</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span>IStoreType<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">useVuexStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store</pre></td></tr></table></figure><h3 id=\"子模块的接口类型定义\"><a class=\"anchor\" href=\"#子模块的接口类型定义\">#</a> 子模块的接口类型定义</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store/login/type.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILoginState</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  userInfo<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  userMenus<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"子模块\"><a class=\"anchor\" href=\"#子模块\">#</a> 子模块</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store/login/login.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Module <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入类型接口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> ILoginState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./type'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> IRootState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../type'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> loginModule<span class=\"token operator\">:</span> Module<span class=\"token operator\">&lt;</span>ILoginState<span class=\"token punctuation\">,</span> IRootState<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  namespaced<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      token<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      userInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      userMenus<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> loginModule</pre></td></tr></table></figure><h3 id=\"在组件中用法\"><a class=\"anchor\" href=\"#在组件中用法\">#</a> 在组件中用法</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    哈哈哈\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n// 这里导入的useStore不是vuex的,而是我们自己定义的那个(我们给它加了类型限制)\nimport &#123; useStore &#125; from '@/store'\nconst store = useStore()\n// 到这里我们就可以发现store的类型不是any了，而是我们定义的Store&lt;IStoreType&gt;类型\n// 而且在下面取state的时候我们会发现有代码提示了，如果写了state里面没有的值，会报错\nconst userMenus = store.state.login.userMenus\nconsole.log(userMenus)\n&lt;/script&gt;\n</code></pre>\n",
            "tags": [
                "Vue",
                "Vue3",
                "TypeScript",
                "Vuex"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3%E4%B8%AD%E5%B0%81%E8%A3%85useMapper%E5%87%BD%E6%95%B0%EF%BC%88Vuex%EF%BC%89/",
            "url": "https://aaaa8880788.github.io/vue/Vue3%E4%B8%AD%E5%B0%81%E8%A3%85useMapper%E5%87%BD%E6%95%B0%EF%BC%88Vuex%EF%BC%89/",
            "title": "Vue3中封装useMapper函数（Vuex）",
            "date_published": "2024-03-02T02:52:21.669Z",
            "content_html": "<h1 id=\"vue3中封装usemapper函数vuex\"><a class=\"anchor\" href=\"#vue3中封装usemapper函数vuex\">#</a> Vue3 中封装 useMapper 函数（Vuex）</h1>\n<h1 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h1>\n<pre><code class=\"language-vue\">&lt;script&gt;\nimport &#123; useStore &#125; from &quot;vuex&quot;;\nimport &#123; computed &#125; from &quot;@vue/runtime-core&quot;;\nexport default &#123;\n  setup() &#123;\n   \t//1.传统方法在vuex中拿到state\n    const oldCounter = computed(() =&gt; store.state.counter);\n    const oldName = computed(() =&gt; store.state.name);\n    const oldAge = computed(() =&gt; store.state.age); \n    return &#123;\n      oldCounter,\n      oldName,\n      oldAge,\n    &#125;;\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"language-vue\">&lt;script&gt;\nimport &#123; useState &#125; from &quot;../hooks/useState&quot;;\nexport default &#123;\n  setup() &#123;\n    // 2.使用mapState封装的函数在vuex中拿到state\n    const storeState1 = useState([&quot;counter&quot;, &quot;name&quot;, &quot;age&quot;]);\n    return &#123;\n      ...storeState1,\n    &#125;;\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h1 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h1>\n<p>在 src 目录下创建 hooks 文件夹，在里面创建 useMapper.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>computed<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useMapper</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mapper<span class=\"token punctuation\">,</span>mapFn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 拿到 store 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 获取到相应的对象的 functions:&#123;name:function,age:function&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> storeMapperFns <span class=\"token operator\">=</span> <span class=\"token function\">mapFn</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 对数据进行转换</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> storeMapper <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>storeMapperFns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fnKey</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> storeMapperFns<span class=\"token punctuation\">[</span>fnKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">$store</span><span class=\"token operator\">:</span>store<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        storeMapper<span class=\"token punctuation\">[</span>fnKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> storeMapper</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 src 目录下创建 hooks 文件夹，在里面创建 useState.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  src/hooks/useState</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useMapper<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./useMapper'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState <span class=\"token punctuation\">,</span> createNamespacedHelpers<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mapper<span class=\"token punctuation\">,</span>moduleName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">let</span> mapperFn <span class=\"token operator\">=</span> mapState</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> moduleName <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> moduleName<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      mapperFn <span class=\"token operator\">=</span> <span class=\"token function\">createNamespacedHelpers</span><span class=\"token punctuation\">(</span>moduleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mapState</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">useMapper</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">,</span>mapperFn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试使用\"><a class=\"anchor\" href=\"#测试使用\">#</a> 测试使用</h2>\n<pre><code class=\"language-vue\">//\t\tsrc/app.vue\n\n&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;h1&gt;使用useState方法通过数组拿到state数据&lt;/h1&gt;\n    &lt;h2&gt;counter:&#123;&#123;counter&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;name:&#123;&#123;name&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;age:&#123;&#123;age&#125;&#125;&lt;/h2&gt;\n    &lt;hr&gt;\n    &lt;h1&gt;使用useState方法通过对象拿到state数据&lt;/h1&gt;\n    &lt;h2&gt;sCounter:&#123;&#123;sCounter&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;sName:&#123;&#123;sName&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;sAge:&#123;&#123;sAge&#125;&#125;&lt;/h2&gt;\n    &lt;hr&gt;\n    &lt;h1&gt;使用useState方法通过对象拿到state数据&lt;/h1&gt;\n    &lt;h2&gt;aCounter:&#123;&#123;aCounter&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;aName:&#123;&#123;aName&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;aAge:&#123;&#123;aAge&#125;&#125;&lt;/h2&gt;\n    &lt;hr&gt;\n    &lt;h1&gt;使用传统方法拿到state数据&lt;/h1&gt;\n    &lt;h2&gt;oldCounter:&#123;&#123;oldCounter&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;oldName:&#123;&#123;oldName&#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;oldAge:&#123;&#123;oldAge&#125;&#125;&lt;/h2&gt;\n    &lt;hr&gt;\n    &lt;button @click=&quot;sub&quot;&gt;-1&lt;/button&gt;\n    &lt;span&gt;&#123;&#123;counter&#125;&#125;&lt;/span&gt;\n    &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport &#123; useState &#125; from &quot;../hooks/useState&quot;;\nimport &#123; useStore &#125; from &quot;vuex&quot;;\nimport &#123; computed &#125; from &quot;@vue/runtime-core&quot;;\nexport default &#123;\n  setup() &#123;\n    // 使用mapState封装的函数拿到state\n    // 使用方法一：\n    const storeState1 = useState([&quot;counter&quot;, &quot;name&quot;, &quot;age&quot;]);\n    // 使用方法二：\n    const storeState2 = useState(&#123;\n      sCounter: (state) =&gt; state.counter,\n      sName: (state) =&gt; state.name,\n      sAge: (state) =&gt; state.age,\n    &#125;);\n    // 使用方法三：\n    const storeState3 = useState(&#123;\n      aCounter: &quot;counter&quot;,\n      aName: &quot;name&quot;,\n      aAge: &quot;age&quot;,\n    &#125;);\n    // 拿到store对象\n    const store = useStore();\n    // 传统方法拿到state\n    const oldCounter = computed(() =&gt; store.state.counter);\n    const oldName = computed(() =&gt; store.state.name);\n    const oldAge = computed(() =&gt; store.state.age);\n\n    // 点击+1\n    const add = () =&gt; &#123;\n      store.commit(&quot;increment&quot;);\n    &#125;;\n    // 点击-1\n    const sub = () =&gt; &#123;\n      store.commit(&quot;decrement&quot;);\n    &#125;;\n\n    return &#123;\n      ...storeState1,\n      ...storeState2,\n      ...storeState3,\n      oldCounter,\n      oldName,\n      oldAge,\n      add,\n      sub,\n    &#125;;\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot;&gt;\n#app &#123;\n  text-align: center;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n",
            "tags": [
                "Vue",
                "Vue3",
                "Vuex"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E4%B8%94%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/",
            "url": "https://aaaa8880788.github.io/vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E4%B8%94%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/",
            "title": "Vue3+Ts实现选中区间且区间内高亮",
            "date_published": "2024-03-02T02:52:21.668Z",
            "content_html": "<h1 id=\"该案例的实现思路\"><a class=\"anchor\" href=\"#该案例的实现思路\">#</a> 该案例的实现思路</h1>\n<p>每个盒子都有自己的索引值，在你选中一个盒子之后，会在数组 a 中记录这个索引值，而这时我们需要定义一个盒子移入就触发的事件，在选中一个盒子的条件下（也就是数组 a 的 length 为 1 时）将你移入的那个盒子的索引值记录到数组 b 中，这时数组 a 和数组 b 中都有一个索引值，我们只需要将在那些索引值在这两个索引值之间的盒子高亮一个颜色就可以了，而数组 a 里面的索引值所对应的盒子设置为另一个高亮颜色，就可实现</p>\n<h1 id=\"案例演示\"><a class=\"anchor\" href=\"#案例演示\">#</a> 案例演示</h1>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E5%8D%B4%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/image-20220506155720417.png\" alt=\"image-20220506155720417\" /></p>\n<p>在点击某个格子后会高亮一个盒子，然后可以在盒子范围内选中第二个盒子即可获取选中区域</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E5%8D%B4%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/image-20220506155733632.png\" alt=\"image-20220506155733632\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Vue3+Ts%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%AD%E5%8C%BA%E9%97%B4%E5%8D%B4%E5%8C%BA%E9%97%B4%E5%86%85%E9%AB%98%E4%BA%AE/image-20220506155742316.png\" alt=\"image-20220506155742316\" /></p>\n<h1 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h1>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;div class=&quot;VueTimeSlot&quot;&gt;\n      &lt;div class=&quot;VueTimeSlotList&quot;&gt;\n        &lt;div\n          class=&quot;VueTimeSlotItems&quot;\n          v-for=&quot;(item, index) in times&quot;\n          :key=&quot;index&quot;\n        &gt;\n          &#123;&#123; getItemsSection(index) &#125;&#125;\n          &lt;div\n            class=&quot;VueTimeSlotBox&quot;\n            :class=&quot;&#123;\n              VueTimeSlotBoxSelect: BlueBox.includes(index),\n              VueTimeSlotBoxItems: getItemsSection(index)\n            &#125;&quot;\n            @mouseover=&quot;ItmeListOnMouseover(index)&quot;\n            @click=&quot;ItmeListOnclick(index)&quot;\n          &gt;&lt;/div&gt;\n          &#123;&#123; index &#125;&#125;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref &#125; from 'vue'\nconst times = ref&lt;number[]&gt;([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\nconst BlueBox = ref&lt;number[]&gt;([])\nconst TimeItems = ref&lt;number[]&gt;([])\nconst ItmeListOnclick = (id: number) =&gt; &#123;\n  BlueBox.value.push(id)\n  if (BlueBox.value.length &gt; 2) &#123;\n    BlueBox.value = []\n    TimeItems.value = []\n    BlueBox.value.push(id)\n  &#125;\n&#125;\n\nconst ItmeListOnMouseover = (id: number) =&gt; &#123;\n  if (BlueBox.value.length == 1) &#123;\n    TimeItems.value[0] = id\n  &#125;\n&#125;\n\nconst getItemsSection = (id: number) =&gt; &#123;\n  let flag = false\n  if (id &gt; BlueBox.value[0]) &#123;\n    flag = id &gt; BlueBox.value[0] &amp;&amp; id &lt; TimeItems.value[0]\n  &#125; else &#123;\n    flag = id &lt; BlueBox.value[0] &amp;&amp; id &gt; TimeItems.value[0]\n  &#125;\n  return flag\n&#125;\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n.VueTimeSlot &#123;\n  .VueTimeSlotList &#123;\n    display: flex;\n    .VueTimeSlotItems &#123;\n      // background-color: red;\n      display: inline-block;\n      padding: 30px 0px;\n      &amp;:last-child &#123;\n        .VueTimeSlotBox &#123;\n          border-right: 1px #ccc solid;\n        &#125;\n      &#125;\n      .VueTimeSlotBox &#123;\n        width: 50px;\n        height: 20px;\n        border: 1px #ccc solid;\n        border-right: none;\n        cursor: pointer;\n      &#125;\n      .VueTimeSlotBoxSelect &#123;\n        background-color: rgb(50, 150, 250) !important;\n      &#125;\n      .VueTimeSlotBoxItems &#123;\n        background-color: rgba(50, 150, 250, 0.3);\n      &#125;\n    &#125;\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n",
            "tags": [
                "Vue",
                "Vue3",
                "TypeScript"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3+Ts%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85axios/",
            "url": "https://aaaa8880788.github.io/vue/Vue3+Ts%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%81%E8%A3%85axios/",
            "title": "Vue3+ts封装axios",
            "date_published": "2024-03-02T02:52:21.668Z",
            "content_html": "<h1 id=\"1在vue3ts项目中封装axios\"><a class=\"anchor\" href=\"#1在vue3ts项目中封装axios\">#</a> ①在 Vue3+Ts 项目中封装 axios</h1>\n<h1 id=\"说明\"><a class=\"anchor\" href=\"#说明\">#</a> 说明</h1>\n<p>采用了类封装思想，包含了三种情况的拦截器封装</p>\n<p>①公共拦截器（所有实例都有的拦截器）</p>\n<p>②特有拦截器（只有在 new 实例时传入的对象中传入了拦截器）</p>\n<p>③独有拦截器（只有在调用请求的时候传入拦截器）</p>\n<h1 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h1>\n<p>在用 cli 脚手架创建完成项目后</p>\n<p>在 src 下面创建 network 文件夹，在里面创建 index.ts</p>\n<p>该文件是拿到 axios 请求封装实例并导出使用（网络请求出口）</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/network/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//network 的统一出口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> NWRequest <span class=\"token keyword\">from</span> <span class=\"token string\">'./request'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这里是有传入特有拦截器的实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> nwRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NWRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_BASE_URL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  timeout<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_TIME_OUT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  interceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">requestInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在new实例时有传入拦截器的实例才有的拦截器:请求成功的拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function-variable function\">requestInterceptorCatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在new实例时有传入拦截器的实例才有的拦截器:请求失败的拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function-variable function\">responseInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在new实例时有传入拦截器的实例才有的拦截器:响应成功的拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function-variable function\">responseInterceptorCatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在new实例时有传入拦截器的实例才有的拦截器:响应失败的拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 这里是没有有传入特有拦截器的实例</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">const</span> nwRequest1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NWRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_BASE_URL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  timeout<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_TIME_OUT</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> nwRequest<span class=\"token punctuation\">,</span> nwRequest1 <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 src 的 network 下创建 request 文件夹，在里面创建 type.ts</p>\n<p>该文件是为了定义 ts 的限制类型接口 interface</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> AxiosRequestConfig<span class=\"token punctuation\">,</span> AxiosResponse <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NWRequestInterceptors<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> AxiosResponse<span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  requestInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> AxiosRequestConfig</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  requestInterceptorCatch<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  responseInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  responseInterceptorCatch<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NWRequestConfig<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> AxiosResponse<span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AxiosRequestConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  interceptors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> NWRequestInterceptors<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> NWRequestInterceptors<span class=\"token punctuation\">,</span> NWRequestConfig <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 src 的 network 下的 request 文件夹，在里面创建 index.ts</p>\n<p>该文件是 axios 主要封装类</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/network/request/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> AxiosInstance <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> NWRequestInterceptors<span class=\"token punctuation\">,</span> NWRequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./type'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 定义网络请求的封装类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NWRequest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  instance<span class=\"token operator\">:</span> AxiosInstance</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  interceptors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> NWRequestInterceptors</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 从 config 中取出的拦截器是对应的实例的拦截器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 只有 new 实例的时候有传入拦截器才有</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptorCatch</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptorCatch</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 添加所有的实例都有的拦截器</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'所有的实例都有的拦截器:请求成功拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'所有的实例都有的拦截器:请求失败拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'所有的实例都有的拦截器:响应成功拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'所有的实例都有的拦截器:响应失败拦截'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token comment\">// 这里的作用是，如果在调用请求的时候想添加额外单独的拦截器</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span><span class=\"token function\">requestInterceptor</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            res <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span><span class=\"token function\">responseInterceptor</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NWRequest</pre></td></tr></table></figure><h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<p>在 src 下的 main.ts 中</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> nwRequest <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./network'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 该请求包含公共拦截器、特有拦截器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nwRequest<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  url<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'哈哈哈'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    password<span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>nwRequest</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">'哈哈哈'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 该请求包含公共拦截器、独有拦截器</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// nwRequest1.request(&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//   url: '/login',</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//   method: 'POST',</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//   data: &#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//     name: ' 哈哈哈 ',</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//     password: '123456'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//   &#125;,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//   interceptors: &#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//     requestInterceptor: (config) => &#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//       console.log (' 独有拦截器：单独请求的 config')</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">//       return config</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//   &#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// &#125;)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 该请求质只包含公共拦截器</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// nwRequest1.request(&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//   url: '/login',</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">//   method: 'POST',</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">//   data: &#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">//     name: ' 哈哈哈 ',</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">//     password: '123456'</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">//   &#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// &#125;)</span></pre></td></tr></table></figure><h1 id=\"2删减版\"><a class=\"anchor\" href=\"#2删减版\">#</a> ②删减版</h1>\n<h1 id=\"说明-2\"><a class=\"anchor\" href=\"#说明-2\">#</a> 说明</h1>\n<p>该部分在上面完整的基础上删减去一些类型限制，完整版里面甚至连返回的数据类型都做了限制，比较难懂</p>\n<p>①公共拦截器（所有实例都有的拦截器）</p>\n<p>②特有拦截器（只有在 new 实例时传入的对象中传入了拦截器）</p>\n<h1 id=\"实现代码-2\"><a class=\"anchor\" href=\"#实现代码-2\">#</a> 实现代码</h1>\n<p>在用 cli 脚手架创建完成项目后</p>\n<p>在 src 下面创建 network 文件夹，在里面创建 index.ts</p>\n<p>该文件是拿到 axios 请求封装实例并导出使用（网络请求出口）</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/network/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//network 的统一出口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> NWRequest <span class=\"token keyword\">from</span> <span class=\"token string\">'./request'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这里是有传入特有拦截器的实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> nwRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NWRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_BASE_URL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  timeout<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VUE_APP_TIME_OUT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  interceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">requestInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">//console.log (' 在 new 实例时有传入拦截器的实例才有的拦截器：请求成功的拦截 ')</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 携带 token 的拦截</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">geiItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>token<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function-variable function\">requestInterceptorCatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">//console.log (' 在 new 实例时有传入拦截器的实例才有的拦截器：请求失败的拦截 ')</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function-variable function\">responseInterceptor</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">//console.log (' 在 new 实例时有传入拦截器的实例才有的拦截器：响应成功的拦截 ')</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function-variable function\">responseInterceptorCatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">//console.log (' 在 new 实例时有传入拦截器的实例才有的拦截器：响应失败的拦截 ')</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> nwRequest <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 src 的 network 下创建 request 文件夹，在里面创建 type.ts</p>\n<p>该文件是为了定义 ts 的限制类型接口 interface</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> AxiosRequestConfig<span class=\"token punctuation\">,</span> AxiosResponse <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NWRequestInterceptors<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> AxiosResponse<span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  requestInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> AxiosRequestConfig</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  requestInterceptorCatch<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  responseInterceptor<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  responseInterceptorCatch<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NWRequestConfig<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> AxiosResponse<span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AxiosRequestConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  interceptors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> NWRequestInterceptors<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> NWRequestInterceptors<span class=\"token punctuation\">,</span> NWRequestConfig <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 src 的 network 下的 request 文件夹，在里面创建 index.ts</p>\n<p>该文件是 axios 主要封装类</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> AxiosInstance <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> NWRequestInterceptors<span class=\"token punctuation\">,</span> NWRequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./type'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 定义网络请求的封装类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">NWRequest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  instance<span class=\"token operator\">:</span> AxiosInstance</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  interceptors<span class=\"token operator\">?</span><span class=\"token operator\">:</span> NWRequestInterceptors</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>interceptors</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 从 config 中取出的拦截器是对应的实例的拦截器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 只有 new 实例的时候有传入拦截器才有</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>requestInterceptorCatch</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token operator\">?.</span>responseInterceptorCatch</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 添加所有的实例都有的拦截器</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//console.log (' 所有的实例都有的拦截器：请求成功拦截 ')</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//console.log (' 所有的实例都有的拦截器：请求失败拦截 ')</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//console.log (' 所有的实例都有的拦截器：响应成功拦截 ')</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//console.log (' 所有的实例都有的拦截器：响应失败拦截 ')</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> NWRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token operator\">...</span>config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> NWRequest</pre></td></tr></table></figure><h1 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h1>\n<p>在 src 下的 main.ts 中</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> nwRequest <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./network'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>nwRequest</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">'哈哈哈'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Vue",
                "Vue3",
                "TypeScript",
                "Axios"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3Element%20plus%E7%9A%84Form%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84resetFields%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/",
            "url": "https://aaaa8880788.github.io/vue/Vue3Element%20plus%E7%9A%84Form%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84resetFields%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/",
            "title": "Vue3中Element Plus中Form表单resetFields方法失效",
            "date_published": "2024-03-02T02:52:21.668Z",
            "content_html": "<h1 id=\"element-plus的form表单中的resetfields失效问题\"><a class=\"anchor\" href=\"#element-plus的form表单中的resetfields失效问题\">#</a> Element plus 的 Form 表单中的 resetFields 失效问题</h1>\n<p>1.el-form 标签需要绑定 model</p>\n<p>2.el-form-item 标签需要绑定 prop（注意 el-form 里面的 model 里面的子项一定要与各个 prop 相对应）</p>\n<p>上面两个条件符合就不会失效了</p>\n",
            "tags": [
                "Vue",
                "Element Plus"
            ]
        },
        {
            "id": "https://aaaa8880788.github.io/vue/Vue3+Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "url": "https://aaaa8880788.github.io/vue/Vue3+Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "title": "Vue3+Element Plus组件二次封装",
            "date_published": "2024-03-02T02:52:21.667Z",
            "content_html": "<h1 id=\"element-plus组件二次封装\"><a class=\"anchor\" href=\"#element-plus组件二次封装\">#</a> Element Plus 组件二次封装</h1>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>直至今天，看了一下别人写的代码，才发现以前自己写的代码太垃圾，所以在这次做的一个后台项目中，采用他的代码风格，怎么说呢，复用性特别好，封装的很好，学到很多，所以记录一下思路，我认为这个封装思路是真的很棒，写第一个页面的时候可能会麻烦一些，但是后面只要是相似的页面，事半功倍，直接 CV 改配置项就好了，是真的顶，记录一下，学习一下，我这里用的是 vue3+ts</p>\n<h1 id=\"form表单的封装\"><a class=\"anchor\" href=\"#form表单的封装\">#</a> Form 表单的封装</h1>\n<h2 id=\"简述\"><a class=\"anchor\" href=\"#简述\">#</a> 简述</h2>\n<p>这里是 Form 表单部分，下面是完整的思路，最后有附上完整的代码，大佬可以直接看完整的代码就能看懂了，小白们跟着我的思路估计能看懂....</p>\n<h2 id=\"正常的使用\"><a class=\"anchor\" href=\"#正常的使用\">#</a> 正常的使用</h2>\n<p>如果我们正常使用组件库里面的组件会是这样的</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153055850.png\" alt=\"image-20220506153055850\" /></p>\n<p>代码如下</p>\n<p>role.vue 页面组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;el-form&gt;\n      &lt;el-form-item label=&quot;用户id&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入用户id&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;用户名&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;真实姓名&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入真实姓名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;用户名&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;电话号码&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入电话号码&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;用户状态&quot;&gt;\n        &lt;el-select placeholder=&quot;请选择用户状态&quot;&gt;\n          &lt;el-option label=&quot;禁用&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n          &lt;el-option label=&quot;启用&quot; value=&quot;1&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;创建时间&quot;&gt;\n        &lt;el-date-picker\n          startPlaceholder=&quot;开始时间&quot;\n          endPlaceholder=&quot;结束时间&quot;\n          type=&quot;daterange&quot;\n        &gt;&lt;/el-date-picker&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n\n</code></pre>\n<p>这时我们可以加点样式让他变得好看，并且布局也变一变就可以变成这样，当然样式布局可以自定义</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153107353.png\" alt=\"image-20220506153107353\" /></p>\n<p>代码如下</p>\n<p>role.vue 页面组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;el-form labelWidth=&quot;120px&quot;&gt;\n      &lt;el-row&gt;\n        &lt;el-col :span=&quot;8&quot;&gt;\n          &lt;el-form-item\n            label=&quot;用户id&quot;\n            :style=&quot;&#123;\n              padding: '10px 20px'\n            &#125;&quot;\n          &gt;\n            &lt;el-input placeholder=&quot;请输入用户id&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;8&quot;&gt;\n          &lt;el-form-item\n            label=&quot;用户名&quot;\n            :style=&quot;&#123;\n              padding: '10px 20px'\n            &#125;&quot;\n          &gt;\n            &lt;el-input placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;8&quot;&gt;\n          &lt;el-form-item\n            label=&quot;真实姓名&quot;\n            :style=&quot;&#123;\n              padding: '10px 20px'\n            &#125;&quot;\n          &gt;\n            &lt;el-input placeholder=&quot;请输入真实姓名&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;8&quot;&gt;\n          &lt;el-form-item\n            label=&quot;电话号码&quot;\n            :style=&quot;&#123;\n              padding: '10px 20px'\n            &#125;&quot;\n          &gt;\n            &lt;el-input placeholder=&quot;请输入电话号码&quot;&gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;8&quot;&gt;\n          &lt;el-form-item\n            label=&quot;用户状态&quot;\n            :style=&quot;&#123;\n              padding: '10px 20px'\n            &#125;&quot;\n          &gt;\n            &lt;el-select placeholder=&quot;请选择用户状态&quot;&gt;\n              &lt;el-option label=&quot;禁用&quot; value=&quot;0&quot;&gt;&lt;/el-option&gt;\n              &lt;el-option label=&quot;启用&quot; value=&quot;1&quot;&gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;8&quot;&gt;\n          &lt;el-form-item\n            label=&quot;创建时间&quot;\n            :style=&quot;&#123;\n              padding: '10px 20px'\n            &#125;&quot;\n          &gt;\n            &lt;el-date-picker\n              startPlaceholder=&quot;开始时间&quot;\n              endPlaceholder=&quot;结束时间&quot;\n              type=&quot;daterange&quot;\n            &gt;&lt;/el-date-picker&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/el-row&gt;\n    &lt;/el-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.el-form-item &#123;\n  margin-top: 18px;\n&#125;\n.el-select &#123;\n  width: 100%;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<h2 id=\"开始封装1\"><a class=\"anchor\" href=\"#开始封装1\">#</a> 开始封装①</h2>\n<p>这时我们就可以开始封装了，如果我们可以通过传配置项的方法来控制样式和 form 表单项的类型和个数的话，是不是变得很方便，下次直接传配置项用就好了？话不多说直接上图上代码</p>\n<p>可以看到效果一样，代码却简洁了，模板里面不会出现大量重复的代码了</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153117544.png\" alt=\"image-20220506153117544\" /></p>\n<p>role.vue 页面组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;el-form :labelWidth=&quot;searchFormConfig.labelWidth&quot;&gt;\n      &lt;el-row&gt;\n        &lt;template v-for=&quot;item in searchFormConfig.formItems&quot; :key=&quot;item.label&quot;&gt;\n          &lt;el-col :span=&quot;8&quot;&gt;\n            &lt;el-form-item\n              :label=&quot;item.label&quot;\n              :style=&quot;searchFormConfig.itemStyle&quot;\n            &gt;\n              &lt;template\n                v-if=&quot;item.type === 'input' || item.type === 'password'&quot;\n              &gt;\n                &lt;el-input \n                    :placeholder=&quot;item.placeholder&quot; \n                    :show-password=&quot;item.type === 'password'&quot;\n                &gt;&lt;/el-input&gt;\n              &lt;/template&gt;\n              &lt;template v-else-if=&quot;item.type === 'select'&quot;&gt;\n                &lt;el-select :placeholder=&quot;item.placeholder&quot;&gt;\n                  &lt;el-option\n                    v-for=&quot;option in item.options&quot;\n                    :key=&quot;option.value&quot;\n                    :label=&quot;option.label&quot;\n                    :value=&quot;option.value&quot;\n                  &gt;&lt;/el-option&gt;\n                &lt;/el-select&gt;\n              &lt;/template&gt;\n              &lt;template v-else&gt;\n                &lt;el-date-picker v-bind=&quot;item.otherOptions&quot;&gt;&lt;/el-date-picker&gt;\n              &lt;/template&gt;\n            &lt;/el-form-item&gt;\n          &lt;/el-col&gt;\n        &lt;/template&gt;\n      &lt;/el-row&gt;\n    &lt;/el-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n// 定义表单配置项\nconst searchFormConfig = &#123;\n  formItems: [\n    &#123;\n      type: 'input',\n      label: '用户id',\n      placeholder: '请输入用户id'\n    &#125;,\n    &#123;\n      type: 'input',\n      label: '用户名',\n      placeholder: '请输入用户名'\n    &#125;,\n    &#123;\n      type: 'input',\n      label: '真实姓名',\n      placeholder: '请输入真实姓名'\n    &#125;,\n    &#123;\n      type: 'input',\n      label: '电话号码',\n      placeholder: '请输入电话号码'\n    &#125;,\n    &#123;\n      type: 'select',\n      label: '用户状态',\n      placeholder: '请选择用户状态',\n      options: [\n        &#123;\n          label: '禁用',\n          value: 0\n        &#125;,\n        &#123;\n          label: '启用',\n          value: 1\n        &#125;\n      ]\n    &#125;,\n    &#123;\n      type: 'datepicker',\n      label: '创建时间',\n      otherOptions: &#123;\n        startPlaceholder: '开始时间',\n        endPlaceholder: '结束时间',\n        type: 'daterange',\n        'unlink-panels': true\n      &#125;\n    &#125;\n  ],\n  labelWidth: '120px',\n  itemStyle: &#123;\n    padding: '10px 20px'\n  &#125;,\n  itemColLayout: &#123;\n    span: 8\n  &#125;\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.el-form-item &#123;\n  margin-top: 18px;\n&#125;\n.el-select &#123;\n  width: 100%;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<h2 id=\"开始封装2\"><a class=\"anchor\" href=\"#开始封装2\">#</a> 开始封装②</h2>\n<p>这时它复用的锥形已经有了，我们可以将配置项抽出去，并给它一些类型限制，把这部分使用表单的代码抽出去，封装成 form 组件，这样之后我们在用的时候，直接用这个组件然后给它传配置项就可以了</p>\n<p>1. 配置项类型限制文件（不用 ts 的话就没有，不想限制全部给 any 类型随意，我这里是为了让代码严谨一丢丢哈哈）</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IFormType</span> <span class=\"token operator\">=</span> <span class=\"token string\">'input'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'password'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'select'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'datepicker'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFormOption</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFormItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  type<span class=\"token operator\">:</span> IFormType <span class=\"token comment\">// 输入框类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// 输入框标题</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  placeholder<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token comment\">// 输入框默认显示内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 针对 select</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> IFormOption<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 选择器的可选子选项</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 针对特殊属性</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  otherOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IForm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  formItems<span class=\"token operator\">:</span> IFormItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  labelWidth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  itemStyle<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  itemColLayout<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 配置项文件</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> IForm <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/base-ui/form/type'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> searchFormConfig<span class=\"token operator\">:</span> IForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  formItems<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入用户id'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入用户名'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'真实姓名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入真实姓名'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'电话号码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入电话号码'</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'select'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'用户状态'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请选择用户状态'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'启用'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'禁用'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'datepicker'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      otherOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        startPlaceholder<span class=\"token operator\">:</span> <span class=\"token string\">'开始时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        endPlaceholder<span class=\"token operator\">:</span> <span class=\"token string\">'结束时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'daterange'</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  labelWidth<span class=\"token operator\">:</span> <span class=\"token string\">'120px'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  itemColLayout<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    span<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  itemStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    padding<span class=\"token operator\">:</span> <span class=\"token string\">'10px 20px'</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3.form 表单文件</p>\n<p>注意：在这里，我将 labelWidth，itemColLayout，itemStyle 设置了默认值，所以我上面的那些样式配置项可以不传，默认就是我设置的那些值，如果需要别的样式可以传入修改，不要样式可以传个空进去，这里我还加了两个插槽，增加可扩展性</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;header&quot;&gt;\n    &lt;slot name=&quot;header&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n  &lt;el-form ref=&quot;ruleFormRef&quot; :labelWidth=&quot;labelWidth&quot;&gt;\n    &lt;el-row&gt;\n      &lt;template v-for=&quot;item in formItems&quot; :key=&quot;item.label&quot;&gt;\n        &lt;el-col v-bind=&quot;itemColLayout&quot;&gt;\n          &lt;el-form-item\n            v-if=&quot;!item.isHidden&quot;\n            :label=&quot;item.label&quot;\n            :style=&quot;itemStyle&quot;\n            :prop=&quot;item.field&quot;\n          &gt;\n            &lt;template v-if=&quot;item.type === 'input' || item.type === 'password'&quot;&gt;\n              &lt;el-input\n                :placeholder=&quot;item.placeholder&quot;\n                :show-password=&quot;item.type === 'password'&quot;\n              &gt;&lt;/el-input&gt;\n            &lt;/template&gt;\n            &lt;template v-else-if=&quot;item.type === 'select'&quot;&gt;\n              &lt;el-select :placeholder=&quot;item.placeholder&quot;&gt;\n                &lt;el-option\n                  v-for=&quot;option in item.options&quot;\n                  :key=&quot;option.label&quot;\n                  :label=&quot;option.label&quot;\n                  :value=&quot;option.value&quot;\n                &gt;&lt;/el-option&gt;\n              &lt;/el-select&gt;\n            &lt;/template&gt;\n            &lt;template v-if=&quot;item.type === 'datepicker'&quot;&gt;\n              &lt;el-date-picker v-bind=&quot;item.otherOptions&quot;&gt;&lt;/el-date-picker&gt;\n            &lt;/template&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/template&gt;\n    &lt;/el-row&gt;\n  &lt;/el-form&gt;\n  &lt;div class=&quot;footer&quot;&gt;\n    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; defineProps, withDefaults &#125; from 'vue'\nimport &#123; IFormItem &#125; from './type'\ninterface Prop &#123;\n  formItems: IFormItem[] // 表单配置项\n  labelWidth?: string // 每个表单标题宽度\n  itemStyle?: object // 每个表单样式\n  itemColLayout?: object // 表单布局\n  isHidden?: boolean // 该输入框是否隐藏\n&#125;\nconst props = withDefaults(defineProps&lt;Prop&gt;(), &#123;\n  labelWidth: '120px',\n  itemColLayout: () =&gt; (&#123;\n    xl: 6, // &gt;=1920px\n    lg: 8, // &gt;=1200px\n    md: 12, // &gt;=992px\n    sm: 24, // &gt;=768px\n    xs: 24 // &lt;768px\n  &#125;),\n  itemStyle: () =&gt; (&#123;\n    padding: '10px 20px'\n  &#125;)\n&#125;)\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.el-form-item &#123;\n  margin-top: 18px;\n&#125;\n.el-select &#123;\n  width: 100%;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p>4.role.vue 页面组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;form-test v-bind=&quot;searchFormConfig&quot;&gt;&lt;/form-test&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport formTest from '@/base-ui/form/form-test.vue'\nimport &#123; searchFormConfig &#125; from './config/search-config-test'\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n\n</code></pre>\n<p>这时已经初步封装好了，我们可以使用一下看效果，我们可以看到样式跟之前完全一样，但是页面的代码量就那么点，要用的话直接用我们封装好的 form 组件然后传入配置项就出来了</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153130565.png\" alt=\"image-20220506153130565\" /></p>\n<p>它的可扩展性也是很强的，比如：</p>\n<p>这里我们把样式配置项全部传空值，然后配置项也传一个，它又变成原来最丑的样子了，证明我们是可以随意更改它的样式和布局，只需要通过传入配置项更改就可以了，方便</p>\n<p>配置项文件</p>\n<pre><code>import &#123; IForm &#125; from '@/base-ui/form/type'\nexport const searchFormConfig: IForm = &#123;\n  formItems: [\n    &#123;\n      field: 'id',\n      type: 'input',\n      label: '用户id',\n      placeholder: '请输入用户id'\n    &#125;\n  ],\n  labelWidth: '',\n  itemColLayout: &#123;&#125;,\n  itemStyle: &#123;&#125;\n&#125;\n\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153141995.png\" alt=\"image-20220506153141995\" /></p>\n<p>其实到这里还没结束，因为这时的表单还输入不了东西，因为我们根本就没给它的输入框绑定值，所以我们要在配置项传入多一个 field 字段，它可以作为输入框绑定的值</p>\n<h2 id=\"开始封装3\"><a class=\"anchor\" href=\"#开始封装3\">#</a> 开始封装③</h2>\n<p>这里仅仅是给配置项中增加 field 字段（注意如果用了 ts 的还要去 type 文件里面给我们定义的 IFormItem 接口添加一个 field 字段）</p>\n<p>配置项文件</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> IForm <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/base-ui/form/type'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> searchFormConfig<span class=\"token operator\">:</span> IForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  formItems<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      field<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入用户id'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      field<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入用户名'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      field<span class=\"token operator\">:</span> <span class=\"token string\">'realname'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'真实姓名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入真实姓名'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      field<span class=\"token operator\">:</span> <span class=\"token string\">'cellphone'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'电话号码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请输入电话号码'</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      field<span class=\"token operator\">:</span> <span class=\"token string\">'enable'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'select'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'用户状态'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      placeholder<span class=\"token operator\">:</span> <span class=\"token string\">'请选择用户状态'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      options<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'启用'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'禁用'</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      field<span class=\"token operator\">:</span> <span class=\"token string\">'createAt'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">'datepicker'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      otherOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        startPlaceholder<span class=\"token operator\">:</span> <span class=\"token string\">'开始时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        endPlaceholder<span class=\"token operator\">:</span> <span class=\"token string\">'结束时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'daterange'</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  labelWidth<span class=\"token operator\">:</span> <span class=\"token string\">'120px'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  itemColLayout<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    span<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  itemStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    padding<span class=\"token operator\">:</span> <span class=\"token string\">'10px 20px'</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为传入了 fied 字段，所以我们要收集所有的 field 字段，组成 formData 数据，传入表单组件，formData 里面的每个子项分别作为每个输入框绑定的值</p>\n<p>注意：这里有两个难点</p>\n<p>难点一：</p>\n<p>我们传进去的数据在里面是要做修改传出来的，而 vue 的原则是单项数据流传输，我们不能直接将数据传进去（其实事实可以这样做，但是违背了单向数据流传输原则，我们尽量不违背哈），所以我们采用 v-model 的方式将 formData 传入 form 组件，这样做的话就是双向判定了，不算违背嘿嘿</p>\n<p>难点二：因为我们传进去的 formData 的数据，并不是在 form 组件里面用的，而是要绑定到 form 组件里面的 element puls 的输入框里面的，所以我们在 form 组件里面接收到 formData 数据，然后在把 formData 它的各个子项 v-model 绑定到输入框里面，但是这样会报错，不能直接用 v-model, 这里就需要知道 v-model 是怎么实现的了，我们在这里是直接把接收到的 formData 数据绑定到输入框里面的，在 form 组件并没有定义 formData 这个变量，所以不能直接用 v-model 的方法，这了可能有点懵，举个例子</p>\n<p>（比如你将一个值 test 用 v-model 传入一个 input 的框，你输入框输入数据，你的 test 是会同步改变，也就是说，v-model 会把你修改后的值传出来赋值给你的 test，而在这里，我们将 formData 用 v-model 绑定到输入框，输入框值改变，正常来说它会将修改后的值赋值给我们传进去的 formData，但是我们不能让它直接赋值给我们的 formData，因为我们的 formData 也是从别的组件传进来的，所以我们要把修改后的值再次传出去到传进来 formData 数据的那个组件中，而不是直接就赋值，这时我们就要用到 v-model 的原始写法了，其实 v-model 是个语法糖来的）</p>\n<p>form.vue 组件</p>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;header&quot;&gt;\n    &lt;slot name=&quot;header&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n  &lt;el-form ref=&quot;ruleFormRef&quot; :labelWidth=&quot;labelWidth&quot;&gt;\n    &lt;el-row&gt;\n      &lt;template v-for=&quot;item in formItems&quot; :key=&quot;item.label&quot;&gt;\n        &lt;el-col v-bind=&quot;itemColLayout&quot;&gt;\n          &lt;el-form-item\n            v-if=&quot;!item.isHidden&quot;\n            :label=&quot;item.label&quot;\n            :style=&quot;itemStyle&quot;\n          &gt;\n            &lt;template v-if=&quot;item.type === 'input' || item.type === 'password'&quot;&gt;\n              &lt;el-input\n                :placeholder=&quot;item.placeholder&quot;\n                :show-password=&quot;item.type === 'password'&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n              &gt;&lt;/el-input&gt;\n            &lt;/template&gt;\n            &lt;template v-else-if=&quot;item.type === 'select'&quot;&gt;\n              &lt;el-select\n                :placeholder=&quot;item.placeholder&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n              &gt;\n                &lt;el-option\n                  v-for=&quot;option in item.options&quot;\n                  :key=&quot;option.label&quot;\n                  :label=&quot;option.label&quot;\n                  :value=&quot;option.value&quot;\n                &gt;&lt;/el-option&gt;\n              &lt;/el-select&gt;\n            &lt;/template&gt;\n            &lt;template v-if=&quot;item.type === 'datepicker'&quot;&gt;\n              &lt;el-date-picker\n                v-bind=&quot;item.otherOptions&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n              &gt;&lt;/el-date-picker&gt;\n            &lt;/template&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/template&gt;\n    &lt;/el-row&gt;\n  &lt;/el-form&gt;\n  &lt;div class=&quot;footer&quot;&gt;\n    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; defineProps, withDefaults, defineEmits &#125; from 'vue'\nimport &#123; IFormItem &#125; from './type'\ninterface Prop &#123;\n  formItems: IFormItem[] // 表单配置项\n  labelWidth?: string // 每个表单标题宽度\n  itemStyle?: object // 每个表单样式\n  itemColLayout?: object // 表单布局\n  isHidden?: boolean // 该输入框是否隐藏\n  modelValue: object //绑定表单的每个数据\n&#125;\nconst props = withDefaults(defineProps&lt;Prop&gt;(), &#123;\n  labelWidth: '120px',\n  itemColLayout: () =&gt; (&#123;\n    xl: 6, // &gt;=1920px\n    lg: 8, // &gt;=1200px\n    md: 12, // &gt;=992px\n    sm: 24, // &gt;=768px\n    xs: 24 // &lt;768px\n  &#125;),\n  itemStyle: () =&gt; (&#123;\n    padding: '10px 20px'\n  &#125;)\n&#125;)\nconst emit = defineEmits&lt;&#123;\n  (e: 'update:modelValue', value: any): void\n&#125;&gt;()\n\n// 输入框值改变该函数都会触发，将改变后的值传出去\nconst valueChange = (value: any, field: string) =&gt; &#123;\n  emit('update:modelValue', &#123; ...props.modelValue, [field]: value &#125;)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.el-form-item &#123;\n  margin-top: 18px;\n&#125;\n.el-select &#123;\n  width: 100%;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p>role.vue 页面组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;form-test v-bind=&quot;searchFormConfig&quot; v-model=&quot;formData&quot;&gt;&lt;/form-test&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport formTest from '@/base-ui/form/form-test.vue'\nimport &#123; searchFormConfig &#125; from './config/search-config-test'\nimport &#123; ref &#125; from 'vue'\n// 在这里取出所有的field字段组成formData数据\nconst formItems = searchFormConfig.formItems ?? []\n\nlet formDataInit = &#123;&#125;\nformItems.map((item) =&gt; &#123;\n  formDataInit[item.field] = ''\n&#125;)\nlet formData = ref(formDataInit)\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153156166.png\" alt=\"image-20220506153156166\" /></p>\n<p>这时我们发现它可以拿到数据了，很 nice，其实这差不多已经算封装好了，可以通过配置项修改里面的东西了，同时也可以拿到数据，但是我这个项目不止于此，我这其实要做表单的查询的，所以我要改装一下变成这样</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153210281.png\" alt=\"image-20220506153210281\" /></p>\n<p>其实就是加了两个插槽和两个方法，我这里要实现功能就是点击重置按钮，它会重置表单数据，点击搜索按钮就可以拿到表单数据，这样我们就可以用我们拿到的表单数据去进行我们的操作拉，所以上代码</p>\n<p>role.vue 组件</p>\n<p>该部分我们传入了两个 template，一个是标题：高级检索，一个是两个按钮</p>\n<p>这里要重置按钮重置表单数据，取到表单的 ref 调用 resetFields 方法就好了，然后点击搜索按钮可以打印出 formData 数据，然后我们就可以利用该数据去做我们想要做的操作了，例如查询列表数据等</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;form-test v-bind=&quot;searchFormConfig&quot; v-model=&quot;formData&quot; ref=&quot;formTestRef&quot;&gt;\n      &lt;template #header&gt;\n        &lt;div class=&quot;header&quot;&gt;\n          &lt;h1&gt;高级检索&lt;/h1&gt;\n        &lt;/div&gt;\n      &lt;/template&gt;\n      &lt;template #footer&gt;\n        &lt;div class=&quot;footer&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; :icon=&quot;Refresh&quot; @click=&quot;resetBtnClick&quot;\n            &gt;重置&lt;/el-button\n          &gt;\n          &lt;el-button type=&quot;primary&quot; :icon=&quot;Search&quot; @click=&quot;searchBtnClick&quot;\n            &gt;搜索&lt;/el-button\n          &gt;\n        &lt;/div&gt;\n      &lt;/template&gt;\n    &lt;/form-test&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport formTest from '@/base-ui/form/form-test.vue'\nimport &#123; searchFormConfig &#125; from './config/search-config-test'\nimport &#123; ref &#125; from 'vue'\nimport &#123; Search, Refresh &#125; from '@element-plus/icons-vue'\n// 在这里取出所有的field字段组成formData数据\nconst formItems = searchFormConfig.formItems ?? []\n\nlet formDataInit = &#123;&#125;\nformItems.map((item) =&gt; &#123;\n  formDataInit[item.field] = ''\n&#125;)\nlet formData = ref(formDataInit)\n\nconst formTestRef = ref&lt;InstanceType&lt;typeof formTest&gt;&gt;()\n\n// 重置点击\nconst resetBtnClick = () =&gt; &#123;\n  formTestRef.value?.resetForm()\n&#125;\n// 搜索点击\nconst searchBtnClick = () =&gt; &#123;\n  // 这里需要遍历搜索配置项，配置项里可以传dataType，要求数据返回什么类型的数据\n  let queryInfo = &#123; ...formData.value &#125;\n  searchFormConfig.formItems.map((item: any) =&gt; &#123;\n    if (item.dataType === 'number' &amp;&amp; queryInfo[item.field] !== '') &#123;\n      queryInfo[item.field] = Number(queryInfo[item.field])\n    &#125;\n  &#125;)\n  // 清空queryInfo中没有值的属性\n  for (const i in queryInfo) &#123;\n    if (queryInfo[i] === '') &#123;\n      delete queryInfo[i]\n    &#125;\n  &#125;\n  console.log(queryInfo)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.header &#123;\n  padding-top: 20px;\n&#125;\n.footer &#123;\n  text-align: right;\n  padding: 0 50px 20px 0;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p>form.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;header&quot;&gt;\n    &lt;slot name=&quot;header&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n  &lt;el-form ref=&quot;ruleFormRef&quot; :labelWidth=&quot;labelWidth&quot; :model=&quot;modelValue&quot;&gt;\n    &lt;el-row&gt;\n      &lt;template v-for=&quot;item in formItems&quot; :key=&quot;item.label&quot;&gt;\n        &lt;el-col v-bind=&quot;itemColLayout&quot;&gt;\n          &lt;el-form-item\n            v-if=&quot;!item.isHidden&quot;\n            :label=&quot;item.label&quot;\n            :style=&quot;itemStyle&quot;\n            :prop=&quot;item.field&quot;\n          &gt;\n            &lt;template v-if=&quot;item.type === 'input' || item.type === 'password'&quot;&gt;\n              &lt;el-input\n                :placeholder=&quot;item.placeholder&quot;\n                :show-password=&quot;item.type === 'password'&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n              &gt;&lt;/el-input&gt;\n            &lt;/template&gt;\n            &lt;template v-else-if=&quot;item.type === 'select'&quot;&gt;\n              &lt;el-select\n                :placeholder=&quot;item.placeholder&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n              &gt;\n                &lt;el-option\n                  v-for=&quot;option in item.options&quot;\n                  :key=&quot;option.label&quot;\n                  :label=&quot;option.label&quot;\n                  :value=&quot;option.value&quot;\n                &gt;&lt;/el-option&gt;\n              &lt;/el-select&gt;\n            &lt;/template&gt;\n            &lt;template v-if=&quot;item.type === 'datepicker'&quot;&gt;\n              &lt;el-date-picker\n                v-bind=&quot;item.otherOptions&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n              &gt;&lt;/el-date-picker&gt;\n            &lt;/template&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/template&gt;\n    &lt;/el-row&gt;\n  &lt;/el-form&gt;\n  &lt;div class=&quot;footer&quot;&gt;\n    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; defineProps, withDefaults, defineEmits, ref, defineExpose &#125; from 'vue'\nimport &#123; IFormItem &#125; from './type'\nimport type &#123; FormInstance &#125; from 'element-plus'\n\ninterface Prop &#123;\n  formItems: IFormItem[] // 表单配置项\n  labelWidth?: string // 每个表单标题宽度\n  itemStyle?: object // 每个表单样式\n  itemColLayout?: object // 表单布局\n  isHidden?: boolean // 该输入框是否隐藏\n  modelValue: object //绑定表单的每个数据\n&#125;\nconst props = withDefaults(defineProps&lt;Prop&gt;(), &#123;\n  labelWidth: '120px',\n  itemColLayout: () =&gt; (&#123;\n    xl: 6, // &gt;=1920px\n    lg: 8, // &gt;=1200px\n    md: 12, // &gt;=992px\n    sm: 24, // &gt;=768px\n    xs: 24 // &lt;768px\n  &#125;),\n  itemStyle: () =&gt; (&#123;\n    padding: '10px 20px'\n  &#125;)\n&#125;)\nconst emit = defineEmits&lt;&#123;\n  (e: 'update:modelValue', value: any): void\n&#125;&gt;()\nconst ruleFormRef = ref&lt;FormInstance&gt;()\n\n// 输入框值改变该函数都会触发，将改变后的值传出去\nconst valueChange = (value: any, field: string) =&gt; &#123;\n  emit('update:modelValue', &#123; ...props.modelValue, [field]: value &#125;)\n&#125;\n\n// 表单重置方法\nconst resetForm = () =&gt; &#123;\n  ruleFormRef.value?.resetFields()\n&#125;\ndefineExpose(&#123;\n  resetForm\n&#125;)\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.el-form-item &#123;\n  margin-top: 18px;\n&#125;\n.el-select &#123;\n  width: 100%;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p>1. 该组件要添加表单重置的方法</p>\n<p>2. 把 formData 的值绑定到 form 表单上：model=‘formData’</p>\n<p>3. 给 el-form-item 加上 prop 属性</p>\n<p>2，3 如果不加上的话，表单内置的重置表单方法会失效</p>\n<pre><code>\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153221867.png\" alt=\"image-20220506153221867\" /></p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153231986.png\" alt=\"image-20220506153231986\" /></p>\n<p>这时我们已经封装完成了，但是我们可以发现，我们的 role 组件东西有点多了，如果我们其他组件比如，user 组件等，都要用这样类似的布局，我们这时就又要把这一堆代码给 cv 一遍，所以我们有可以把 role 里面这堆东西再封装一次</p>\n<h2 id=\"开始封装4\"><a class=\"anchor\" href=\"#开始封装4\">#</a> 开始封装④</h2>\n<p>page-search.vue 组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;Bu-form v-bind=&quot;searchFormConfig&quot; v-model=&quot;formData&quot; ref=&quot;BuFormRef&quot;&gt;\n    &lt;template #header&gt;\n      &lt;div class=&quot;header&quot;&gt;\n        &lt;h1&gt;高级检索&lt;/h1&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n    &lt;template #footer&gt;\n      &lt;div class=&quot;footer&quot;&gt;\n        &lt;el-button type=&quot;primary&quot; :icon=&quot;Refresh&quot; @click=&quot;resetBtnClick&quot;\n          &gt;重置&lt;/el-button\n        &gt;\n        &lt;el-button type=&quot;primary&quot; :icon=&quot;Search&quot; @click=&quot;searchBtnClick&quot;\n          &gt;搜索&lt;/el-button\n        &gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/Bu-form&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; Search, Refresh &#125; from '@element-plus/icons-vue'\nimport BuForm from '@/base-ui/form/form-test.vue'\nimport &#123; defineProps, ref, defineEmits &#125; from 'vue'\nimport &#123; useStore &#125; from '@/store'\ninterface Prop &#123;\n  searchFormConfig: any\n&#125;\nconst props = defineProps&lt;Prop&gt;()\nconst emit = defineEmits&lt;&#123;\n  (e: 'resetBtnClick'): void\n  (e: 'searchBtnClick', formData: object): void\n&#125;&gt;()\nconst store = useStore()\nconst BuFormRef = ref&lt;InstanceType&lt;typeof BuForm&gt;&gt;()\n\nconst formItems = props.searchFormConfig?.formItems ?? []\n\nlet formDataInit = &#123;&#125;\nformItems.map((item: any) =&gt; &#123;\n  formDataInit[item.field] = ''\n&#125;)\nlet formData = ref(formDataInit)\n\n// 重置点击\nconst resetBtnClick = () =&gt; &#123;\n  BuFormRef.value?.resetForm()\n  emit('resetBtnClick')\n&#125;\n// 搜索点击\nconst searchBtnClick = () =&gt; &#123;\n  // 这里需要遍历搜索配置项，配置项里可以传dataType，要求数据返回什么类型的数据\n  let queryInfo = &#123; ...formData.value &#125;\n  props.searchFormConfig.formItems.map((item: any) =&gt; &#123;\n    if (item.dataType === 'number' &amp;&amp; queryInfo[item.field] !== '') &#123;\n      queryInfo[item.field] = Number(queryInfo[item.field])\n    &#125;\n  &#125;)\n  // 清空queryInfo中没有值的属性\n  for (const i in queryInfo) &#123;\n    if (queryInfo[i] === '') &#123;\n      delete queryInfo[i]\n    &#125;\n  &#125;\n  emit('searchBtnClick', queryInfo)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.header &#123;\n  padding-top: 20px;\n&#125;\n.footer &#123;\n  text-align: right;\n  padding: 0 50px 20px 0;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p>role.vue 组件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;page-search-test\n      :searchFormConfig=&quot;searchFormConfig&quot;\n      @resetBtnClick=&quot;handlerReset&quot;\n      @searchBtnClick=&quot;handlerSearch&quot;\n    &gt;&lt;/page-search-test&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; searchFormConfig &#125; from './config/search-config-test'\nimport pageSearchTest from '@/components/page-search/page-search-test.vue'\nconst handlerReset = () =&gt; &#123;\n  console.log('点击了重置按钮')\n&#125;\nconst handlerSearch = (queryInfo: any) =&gt; &#123;\n  console.log('点击了搜索按钮，值为:', queryInfo)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n\n</code></pre>\n<p>效果图</p>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153242943.png\" alt=\"image-20220506153242943\" /></p>\n<p>这里我们就可以体会到了，一样的效果，role 里面的代码是这么的少，只需要传入配置项就可以搞出这个表单，而且还能拿到表单数据，而且重点是，下个页面再用这个布局，直接用 page-search 组件就可以了，只需要传入不同的配置项，如果不同布局，再封装另一个 page-search 就是了，但是这是后台耶？搞那么华丽呼哨？不就是搜索表单，展示表单么</p>\n<p>下面附上完整全部封装代码</p>\n<h2 id=\"完整封装代码5\"><a class=\"anchor\" href=\"#完整封装代码5\">#</a> 完整封装代码⑤</h2>\n<h3 id=\"配置项类型文件\"><a class=\"anchor\" href=\"#配置项类型文件\">#</a> 配置项类型文件</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// type.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">IFormType</span> <span class=\"token operator\">=</span> <span class=\"token string\">'input'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'password'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'select'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'datepicker'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFormOption</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IFormItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  field<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// 字段名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  type<span class=\"token operator\">:</span> IFormType <span class=\"token comment\">// 输入框类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  dataType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// 输入框返回数据类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token comment\">// 输入框标题</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  rules<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 输入框验证规则</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  placeholder<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token comment\">// 输入框默认显示内容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 针对 select</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> IFormOption<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 选择器的可选子选项</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 针对特殊属性</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  otherOptions<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 该行是否隐藏</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  isHidden<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IForm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  formItems<span class=\"token operator\">:</span> IFormItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  labelWidth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  itemStyle<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  itemColLayout<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"配置项文件\"><a class=\"anchor\" href=\"#配置项文件\">#</a> 配置项文件</h3>\n<pre><code>import &#123; IForm &#125; from '@/base-ui/form/type'\nexport const searchFormConfig: IForm = &#123;\n  formItems: [\n    &#123;\n      field: 'id',\n      type: 'input',\n      label: '用户id',\n      placeholder: '请输入用户id'\n    &#125;,\n    &#123;\n      field: 'name',\n      type: 'input',\n      label: '用户名',\n      placeholder: '请输入用户名'\n    &#125;,\n    &#123;\n      field: 'realname',\n      type: 'input',\n      label: '真实姓名',\n      placeholder: '请输入真实姓名'\n    &#125;,\n    &#123;\n      field: 'cellphone',\n      type: 'input',\n      label: '电话号码',\n      placeholder: '请输入电话号码'\n    &#125;,\n    &#123;\n      field: 'enable',\n      type: 'select',\n      label: '用户状态',\n      placeholder: '请选择用户状态',\n      options: [\n        &#123; label: '启用', value: 1 &#125;,\n        &#123; label: '禁用', value: 0 &#125;\n      ]\n    &#125;,\n    &#123;\n      field: 'createAt',\n      type: 'datepicker',\n      label: '创建时间',\n      otherOptions: &#123;\n        startPlaceholder: '开始时间',\n        endPlaceholder: '结束时间',\n        type: 'daterange'\n      &#125;\n    &#125;\n  ]\n&#125;\n\n</code></pre>\n<h3 id=\"form表单组件文件\"><a class=\"anchor\" href=\"#form表单组件文件\">#</a> form 表单组件文件</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;header&quot;&gt;\n    &lt;slot name=&quot;header&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n  &lt;el-form\n    :label-width=&quot;labelWidth&quot;\n    ref=&quot;ruleFormRef&quot;\n    status-icon\n    :model=&quot;modelValue&quot;\n  &gt;\n    &lt;el-row&gt;\n      &lt;template v-for=&quot;item in formItems&quot; :key=&quot;item.label&quot;&gt;\n        &lt;el-col v-bind=&quot;itemColLayout&quot;&gt;\n          &lt;el-form-item\n            v-if=&quot;!item.isHidden&quot;\n            :label=&quot;item.label&quot;\n            :rules=&quot;item.rules&quot;\n            :style=&quot;itemStyle&quot;\n            :prop=&quot;item.field&quot;\n          &gt;\n            &lt;template v-if=&quot;item.type === 'input' || item.type === 'password'&quot;&gt;\n              &lt;el-input\n                :placeholder=&quot;item.placeholder&quot;\n                :show-password=&quot;item.type === 'password'&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n                clearable\n              /&gt;\n            &lt;/template&gt;\n            &lt;template v-else-if=&quot;item.type === 'select'&quot;&gt;\n              &lt;el-select\n                :placeholder=&quot;item.placeholder&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n                style=&quot;width: 100%&quot;\n                clearable\n              &gt;\n                &lt;el-option\n                  v-for=&quot;option in item.options&quot;\n                  :key=&quot;option.value&quot;\n                  :value=&quot;option.value&quot;\n                  :label=&quot;option.label&quot;\n                &gt;\n                &lt;/el-option&gt;\n              &lt;/el-select&gt;\n            &lt;/template&gt;\n            &lt;template v-else-if=&quot;item.type === 'datepicker'&quot;&gt;\n              &lt;el-date-picker\n                unlink-panels\n                v-bind=&quot;item.otherOptions&quot;\n                :model-value=&quot;modelValue[`$&#123;item.field&#125;`]&quot;\n                @update:modelValue=&quot;valueChange($event, item.field)&quot;\n              &gt;&lt;/el-date-picker&gt;\n            &lt;/template&gt;\n          &lt;/el-form-item&gt;\n        &lt;/el-col&gt;\n      &lt;/template&gt;\n    &lt;/el-row&gt;\n  &lt;/el-form&gt;\n  &lt;div class=&quot;footer&quot;&gt;\n    &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; IFormItem &#125; from './type'\nimport &#123; defineProps, withDefaults, ref, defineEmits, defineExpose &#125; from 'vue'\nimport type &#123; FormInstance &#125; from 'element-plus'\n\n// 定义属性\ninterface Props &#123;\n  formItems: IFormItem[] // 表单配置项\n  labelWidth?: string // 每个表单标题宽度\n  itemStyle?: object // 每个表单样式\n  itemColLayout?: object // 表单布局\n  modelValue: object //绑定表单的每个数据\n  isHidden?: boolean\n&#125;\nconst props = withDefaults(defineProps&lt;Props&gt;(), &#123;\n  formItems: () =&gt; [],\n  labelWidth: '120px',\n  itemStyle: () =&gt; (&#123; padding: '10px 20px' &#125;),\n  itemColLayout: () =&gt; (&#123;\n    xl: 6, // &gt;=1920px\n    lg: 8, // &gt;=1200px\n    md: 12, // &gt;=992px\n    sm: 24, // &gt;=768px\n    xs: 24 // &lt;768px\n  &#125;)\n&#125;)\nconst emit = defineEmits&lt;&#123;\n  (e: 'update:modelValue', value: any): void\n&#125;&gt;()\n\nconst ruleFormRef = ref&lt;FormInstance&gt;()\n\n// 定义方法\nconst valueChange = (value: any, field: string) =&gt; &#123;\n  emit('update:modelValue', &#123; ...props.modelValue, [field]: value &#125;)\n&#125;\n\n// 表单重置方法\nconst resetForm = () =&gt; &#123;\n  ruleFormRef.value?.resetFields()\n&#125;\ndefineExpose(&#123;\n  resetForm\n&#125;)\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.el-form-item &#123;\n  margin-top: 18px;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<h3 id=\"page-search组件文件\"><a class=\"anchor\" href=\"#page-search组件文件\">#</a> page-search 组件文件</h3>\n<pre><code>&lt;template&gt;\n  &lt;div class=&quot;page-search&quot;&gt;\n    &lt;Bu-form v-bind=&quot;searchFormConfig&quot; v-model=&quot;formData&quot; ref=&quot;BuFormRef&quot;&gt;\n      &lt;template #header&gt;\n        &lt;div class=&quot;header&quot;&gt;\n          &lt;h1&gt;高级检索&lt;/h1&gt;\n        &lt;/div&gt;\n      &lt;/template&gt;\n      &lt;template #footer&gt;\n        &lt;div class=&quot;footer&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; :icon=&quot;Refresh&quot; @click=&quot;resetClick&quot;\n            &gt;重置&lt;/el-button\n          &gt;\n          &lt;el-button type=&quot;primary&quot; :icon=&quot;Search&quot; @click=&quot;searchClick&quot;\n            &gt;搜索&lt;/el-button\n          &gt;\n        &lt;/div&gt;\n      &lt;/template&gt;\n    &lt;/Bu-form&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; useStore &#125; from '@/store'\nimport BuForm from '@/base-ui/form/form.vue'\nimport &#123; Search, Refresh &#125; from '@element-plus/icons-vue'\nimport &#123; ref, defineProps, defineEmits &#125; from 'vue'\nimport &#123; IForm &#125; from '@/base-ui/form/type'\n\n// 定义属性\ninterface Props &#123;\n  searchFormConfig: IForm\n&#125;\nconst props = defineProps&lt;Props&gt;()\nconst emit = defineEmits&lt;&#123;\n  (e: 'resetBtnClick'): void\n  (e: 'searchBtnClick', formData: object): void\n&#125;&gt;()\nconst store = useStore()\nconst BuFormRef = ref&lt;InstanceType&lt;typeof BuForm&gt;&gt;()\n\n// 1.从接收到的搜索配置中取出各个field,组成表单的数据formData\nconst formItems = props.searchFormConfig?.formItems ?? []\nlet formDataInit = &#123;&#125;\nformItems.map((item) =&gt; &#123;\n  formDataInit[item.field] = ''\n&#125;)\nlet formData = ref(formDataInit)\n\n// 2.重置与搜索功能\n// 重置按钮触发\nconst resetClick = () =&gt; &#123;\n  BuFormRef.value?.resetForm()\n  emit('resetBtnClick')\n&#125;\n// 搜索按钮触发\nconst searchClick = () =&gt; &#123;\n  // 这里需要遍历搜索配置项，配置项里可以传dataType，要求数据返回什么类型的数据\n  let queryInfo = &#123; ...formData.value &#125;\n  props.searchFormConfig.formItems.map((item) =&gt; &#123;\n    if (item.dataType === 'number' &amp;&amp; queryInfo[item.field] !== '') &#123;\n      queryInfo[item.field] = Number(queryInfo[item.field])\n    &#125;\n  &#125;)\n  // 清空queryInfo中没有值的属性\n  for (const i in queryInfo) &#123;\n    if (queryInfo[i] === '') &#123;\n      delete queryInfo[i]\n    &#125;\n  &#125;\n  emit('searchBtnClick', queryInfo)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.header &#123;\n  padding-top: 20px;\n&#125;\n.footer &#123;\n  text-align: right;\n  padding: 0 50px 20px 0;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<h3 id=\"role页面组件文件\"><a class=\"anchor\" href=\"#role页面组件文件\">#</a> role 页面组件文件</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;role&quot;&gt;\n    &lt;page-search\n      :searchFormConfig=&quot;searchFormConfig&quot;\n      @resetBtnClick=&quot;handlerReset&quot;\n      @searchBtnClick=&quot;handlerSearch&quot;\n    &gt;&lt;/page-search&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; searchFormConfig &#125; from './config/search-config-test'\nimport pageSearch from '@/components/page-search/page-search.vue'\nconst handlerReset = () =&gt; &#123;\n  console.log('点击了重置按钮')\n&#125;\nconst handlerSearch = (queryInfo: any) =&gt; &#123;\n  console.log('点击了搜索按钮，值为:', queryInfo)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n\n</code></pre>\n<h2 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>写了这么多，终于写完了，这里是属于 Form 表单部分的封装全部过程，能写到这其实我挺有成就感的哈哈哈哈，因为我刚学会的时候思路有了，但是敲出来有点困难，不过这个过程是我又捋了一遍，然后自己敲出来的，感觉其实也不难，已经掌握了这种封装思路与方法了哈哈，其他组件其实也可以利用这种思路，封装出来，在页面上的使用直接传配置项调用就完事，开发每个相似的页面效率简直是牛逼</p>\n<h1 id=\"table表格的封装\"><a class=\"anchor\" href=\"#table表格的封装\">#</a> Table 表格的封装</h1>\n<h2 id=\"简述-2\"><a class=\"anchor\" href=\"#简述-2\">#</a> 简述</h2>\n<p>再来折磨一遍，这里是 table 表单的封装，其实跟上面的差不多，有点小区别，会用到添加动态插槽，这里就不墨迹了，直接上用配置项封装前的正常使用</p>\n<h2 id=\"正常使用\"><a class=\"anchor\" href=\"#正常使用\">#</a> 正常使用</h2>\n<p>user.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;user&quot;&gt;\n    &lt;el-table style=&quot;width: 100%&quot; :data=&quot;dataList&quot; border&gt;\n      &lt;!-- 1.传入showSelectColumn时展示的全选列 --&gt;\n      &lt;template v-if=&quot;contentTableConfig.showSelectColumn&quot;&gt;\n        &lt;el-table-column type=&quot;selection&quot; /&gt;\n      &lt;/template&gt;\n      &lt;!-- 2.传入showIndexColumn时展示的序号列 --&gt;\n      &lt;template v-if=&quot;contentTableConfig.showIndexColumn&quot;&gt;\n        &lt;el-table-column type=&quot;index&quot; label=&quot;序号&quot; /&gt;\n      &lt;/template&gt;\n      &lt;!-- 3.propList里面的所有列 --&gt;\n      &lt;template v-for=&quot;item in contentTableConfig.propList&quot; :key=&quot;item.prop&quot;&gt;\n        &lt;el-table-column v-bind=&quot;item&quot; show-overflow-tooltip&gt;\n          &lt;!-- 传有slotName时展示的插槽列 --&gt;\n          &lt;template #default=&quot;scope&quot; v-if=&quot;item.slotName&quot;&gt;\n            &lt;template v-if=&quot;item.slotName === 'handler'&quot;&gt;\n              &lt;el-button size=&quot;small&quot; :icon=&quot;Edit&quot; type=&quot;text&quot;&gt;编辑&lt;/el-button&gt;\n              &lt;el-button size=&quot;small&quot; :icon=&quot;Delete&quot; type=&quot;text&quot;\n                &gt;删除&lt;/el-button\n              &gt;\n            &lt;/template&gt;\n            &lt;template v-if=&quot;item.slotName === 'status'&quot;&gt;\n              &lt;el-button&gt;&#123;&#123;\n                scope.row.status === 0 ? '禁用' : '启用'\n              &#125;&#125;&lt;/el-button&gt;\n            &lt;/template&gt;\n          &lt;/template&gt;\n        &lt;/el-table-column&gt;\n      &lt;/template&gt;\n    &lt;/el-table&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; Delete, Edit &#125; from '@element-plus/icons-vue'\nimport &#123; useStore &#125; from '@/store'\nimport &#123; computed &#125; from 'vue'\nconst store = useStore()\n// 这里是网络请求数据\nconst getPageData = () =&gt; &#123;\n  store.dispatch(`main/getPageListAction`, &#123;\n    queryInfo: &#123;\n      offset: 0,\n      size: 10\n    &#125;,\n    pageName: 'users'\n  &#125;)\n&#125;\n// 页面加载时第一次调用获取表单数据\ngetPageData()\nconst dataList = computed(() =&gt; store.getters[`main/pageListData`]('users'))\n\n// 表格配置项\nconst contentTableConfig = &#123;\n  // 表格配置\n  propList: [\n    &#123; prop: 'id', label: '用户id', minWidth: '100', align: 'center' &#125;,\n    &#123; prop: 'name', label: '用户名', minWidth: '100', align: 'center' &#125;,\n    &#123; prop: 'realname', label: '真实姓名', minWidth: '100', align: 'center' &#125;,\n    &#123; prop: 'cellphone', label: '手机号码', minWidth: '100', align: 'center' &#125;,\n    &#123;\n      prop: 'enable',\n      label: '状态',\n      minWidth: '100',\n      slotName: 'status',\n      align: 'center'\n    &#125;,\n    &#123;\n      label: '操作',\n      minWidth: '120',\n      slotName: 'handler',\n      align: 'center'\n    &#125;\n  ],\n  // 表格具有序号列\n  showIndexColumn: true,\n  // 表格具有可选列\n  showSelectColumn: true\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153259867.png\" alt=\"image-20220506153259867\" /></p>\n<p>从上面可以看出，主页面的代码有多冗余，看到就头疼 + 裂开，所以开始一层封装</p>\n<h2 id=\"开始封装1-2\"><a class=\"anchor\" href=\"#开始封装1-2\">#</a> 开始封装①</h2>\n<p>配置项类型文件</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITbaleOption</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  prop<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  minWidth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  slotName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  propList<span class=\"token operator\">:</span> ITbaleOption<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  showIndexColumn<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  showSelectColumn<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  childrenProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置项文件</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ITable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/base-ui/table/type'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> contentTableConfig<span class=\"token operator\">:</span> ITable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 表格配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  propList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'realname'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'真实姓名'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'cellphone'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'enable'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'状态'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> slotName<span class=\"token operator\">:</span> <span class=\"token string\">'status'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'操作'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'120'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      slotName<span class=\"token operator\">:</span> <span class=\"token string\">'handler'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 表格具有序号列</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  showIndexColumn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 表格具有可选列</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  showSelectColumn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>table.vue 文件</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-table style=&quot;width: 100%&quot; :data=&quot;listData&quot; border&gt;\n    &lt;!-- 1.传入showSelectColumn时展示的全选列 --&gt;\n    &lt;template v-if=&quot;showSelectColumn&quot;&gt;\n      &lt;el-table-column type=&quot;selection&quot; /&gt;\n    &lt;/template&gt;\n    &lt;!-- 2.传入showIndexColumn时展示的序号列 --&gt;\n    &lt;template v-if=&quot;showIndexColumn&quot;&gt;\n      &lt;el-table-column type=&quot;index&quot; label=&quot;序号&quot; /&gt;\n    &lt;/template&gt;\n    &lt;!-- 3.propList里面的所有列 --&gt;\n    &lt;template v-for=&quot;item in propList&quot; :key=&quot;item.prop&quot;&gt;\n      &lt;el-table-column v-bind=&quot;item&quot; show-overflow-tooltip&gt;\n        &lt;!-- 传有slotName时展示的插槽列 --&gt;\n        &lt;template #default=&quot;scope&quot; v-if=&quot;item.slotName&quot;&gt;\n          &lt;template v-if=&quot;item.slotName === 'handler'&quot;&gt;\n            &lt;el-button size=&quot;small&quot; :icon=&quot;Edit&quot; type=&quot;text&quot;&gt;编辑&lt;/el-button&gt;\n            &lt;el-button size=&quot;small&quot; :icon=&quot;Delete&quot; type=&quot;text&quot;&gt;删除&lt;/el-button&gt;\n          &lt;/template&gt;\n          &lt;template v-if=&quot;item.slotName === 'status'&quot;&gt;\n            &lt;el-button&gt;&#123;&#123;\n              scope.row.status === 0 ? '禁用' : '启用'\n            &#125;&#125;&lt;/el-button&gt;\n          &lt;/template&gt;\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n    &lt;/template&gt;\n  &lt;/el-table&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; Delete, Edit &#125; from '@element-plus/icons-vue'\nimport &#123; defineProps, withDefaults, defineEmits &#125; from 'vue'\nimport &#123; ITbaleOption &#125; from './type'\ninterface Props &#123;\n  listData: any[] //表单数据\n  propList: ITbaleOption[] //表单配置项\n  showIndexColumn?: boolean //是否显示索引列\n  showSelectColumn?: boolean //是否显示全选列\n  childrenProps?: object // 是否有子数据，树形数据才用得到\n&#125;\nconst props = withDefaults(defineProps&lt;Props&gt;(), &#123;\n  showIndexColumn: false,\n  showSelectColumn: false,\n  childrenProps: () =&gt; (&#123;&#125;)\n&#125;)\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>\n<p>user.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;user&quot;&gt;\n    &lt;table-test v-bind=&quot;contentTableConfig&quot; :listData=&quot;dataList&quot;&gt;&lt;/table-test&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n// 导入表单配置项\nimport &#123; contentTableConfig &#125; from './config/table-config'\nimport tableTest from '@/base-ui/table/table-test.vue'\nimport &#123; useStore &#125; from '@/store'\nimport &#123; computed &#125; from 'vue'\nconst store = useStore()\n\n// 这里是网络请求数据\nconst getPageData = () =&gt; &#123;\n  store.dispatch(`main/getPageListAction`, &#123;\n    queryInfo: &#123;\n      offset: 0,\n      size: 10\n    &#125;,\n    pageName: 'users'\n  &#125;)\n&#125;\n// 页面加载时第一次调用获取表单数据\ngetPageData()\nconst dataList = computed(() =&gt; store.getters[`main/pageListData`]('users'))\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153312738.png\" alt=\"image-20220506153312738\" /></p>\n<p>可以看到，代码抽出去了，但是我们可以发现，里面的插槽其实不能给它写死，应该是动态决定的，所以我们可以这样做</p>\n<p>在拥有 slotName 部分的插槽列部分放入一个具名插槽，再将默认插槽列中的 scope.row 发回给具名插槽</p>\n<p>table.vue（为了可扩展性，我依旧在里面加了两个插槽，一个顶部一个底部）</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;header&quot;&gt;\n    &lt;slot name=&quot;header&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n  &lt;el-table style=&quot;width: 100%&quot; :data=&quot;listData&quot; border&gt;\n    &lt;!-- 1.传入showSelectColumn时展示的全选列 --&gt;\n    &lt;template v-if=&quot;showSelectColumn&quot;&gt;\n      &lt;el-table-column type=&quot;selection&quot; /&gt;\n    &lt;/template&gt;\n    &lt;!-- 2.传入showIndexColumn时展示的序号列 --&gt;\n    &lt;template v-if=&quot;showIndexColumn&quot;&gt;\n      &lt;el-table-column type=&quot;index&quot; label=&quot;序号&quot; /&gt;\n    &lt;/template&gt;\n    &lt;!-- 3.propList里面的所有列 --&gt;\n    &lt;template v-for=&quot;item in propList&quot; :key=&quot;item.prop&quot;&gt;\n      &lt;el-table-column v-bind=&quot;item&quot; show-overflow-tooltip&gt;\n        &lt;!-- 传有slotName时展示的插槽列 --&gt;\n        &lt;template #default=&quot;scope&quot; v-if=&quot;item.slotName&quot;&gt;\n          &lt;slot :name=&quot;item.slotName&quot; :row=&quot;scope.row&quot;&gt;&lt;/slot&gt;\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n    &lt;/template&gt;\n  &lt;/el-table&gt;\n  &lt;div class=&quot;footer&quot;&gt;\n    &lt;slot name=&quot;footer&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; defineProps, withDefaults, defineEmits &#125; from 'vue'\nimport &#123; ITbaleOption &#125; from './type'\ninterface Props &#123;\n  listData: any[] //表单数据\n  propList: ITbaleOption[] //表单配置项\n  showIndexColumn?: boolean //是否显示索引列\n  showSelectColumn?: boolean //是否显示全选列\n  childrenProps?: object // 是否有子数据，树形数据才用得到\n&#125;\nconst props = withDefaults(defineProps&lt;Props&gt;(), &#123;\n  showIndexColumn: false,\n  showSelectColumn: false,\n  childrenProps: () =&gt; (&#123;&#125;)\n&#125;)\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<p>然后在 user.vue 中放入具名插槽，传进去 table 组件里，同时传入一些内容到可扩展插槽里面</p>\n<p>user.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;user&quot;&gt;\n    &lt;div class=&quot;content&quot;&gt;\n      &lt;table-test v-bind=&quot;contentTableConfig&quot; :listData=&quot;dataList&quot;&gt;\n        &lt;!-- 1.header中的插槽 --&gt;\n        &lt;template #header&gt;\n          &lt;div class=&quot;header-default&quot;&gt;\n            &lt;!-- 传入标题（位于左侧） --&gt;\n            &lt;div class=&quot;title&quot;&gt;用户列表&lt;/div&gt;\n            &lt;!-- 传入处理内容（位于右侧） --&gt;\n            &lt;div class=&quot;handler&quot;&gt;\n              &lt;el-button type=&quot;primary&quot; @click=&quot;addUserBtnClick&quot;\n                &gt;新建用户&lt;/el-button\n              &gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/template&gt;\n        &lt;!-- 2.该user页面独有部分 --&gt;\n        &lt;template #status=&quot;scope&quot;&gt;\n          &lt;el-button&gt;&#123;&#123; scope.row.status === 0 ? '禁用' : '启用' &#125;&#125;&lt;/el-button&gt;\n        &lt;/template&gt;\n        &lt;!-- 3.每个页面都会有的部分 --&gt;\n        &lt;template #handler=&quot;scope&quot;&gt;\n          &lt;el-button\n            size=&quot;small&quot;\n            :icon=&quot;Edit&quot;\n            type=&quot;text&quot;\n            @click=&quot;handleEditClick(scope.row)&quot;\n            &gt;编辑&lt;/el-button\n          &gt;\n          &lt;el-button\n            size=&quot;small&quot;\n            :icon=&quot;Delete&quot;\n            type=&quot;text&quot;\n            @click=&quot;deleteBtnClick(scope.row)&quot;\n            &gt;删除&lt;/el-button\n          &gt;\n        &lt;/template&gt;\n        &lt;!-- 4.footer插槽 --&gt;\n        &lt;template #footer&gt;\n          &lt;!-- 只有总条数&gt;0才会有分页器 --&gt;\n          &lt;div class=&quot;footer-default&quot;&gt;\n            &lt;el-pagination\n              :page-sizes=&quot;[100, 200, 300, 400]&quot;\n              layout=&quot;total, sizes, prev, pager, next, jumper&quot;\n              :total=&quot;400&quot;\n            /&gt;\n          &lt;/div&gt;\n        &lt;/template&gt;\n      &lt;/table-test&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n// 导入表单配置项\nimport &#123; contentTableConfig &#125; from './config/table-config'\nimport &#123; Delete, Edit &#125; from '@element-plus/icons-vue'\nimport tableTest from '@/base-ui/table/table-test.vue'\nimport &#123; useStore &#125; from '@/store'\nimport &#123; computed &#125; from 'vue'\nconst store = useStore()\n\n// 这里是网络请求数据\nconst getPageData = () =&gt; &#123;\n  store.dispatch(`main/getPageListAction`, &#123;\n    queryInfo: &#123;\n      offset: 0,\n      size: 10\n    &#125;,\n    pageName: 'users'\n  &#125;)\n&#125;\n// 页面加载时第一次调用获取表单数据\ngetPageData()\nconst dataList = computed(() =&gt; store.getters[`main/pageListData`]('users'))\n\n// 点击编辑按钮触发事件\nconst handleEditClick = (row: any) =&gt; &#123;\n  console.log('点击了编辑按钮，数据为：', row)\n&#125;\n// 点击删除按钮触发事件\nconst deleteBtnClick = (row: any) =&gt; &#123;\n  console.log('点击了删除按钮，数据为：', row)\n&#125;\n// 点击新建用户触发事件\nconst addUserBtnClick = () =&gt; &#123;\n  console.log('点击了新建用户')\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.content &#123;\n  border-top: 20px solid #dedee1;\n  padding: 40px;\n&#125;\n.header-default &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  .title &#123;\n    font-size: 22px;\n    font-weight: 700;\n  &#125;\n&#125;\n.footer-default &#123;\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 20px;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153326944.png\" alt=\"image-20220506153326944\" /></p>\n<p>显然此时封装已经满足需求了，但是我们发现主页面的代码页还是比较冗余，如果不用到插槽的话还好，要用到插槽的话，就要在主页面写入很多插槽，多个页面都这样的话页裂开，所以我们要像之前一样把这坨代码再封一层</p>\n<h2 id=\"开始封装2-2\"><a class=\"anchor\" href=\"#开始封装2-2\">#</a> 开始封装②</h2>\n<p>page-table.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;table-test v-bind=&quot;contentTableConfig&quot; :listData=&quot;dataList&quot;&gt;\n    &lt;!-- 1.header中的插槽 --&gt;\n    &lt;template #header&gt;\n      &lt;div class=&quot;header-default&quot;&gt;\n        &lt;!-- 传入标题（位于左侧） --&gt;\n        &lt;div class=&quot;title&quot;&gt;&#123;&#123; pageNameInChinese &#125;&#125;列表&lt;/div&gt;\n        &lt;!-- 传入处理内容（位于右侧） --&gt;\n        &lt;div class=&quot;handler&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; @click=&quot;addUserBtnClick&quot;\n            &gt;新建&#123;&#123; pageNameInChinese &#125;&#125;&lt;/el-button\n          &gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n    &lt;!-- 2.该user页面独有部分 --&gt;\n    &lt;template #status=&quot;scope&quot;&gt;\n      &lt;el-button&gt;&#123;&#123; scope.row.status === 0 ? '禁用' : '启用' &#125;&#125;&lt;/el-button&gt;\n    &lt;/template&gt;\n    &lt;!-- 3.每个页面都会有的部分 --&gt;\n    &lt;template #handler=&quot;scope&quot;&gt;\n      &lt;el-button\n        size=&quot;small&quot;\n        :icon=&quot;Edit&quot;\n        type=&quot;text&quot;\n        @click=&quot;handleEditClick(scope.row)&quot;\n        &gt;编辑&lt;/el-button\n      &gt;\n      &lt;el-button\n        size=&quot;small&quot;\n        :icon=&quot;Delete&quot;\n        type=&quot;text&quot;\n        @click=&quot;deleteBtnClick(scope.row)&quot;\n        &gt;删除&lt;/el-button\n      &gt;\n    &lt;/template&gt;\n    &lt;!-- 4.footer插槽 --&gt;\n    &lt;template #footer&gt;\n      &lt;!-- 只有总条数&gt;0才会有分页器 --&gt;\n      &lt;div class=&quot;footer-default&quot;&gt;\n        &lt;el-pagination\n          :page-sizes=&quot;[100, 200, 300, 400]&quot;\n          layout=&quot;total, sizes, prev, pager, next, jumper&quot;\n          :total=&quot;400&quot;\n        /&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/table-test&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; Delete, Edit &#125; from '@element-plus/icons-vue'\nimport tableTest from '@/base-ui/table/table-test.vue'\nimport type &#123; ITable &#125; from '@/base-ui/table/type'\n\nimport &#123; useStore &#125; from '@/store'\nimport &#123; defineProps, computed &#125; from 'vue'\n\n// 定义属性\ninterface Props &#123;\n  contentTableConfig: ITable //表单配置接收\n  pageName: string //表单名字接收\n&#125;\nconst props = defineProps&lt;Props&gt;()\n\nconst store = useStore()\n\n// 这里是网络请求数据\nconst getPageData = () =&gt; &#123;\n  store.dispatch(`main/getPageListAction`, &#123;\n    queryInfo: &#123;\n      offset: 0,\n      size: 10\n    &#125;,\n    pageName: props.pageName\n  &#125;)\n&#125;\n// 页面加载时第一次调用获取表单数据\ngetPageData()\nconst dataList = computed(() =&gt;\n  store.getters[`main/pageListData`](props.pageName)\n)\n\n// 1.获取页面中文名称\nconst pageNameTransform = (pageName: string): string =&gt; &#123;\n  switch (pageName) &#123;\n    case 'users':\n      return '用户'\n    default:\n      return ''\n  &#125;\n&#125;\nconst pageNameInChinese = pageNameTransform(props.pageName)\n\n// 点击编辑按钮触发事件\nconst handleEditClick = (row: any) =&gt; &#123;\n  console.log('点击了编辑按钮，数据为：', row)\n&#125;\n// 点击删除按钮触发事件\nconst deleteBtnClick = (row: any) =&gt; &#123;\n  console.log('点击了删除按钮，数据为：', row)\n&#125;\n// 点击新建用户触发事件\nconst addUserBtnClick = () =&gt; &#123;\n  console.log('点击了新建用户')\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.header-default &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  .title &#123;\n    font-size: 22px;\n    font-weight: 700;\n  &#125;\n&#125;\n.footer-default &#123;\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 20px;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p>user.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;user&quot;&gt;\n    &lt;div class=&quot;content&quot;&gt;\n      &lt;page-table\n        :contentTableConfig=&quot;contentTableConfig&quot;\n        pageName=&quot;users&quot;\n      &gt;&lt;/page-table&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n// 导入表单配置项\nimport &#123; contentTableConfig &#125; from './config/table-config'\nimport pageTable from '@/components/page-table/page-table-test.vue'\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.content &#123;\n  border-top: 20px solid #dedee1;\n  padding: 40px;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153337789.png\" alt=\"image-20220506153337789\" /></p>\n<p>图中可以看出效果其实是一样的，主页面的代码少了，只需要传入配置项和 pageName（控制网络请求数据）就可以生成一个表格，但是我们可以发现，如果多个页面复用的话，其实操作列的插槽是公有的，但是状态列却是私有的，别的页面不一定有状态页，所以状态列内容插入的位置应该在主页面 user 里面而不该在封装的组件里面，而且编辑新建逻辑也是页面独有，应该在主页面执行</p>\n<h2 id=\"开始封装3-2\"><a class=\"anchor\" href=\"#开始封装3-2\">#</a> 开始封装③</h2>\n<p>user.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;user&quot;&gt;\n    &lt;div class=&quot;content&quot;&gt;\n      &lt;page-table\n        :contentTableConfig=&quot;contentTableConfig&quot;\n        pageName=&quot;users&quot;\n        @editBtnClick=&quot;handleEditClick&quot;\n        @createBtnClick=&quot;handleCreateClick&quot;\n      &gt;\n        &lt;template #status=&quot;scope&quot;&gt;\n          &lt;el-button&gt;&#123;&#123; scope.row.status === 0 ? '禁用' : '启用' &#125;&#125;&lt;/el-button&gt;\n        &lt;/template&gt;\n      &lt;/page-table&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n// 导入表单配置项\nimport &#123; contentTableConfig &#125; from './config/table-config'\nimport pageTable from '@/components/page-table/page-table-test.vue'\n\nconst handleEditClick = (row: any, pageNameInChinese: any) =&gt; &#123;\n  console.log('点击了编辑按钮，数据为：', row, pageNameInChinese)\n&#125;\n\nconst handleCreateClick = (pageNameInChinese: any) =&gt; &#123;\n  console.log('点击了新建用户，数据为：', pageNameInChinese)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.content &#123;\n  border-top: 20px solid #dedee1;\n  padding: 40px;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p>page-table.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;table-test v-bind=&quot;contentTableConfig&quot; :listData=&quot;dataList&quot;&gt;\n    &lt;!-- 1.header中的插槽 --&gt;\n    &lt;template #header&gt;\n      &lt;div class=&quot;header-default&quot;&gt;\n        &lt;!-- 传入标题（位于左侧） --&gt;\n        &lt;div class=&quot;title&quot;&gt;&#123;&#123; pageNameInChinese &#125;&#125;列表&lt;/div&gt;\n        &lt;!-- 传入处理内容（位于右侧） --&gt;\n        &lt;div class=&quot;handler&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; @click=&quot;addUserBtnClick&quot;\n            &gt;新建&#123;&#123; pageNameInChinese &#125;&#125;&lt;/el-button\n          &gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n    &lt;!-- 2.该user页面独有部分 --&gt;\n    &lt;template\n      v-for=&quot;item in otherPropSlots&quot;\n      :key=&quot;item.prop&quot;\n      #[item.slotName]=&quot;scope&quot;\n    &gt;\n      &lt;template v-if=&quot;item.slotName&quot;&gt;\n        &lt;slot :name=&quot;item.slotName&quot; :row=&quot;scope.row&quot;&gt;&lt;/slot&gt;\n      &lt;/template&gt;\n    &lt;/template&gt;\n    &lt;!-- 3.每个页面都会有的部分 --&gt;\n    &lt;template #handler=&quot;scope&quot;&gt;\n      &lt;el-button\n        size=&quot;small&quot;\n        :icon=&quot;Edit&quot;\n        type=&quot;text&quot;\n        @click=&quot;handleEditClick(scope.row)&quot;\n        &gt;编辑&lt;/el-button\n      &gt;\n      &lt;el-button\n        size=&quot;small&quot;\n        :icon=&quot;Delete&quot;\n        type=&quot;text&quot;\n        @click=&quot;deleteBtnClick(scope.row)&quot;\n        &gt;删除&lt;/el-button\n      &gt;\n    &lt;/template&gt;\n    &lt;!-- 4.footer插槽 --&gt;\n    &lt;template #footer&gt;\n      &lt;!-- 只有总条数&gt;0才会有分页器 --&gt;\n      &lt;div class=&quot;footer-default&quot;&gt;\n        &lt;el-pagination\n          :page-sizes=&quot;[100, 200, 300, 400]&quot;\n          layout=&quot;total, sizes, prev, pager, next, jumper&quot;\n          :total=&quot;400&quot;\n        /&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/table-test&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; Delete, Edit &#125; from '@element-plus/icons-vue'\nimport tableTest from '@/base-ui/table/table-test.vue'\nimport type &#123; ITable &#125; from '@/base-ui/table/type'\n\nimport &#123; useStore &#125; from '@/store'\nimport &#123; defineProps, computed, defineEmits &#125; from 'vue'\n\n// 定义属性\ninterface Props &#123;\n  contentTableConfig: ITable //表单配置接收\n  pageName: string //表单名字接收\n&#125;\nconst props = defineProps&lt;Props&gt;()\nconst emit = defineEmits&lt;&#123;\n  (e: 'createBtnClick', pageNameInChinese: string): void\n  (e: 'editBtnClick', rowData: any, pageNameInChinese: string): void\n&#125;&gt;()\n\nconst store = useStore()\n\n// 这里是网络请求数据\nconst getPageData = () =&gt; &#123;\n  store.dispatch(`main/getPageListAction`, &#123;\n    queryInfo: &#123;\n      offset: 0,\n      size: 10\n    &#125;,\n    pageName: props.pageName\n  &#125;)\n&#125;\n// 页面加载时第一次调用获取表单数据\ngetPageData()\nconst dataList = computed(() =&gt;\n  store.getters[`main/pageListData`](props.pageName)\n)\n\n// 1.获取页面中文名称\nconst pageNameTransform = (pageName: string): string =&gt; &#123;\n  switch (pageName) &#123;\n    case 'users':\n      return '用户'\n    default:\n      return ''\n  &#125;\n&#125;\nconst pageNameInChinese = pageNameTransform(props.pageName)\n\n// 2.属于动态插槽的配置项筛选\nconst otherPropSlots: any = props.contentTableConfig?.propList.filter(\n  (item: any) =&gt; &#123;\n    if (item.slotName === 'handler') return false\n    return item.slotName\n  &#125;\n)\n\n// 点击编辑按钮触发事件\nconst handleEditClick = (row: any) =&gt; &#123;\n  emit('editBtnClick', row, pageNameInChinese)\n&#125;\n// 点击删除按钮触发事件\nconst deleteBtnClick = (row: any) =&gt; &#123;\n  console.log('点击了删除按钮，数据为：', row)\n&#125;\n// 点击新建用户触发事件\nconst addUserBtnClick = () =&gt; &#123;\n  emit('createBtnClick', pageNameInChinese)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.header-default &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  .title &#123;\n    font-size: 22px;\n    font-weight: 700;\n  &#125;\n&#125;\n.footer-default &#123;\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 20px;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<p><img data-src=\"https://fastly.jsdelivr.net/gh/aaaa8880788/duck-img//blog/Vue/Element%20Plus%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/image-20220506153348571.png\" alt=\"image-20220506153348571\" /></p>\n<p>可以看到，这时我们已经把独有私有的插槽区分开了，而且编辑和新建的逻辑也在主页面中执行，封装完毕，下面附上完整代码</p>\n<h2 id=\"完整封装代码4\"><a class=\"anchor\" href=\"#完整封装代码4\">#</a> 完整封装代码④</h2>\n<h3 id=\"配置项类型文件-2\"><a class=\"anchor\" href=\"#配置项类型文件-2\">#</a> 配置项类型文件</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITbaleOption</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  prop<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  label<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  minWidth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  slotName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  align<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  propList<span class=\"token operator\">:</span> ITbaleOption<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  showIndexColumn<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  showSelectColumn<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  childrenProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"配置项文件-2\"><a class=\"anchor\" href=\"#配置项文件-2\">#</a> 配置项文件</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ITable <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/base-ui/table/type'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> contentTableConfig<span class=\"token operator\">:</span> ITable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 表格配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  propList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> align<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> align<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'realname'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'真实姓名'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> align<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> prop<span class=\"token operator\">:</span> <span class=\"token string\">'cellphone'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'手机号码'</span><span class=\"token punctuation\">,</span> minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span> align<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      prop<span class=\"token operator\">:</span> <span class=\"token string\">'enable'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'状态'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'100'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      slotName<span class=\"token operator\">:</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      align<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      label<span class=\"token operator\">:</span> <span class=\"token string\">'操作'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      minWidth<span class=\"token operator\">:</span> <span class=\"token string\">'120'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      slotName<span class=\"token operator\">:</span> <span class=\"token string\">'handler'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      align<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 表格具有序号列</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  showIndexColumn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 表格具有可选列</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  showSelectColumn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"table表单组件文件\"><a class=\"anchor\" href=\"#table表单组件文件\">#</a> table 表单组件文件</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;header&quot;&gt;\n    &lt;slot name=&quot;header&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n  &lt;el-table style=&quot;width: 100%&quot; :data=&quot;listData&quot; border&gt;\n    &lt;!-- 1.传入showSelectColumn时展示的全选列 --&gt;\n    &lt;template v-if=&quot;showSelectColumn&quot;&gt;\n      &lt;el-table-column type=&quot;selection&quot; /&gt;\n    &lt;/template&gt;\n    &lt;!-- 2.传入showIndexColumn时展示的序号列 --&gt;\n    &lt;template v-if=&quot;showIndexColumn&quot;&gt;\n      &lt;el-table-column type=&quot;index&quot; label=&quot;序号&quot; /&gt;\n    &lt;/template&gt;\n    &lt;!-- 3.propList里面的所有列 --&gt;\n    &lt;template v-for=&quot;item in propList&quot; :key=&quot;item.prop&quot;&gt;\n      &lt;el-table-column v-bind=&quot;item&quot; show-overflow-tooltip&gt;\n        &lt;!-- 传有slotName时展示的插槽列 --&gt;\n        &lt;template #default=&quot;scope&quot; v-if=&quot;item.slotName&quot;&gt;\n          &lt;slot :name=&quot;item.slotName&quot; :row=&quot;scope.row&quot;&gt;&lt;/slot&gt;\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n    &lt;/template&gt;\n  &lt;/el-table&gt;\n  &lt;div class=&quot;footer&quot;&gt;\n    &lt;slot name=&quot;footer&quot;&gt; &lt;/slot&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; defineProps, withDefaults, defineEmits &#125; from 'vue'\nimport &#123; ITbaleOption &#125; from './type'\ninterface Props &#123;\n  listData: any[] //表单数据\n  propList: ITbaleOption[] //表单配置项\n  showIndexColumn?: boolean //是否显示索引列\n  showSelectColumn?: boolean //是否显示全选列\n  childrenProps?: object // 是否有子数据，树形数据才用得到\n&#125;\nconst props = withDefaults(defineProps&lt;Props&gt;(), &#123;\n  showIndexColumn: false,\n  showSelectColumn: false,\n  childrenProps: () =&gt; (&#123;&#125;)\n&#125;)\n&lt;/script&gt;\n\n&lt;style scoped&gt;&lt;/style&gt;\n\n</code></pre>\n<h3 id=\"page-table组件文件\"><a class=\"anchor\" href=\"#page-table组件文件\">#</a> page-table 组件文件</h3>\n<h3 id=\"user页面组件文件\"><a class=\"anchor\" href=\"#user页面组件文件\">#</a> user 页面组件文件</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;user&quot;&gt;\n    &lt;div class=&quot;content&quot;&gt;\n      &lt;page-table\n        :contentTableConfig=&quot;contentTableConfig&quot;\n        pageName=&quot;users&quot;\n        @editBtnClick=&quot;handleEditClick&quot;\n        @createBtnClick=&quot;handleCreateClick&quot;\n      &gt;\n        &lt;template #status=&quot;scope&quot;&gt;\n          &lt;el-button&gt;&#123;&#123; scope.row.status === 0 ? '禁用' : '启用' &#125;&#125;&lt;/el-button&gt;\n        &lt;/template&gt;\n      &lt;/page-table&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n// 导入表单配置项\nimport &#123; contentTableConfig &#125; from './config/table-config'\nimport pageTable from '@/components/page-table/page-table-test.vue'\n\nconst handleEditClick = (row: any, pageNameInChinese: any) =&gt; &#123;\n  console.log('点击了编辑按钮，数据为：', row, pageNameInChinese)\n&#125;\n\nconst handleCreateClick = (pageNameInChinese: any) =&gt; &#123;\n  console.log('点击了新建用户，数据为：', pageNameInChinese)\n&#125;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;\n.content &#123;\n  border-top: 20px solid #dedee1;\n  padding: 40px;\n&#125;\n&lt;/style&gt;\n\n</code></pre>\n<h1 id=\"结语-2\"><a class=\"anchor\" href=\"#结语-2\">#</a> 结语</h1>\n<p>刚学会的代码思路与写法，花了一天整理，主要还是自己记录一下，颇有收获，感觉大佬分享使我进步～虽然还是很菜....</p>\n",
            "tags": [
                "Vue",
                "Vue3",
                "TypeScript",
                "Element Plus"
            ]
        }
    ]
}